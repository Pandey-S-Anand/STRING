//Bruteforce Approach

class Solution {
    private List<List<String>> allPartitions;

    public List<List<String>> partition(String str) {
        allPartitions = new ArrayList<>();
        partitionHelper(str, new ArrayList<>());
        return allPartitions;
    }

    private void partitionHelper(String str, List<String> currentPartitions) {
        if (str.isEmpty()) {
            allPartitions.add(new ArrayList<>(currentPartitions));
            return;
        }

        for (int i = 0; i < str.length(); i++) {
            if (isPalindrome(str, 0, i)) {
                currentPartitions.add(str.substring(0, i + 1));
                partitionHelper(str.substring(i + 1), currentPartitions);
                currentPartitions.remove(currentPartitions.size() - 1);
            }
        }
    }

    private boolean isPalindrome(String str, int i, int j) {
        while (i < j) {
            if (str.charAt(i) != str.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }

        return true;
    }
}


//Good Approach

class Solution {
    private List<List<String>> allPartitions;

    public List<List<String>> partition(String str) {
        allPartitions = new ArrayList<>();
        partitionHelper(str, 0, new ArrayList<>(str.length()));
        return allPartitions;
    }

    private void partitionHelper(String str, int start, List<String> currentPartitions) {
        if (start == str.length()) {
            allPartitions.add(new ArrayList<>(currentPartitions));
            return;
        }

        for (int i = start; i < str.length(); i++) {
            if (isPalindrome(str, start, i)) {
                currentPartitions.add(str.substring(start, i + 1));
                partitionHelper(str, i + 1, currentPartitions);
                currentPartitions.remove(currentPartitions.size() - 1);
            }
        }
    }

    private boolean isPalindrome(String str, int i, int j) {
        while (i < j) {
            if (str.charAt(i) != str.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}


//Better Approach

class Solution {
    private List<List<String>> allPartitions;
    private int[][] memo;

    public List<List<String>> partition(String str) {
        allPartitions = new ArrayList<>();
        memo = new int[str.length()][str.length()];
        intializeMemo();
        partitionHelper(str, 0, new ArrayList<>(str.length()));
        return allPartitions;
    }

    private void partitionHelper(String str, int start, List<String> currentPartitions) {
        if (start == str.length()) {
            allPartitions.add(new ArrayList<>(currentPartitions));
            return;
        }

        for (int i = start; i < str.length(); i++) {
            if (isPalindrome(str, start, i)) {
                currentPartitions.add(str.substring(start, i + 1));
                partitionHelper(str, i + 1, currentPartitions);
                currentPartitions.remove(currentPartitions.size() - 1);
            }
        }
    }

    private boolean isPalindrome(String str, int i, int j) {
        if (memo[i][j] != -1) {
            return memo[i][j] == 1;
        }

        while (i < j) {
            if (str.charAt(i) != str.charAt(j)) {
                memo[i][j] = 0;
                return false;
            }
            i++;
            j--;
        }
        memo[i][j] = 1;
        return true;
    }

    private void intializeMemo() {
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
    }
}

//Optimal Approach

class Solution {
    private boolean[][] dp;
    private List<List<String>> allPartitions;

    public List<List<String>> partition(String str) {
        allPartitions = new ArrayList<>();
        precomputePalindromeSubstrings(str);
        partitionHelper(str, 0, new ArrayList<>(str.length()));
        return allPartitions;
    }

    private void partitionHelper(String str, int start, List<String> currentPartitions) {
        if (start == str.length()) {
            allPartitions.add(new ArrayList<>(currentPartitions));
            return;
        }

        for (int i = start; i < str.length(); i++) {
            if (dp[start][i]) {
                currentPartitions.add(str.substring(start, i + 1));
                partitionHelper(str, i + 1, currentPartitions);
                currentPartitions.remove(currentPartitions.size() - 1);
            }
        }
    }

    private void precomputePalindromeSubstrings(String str) {
        dp = new boolean[str.length()][str.length()];

        for (int gap = 0; gap < str.length(); gap++) {
            for (int i = 0, j = gap; j < str.length(); i++, j++) {
                if (gap == 0) {
                    dp[i][j] = true;
                } else if (gap == 1) {
                    dp[i][j] = str.charAt(i) == str.charAt(j);
                } else {
                    dp[i][j] = (dp[i + 1][j - 1] && str.charAt(i) == str.charAt(j));
                }
            }
        }
    }
}
