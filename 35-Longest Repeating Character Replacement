//Bruteforce Approach

class Solution {
    public int characterReplacement(String str, int k) {
        int maxLength = 0;

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                String substring = str.substring(start, end + 1);
                int numChangesNeeded = substring.length() - getMaxFrequency(substring);
                if (numChangesNeeded > k) {
                    break;
                }
                maxLength = Math.max(maxLength, end - start + 1);
            }
        }

        return maxLength;
    }

    private int getMaxFrequency(String str) {
        int[] freqArray = new int[26];
        int maxFreq = 0;

        for (int i = 0; i < str.length(); i++) {
            freqArray[str.charAt(i) - 'A']++;
        }

        for (int frequency : freqArray) {
            maxFreq = Math.max(maxFreq, frequency);
        }

        return maxFreq;
    }
}


//Improved Approach

class Solution {
    public int characterReplacement(String str, int k) {
        int maxLength = 0;
        int[] freqArray = new int[26];

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                for (int range = start; range <= end; range++) {
                    freqArray[str.charAt(range) - 'A']++;
                }
                int numChangesNeeded = (end - start + 1) - getMaxFrequency(freqArray);
                if (numChangesNeeded > k) {
                    break;
                }
                maxLength = Math.max(maxLength, (end - start + 1));
            }
        }

        return maxLength;
    }

    private int getMaxFrequency(int[] freqArray) {
        int maxFreq = 0;
        for (int frequency : freqArray) {
            maxFreq = Math.max(maxFreq, frequency);
        }
        Arrays.fill(freqArray, 0);
        return maxFreq;
    }
}


//Good Approach

class Solution {
    public int characterReplacement(String str, int k) {
        int maxLength = 0;
        int[] freqArray = new int[26];

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                freqArray[str.charAt(end) - 'A']++;
                int numChangesNeeded = (end - start + 1) - getMaxFrequency(freqArray);
                if (numChangesNeeded > k) {
                    break;
                }
                maxLength = Math.max(maxLength, (end - start + 1));
            }
            Arrays.fill(freqArray, 0);
        }

        return maxLength;
    }

    private int getMaxFrequency(int[] freqArray) {
        int maxFreq = 0;
        for (int frequency : freqArray) {
            maxFreq = Math.max(maxFreq, frequency);
        }
        return maxFreq;
    }
}



//Better Approach

class Solution {
    public int characterReplacement(String str, int k) {
        int maxLength = 0, maxFreq = 0, start = 0, end = 0;
        int[] freqArray = new int[26];

        while (end < str.length()) {
            freqArray[str.charAt(end) - 'A']++;
            maxFreq = Math.max(maxFreq, freqArray[str.charAt(end) - 'A']);
            int numChangesNeeded = (end - start + 1) - maxFreq;

            if (numChangesNeeded > k) {
                freqArray[str.charAt(start) - 'A']--;
                maxFreq = 0;
                for (int i = 0; i < 26; i++) {
                    maxFreq = Math.max(freqArray[i], maxFreq);
                }
                start++;
            }

            maxLength = Math.max(maxLength, end - start + 1);

            end++;
        }

        return maxLength;
    }
}


//Optimal Approach

class Solution {
    public int characterReplacement(String str, int k) {
        int maxLength = 0, maxFreq = 0, start = 0, end = 0;
        int[] freqArray = new int[26];

        while (end < str.length()) {
            freqArray[str.charAt(end) - 'A']++;
            maxFreq = Math.max(maxFreq, freqArray[str.charAt(end) - 'A']);
            int numChangesNeeded = (end - start + 1) - maxFreq;

            if (numChangesNeeded > k) {
                freqArray[str.charAt(start) - 'A']--;
                start++;
            }

            maxLength = Math.max(maxLength, end - start + 1);

            end++;
        }

        return maxLength;
    }
}
