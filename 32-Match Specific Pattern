//Method 1

class GfG {
    public static ArrayList<String> findMatchedWords(int n, ArrayList<String> dictionary, String pattern) {
        ArrayList<String> matchingWords = new ArrayList<>();

        for (String word : dictionary) {
            if (doesWordMatchPattern(word, pattern)) {
                matchingWords.add(word);
            }
        }

        return matchingWords;
    }

    private static boolean doesWordMatchPattern(String word, String pattern) {
        if (word.length() != pattern.length()) {
            return false;
        }

        Map<Character, Character> patternToWordMap = new HashMap<>();

        for (int i = 0; i < word.length(); i++) {
            if (patternToWordMap.containsKey(pattern.charAt(i))) {
                if (patternToWordMap.get(pattern.charAt(i)) != word.charAt(i)) {
                    return false;
                }
            } else {
                patternToWordMap.put(pattern.charAt(i), word.charAt(i));
            }
        }

        return true;
    }
}


//Method 2
/*
Important Testcase :
For Input: 
4
abb abc xyz xyy
foo

Expected Output: 
abb xyy
*/

class GfG {
    public static ArrayList<String> findMatchedWords(int n, ArrayList<String> dictionary, String pattern) {
        ArrayList<String> matchingWords = new ArrayList<>();

        for (String word : dictionary) {
            if (doesWordMatchPattern(word, pattern)) {
                matchingWords.add(word);
            }
        }

        return matchingWords;
    }

    private static boolean doesWordMatchPattern(String word, String pattern) {
        if (word.length() != pattern.length()) {
            return false;
        }

        Map<Character, Character> wordToPatternMap = new HashMap<>();
        Map<Character, Character> patternToWordMap = new HashMap<>();


        for (int i = 0; i < word.length(); i++) {
            if (wordToPatternMap.containsKey(word.charAt(i))) {
                if (wordToPatternMap.get(word.charAt(i)) != pattern.charAt(i)) {
                    return false;
                }
            } else {
                if(patternToWordMap.containsKey(pattern.charAt(i))){
                    return false;
                }
                wordToPatternMap.put(word.charAt(i), pattern.charAt(i));
                patternToWordMap.put(pattern.charAt(i),word.charAt(i));
            }
        }

        return true;
    }
}
