//Bruteforce Approach

class Solution {
    public int numberOfSubstrings(String str) {
        int count = 0;
        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                if ((end - start + 1) >= 3 && isValidSubstring(str, start, end)) {
                    count++;
                }
            }
        }

        return count;
    }

    private boolean isValidSubstring(String str, int start, int end) {
        boolean foundA = false, foundB = false, foundC = false;

        for (int i = start; i <= end; i++) {
            if (str.charAt(i) == 'a') {
                foundA = true;
            } else if (str.charAt(i) == 'b') {
                foundB = true;
            } else {
                foundC = true;
            }

            if (foundA && foundB && foundC) {
                return true;
            }
        }

        return false;
    }
}


//Better Approach

class Solution {
    public int numberOfSubstrings(String str) {
        boolean foundA = false, foundB = false, foundC = false;
        int count = 0;

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                if (str.charAt(end) == 'a') {
                    foundA = true;
                } else if (str.charAt(end) == 'b') {
                    foundB = true;
                } else {
                    foundC = true;
                }

                if (foundA && foundB && foundC) {
                    count = count + str.length() - end;
                    foundA = foundB = foundC = false;
                    break;
                }
            }
        }

        return count;
    }
}


//Optimal Approach

class Solution {
    public int numberOfSubstrings(String str) {
        int[] frequency = new int[3];
        int start = 0, count = 0;

        for (int end = 0; end < str.length(); end++) {
            frequency[str.charAt(end) - 'a']++;

            // Check if we have at least one 'a', one 'b', and one 'c'
            while (frequency[0] > 0 && frequency[1] > 0 && frequency[2] > 0) {
                // count all substrings that start from 'start' and end at any index from 'end' to the end of the string.
                count += str.length() - end;
                /*
                 * Ex: aaabcaccaa
                 * when start=0 and end=4
                 *
                 * we have following valid subtrings:
                 * "aaabc", "aaabca", "aaabcac", "aaabcacc", "aaabcacca", "aaabcaccaa". i.e str.length() - end
                 * 
                 * similarly when start =1 and end =4
                 * 
                 * we have following valid subtrings:
                 * "aabc", "aabca", "aabcac", "aabcacc", "aabcacca", "aabcaccaa". i.e str.length() - end
                 */

                // Shrink the window from the left
                frequency[str.charAt(start) - 'a']--;
                start++;
            }
        }

        return count;
    }
}


//Aliter

class Solution {
    public int numberOfSubstrings(String str) {
        int freqA = 0, freqB = 0, freqC = 0, start = 0, count = 0;

        for (int end = 0; end < str.length(); end++) {
            if (str.charAt(end) == 'a') {
                freqA++;
            } else if (str.charAt(end) == 'b') {
                freqB++;
            } else {
                freqC++;
            }

            while (freqA > 0 && freqB > 0 && freqC > 0) {
                count += str.length() - end;

                if (str.charAt(start) == 'a') {
                    freqA--;
                } else if (str.charAt(start) == 'b') {
                    freqB--;
                } else {
                    freqC--;
                }
                start++;
            }
        }

        return count;
    }
}
