//Bruteforce Approach

class Solution {
    public int longestCommonSubsequence(String str1, String str2) {
        List<String> subsequencesStr1 = generateSubsequences(str1);
        List<String> subsequencesStr2 = generateSubsequences(str2);
        int maxLength = 0;

        for (String subsequence1 : subsequencesStr1) {
            for (String subsequence2 : subsequencesStr2) {
                if (subsequence1.equals(subsequence2)) {
                    maxLength = Math.max(maxLength, subsequence1.length());
                }
            }
        }

        return maxLength;
    }

    private List<String> generateSubsequences(String str) {
        List<String> subsequences = new ArrayList<>();
        subsequences.add(""); // Start with the empty subsequence

        for (int i = 0; i < str.length(); i++) {
            int size = subsequences.size();
            for (int j = 0; j < size; j++) {
                subsequences.add(subsequences.get(j) + str.charAt(i));
            }
        }

        return subsequences;
    }
}


//Improved Approach

class Solution {
    public int longestCommonSubsequence(String str1, String str2) {
        return computeLcs(str1, str2, 0, 0);
    }

    private int computeLcs(String str1, String str2, int i, int j) {
        if (i == str1.length() || j == str2.length()) {
            return 0;
        }

        if (str1.charAt(i) == str2.charAt(j)) {
            return 1 + computeLcs(str1, str2, i + 1, j + 1);
        }

        return Math.max(computeLcs(str1, str2, i + 1, j), computeLcs(str1, str2, i, j + 1));
    }
}

//Aliter

class Solution {
    public int longestCommonSubsequence(String str1, String str2) {
        return computeLcs(str1, str2, str1.length() - 1, str2.length() - 1);
    }

    private int computeLcs(String str1, String str2, int i, int j) {
        if (i < 0 || j < 0) {
            return 0;
        }

        if (str1.charAt(i) == str2.charAt(j)) {
            return 1 + computeLcs(str1, str2, i - 1, j - 1);
        }

        return Math.max(computeLcs(str1, str2, i - 1, j), computeLcs(str1, str2, i, j - 1));
    }
}


//Better Approach

class Solution {
    private int[][] cache;

    public int longestCommonSubsequence(String str1, String str2) {
        cache = new int[str1.length()][str2.length()];
        intializeCache();
        return computeLcs(str1, str2, 0, 0);
    }

    private int computeLcs(String str1, String str2, int i, int j) {
        if (i == str1.length() || j == str2.length()) {
            return 0;
        }

        if (cache[i][j] != -1) {
            return cache[i][j];
        }
        
        // If the characters match, this contributes to the LCS
        if (str1.charAt(i) == str2.charAt(j)) {
            return 1 + computeLcs(str1, str2, i + 1, j + 1);
        }

        // If the characters don't match, take the maximum LCS by either skipping a character from str1 or str2
        return cache[i][j] = Math.max(computeLcs(str1, str2, i + 1, j), computeLcs(str1, str2, i, j + 1));
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}

//Aliter

class Solution {
    private int[][] cache;

    public int longestCommonSubsequence(String str1, String str2) {
        cache = new int[str1.length()][str2.length()];
        intializeCache();
        return computeLcs(str1, str2, str1.length() - 1, str2.length() - 1);
    }

    private int computeLcs(String str1, String str2, int i, int j) {
        if (i < 0 || j < 0) {
            return 0;
        }

        if (cache[i][j] != -1) {
            return cache[i][j];
        }

        // If the characters match, this contributes to the LCS
        if (str1.charAt(i) == str2.charAt(j)) {
            return 1 + computeLcs(str1, str2, i - 1, j - 1);
        }

        // If the characters don't match, take the maximum LCS by either skipping a character from str1 or str2
        return cache[i][j] = Math.max(computeLcs(str1, str2, i - 1, j), computeLcs(str1, str2, i, j - 1));
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation 

class Solution {
    public int longestCommonSubsequence(String str1, String str2) {
        /*
         * dp[i][j] represents the length of the longest common subsequence (LCS) of the
         * substrings str1[i...str1.length()-1] (from index i to the end of str1) and
         * str2[j...str2.length()-1] (from index j to the end of str2).
         */
        int[][] dp = new int[str1.length() + 1][str2.length() + 1];

        for (int i = 0; i <= str2.length(); i++) {
            dp[str1.length()][i] = 0;
        }

        for (int i = 0; i <= str1.length(); i++) {
            dp[i][str2.length()] = 0;
        }

        for (int i = str1.length() - 1; i >= 0; i--) {
            for (int j = str2.length() - 1; j >= 0; j--) {
                if (str1.charAt(i) == str2.charAt(j)) {
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j + 1]);
                }
            }
        }

        return dp[0][0];
    }
}

//Aliter

class Solution {
    public int longestCommonSubsequence(String str1, String str2) {
        /*
         * dp[i][j]: It holds the length of the longest common subsequence (LCS)
         * between:
         * - The substring of `str1` from index 0 to i-1 (inclusive)
         * - The substring of `str2` from index 0 to j-1 (inclusive)
         */
        int[][] dp = new int[str1.length() + 1][str2.length() + 1];

        for (int i = 0; i <= str2.length(); i++) {
            dp[str1.length()][i] = 0;
        }

        for (int i = 0; i <= str1.length(); i++) {
            dp[i][str2.length()] = 0;
        }

        for (int i = 1; i <= str1.length(); i++) {
            for (int j = 1; j <= str2.length(); j++) {
                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[str1.length()][str2.length()];
    }
}


//Optimal Implementation 

class Solution {
    public int longestCommonSubsequence(String str1, String str2) {
        int[][] dp = new int[str1.length() + 1][str2.length() + 1];
        
        for (int i = str1.length() - 1; i >= 0; i--) {
            for (int j = str2.length() - 1; j >= 0; j--) {
                if (str1.charAt(i) == str2.charAt(j)) {
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j + 1]);
                }
            }
        }

        return dp[0][0];
    }
}

//Aliter

class Solution {
    public int longestCommonSubsequence(String str1, String str2) {
        int[][] dp = new int[str1.length() + 1][str2.length() + 1];
        
        for (int i = 1; i <= str1.length(); i++) {
            for (int j = 1; j <= str2.length(); j++) {
                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[str1.length()][str2.length()];
    }
}

//Aliter (Space Optimised)
/*
Since each entry in the DP table relies only on the current and next rows (or columns), we can optimize the space complexity by using two 1D arrays: one for the current row and one for the next row. 
This optimization reduces the space complexity from O(m * n) to O(min(m, n)), where m and n are the lengths of str1 and str2.
*/

class Solution {
    public int longestCommonSubsequence(String str1, String str2) {
        int[] currentRow = new int[str2.length() + 1];
        int[] nextRow = new int[str2.length() + 1];

        for (int i = str1.length() - 1; i >= 0; i--) {
            for (int j = str2.length() - 1; j >= 0; j--) {
                if (str1.charAt(i) == str2.charAt(j)) {
                    currentRow[j] = 1 + nextRow[j + 1];
                } else {
                    currentRow[j] = Math.max(nextRow[j], currentRow[j + 1]);
                }
            }

            int[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[0];
    }
}

//Aliter

class Solution {
    public int longestCommonSubsequence(String str1, String str2) {
        int[] previousRow = new int[str2.length() + 1];
        int[] currentRow = new int[str2.length() + 1];

        for (int i = 1; i <= str1.length(); i++) {
            for (int j = 1; j <= str2.length(); j++) {
                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    currentRow[j] = 1 + previousRow[j - 1];
                } else {
                    currentRow[j] = Math.max(previousRow[j], currentRow[j - 1]);
                }
            }
            int[] temp = currentRow;
            currentRow = previousRow;
            previousRow = temp;
        }

        return previousRow[str2.length()];
    }
}
