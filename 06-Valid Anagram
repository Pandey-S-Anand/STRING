// Good Approach

class Solution {
    public boolean isAnagram(String s, String t) {
      if(s.length()!=t.length())
        return false;

      char[]arr1=s.toCharArray();
      char[]arr2=t.toCharArray();

      Arrays.sort(arr1);
      Arrays.sort(arr2);

      return Arrays.equals(arr1,arr2);
    }
}


// Better Approach

class Solution {
    public boolean isAnagram(String s, String t) {
      if(s.length()!=t.length())
        return false;

      HashMap<Character,Integer>hm=new HashMap<>();

	    for(int i=0;i<s.length();i++)
		    if(hm.containsKey(s.charAt(i)))
			    hm.put(s.charAt(i),hm.get(s.charAt(i))+1);
	      else
			    hm.put(s.charAt(i),1);
	   
      for(int i=0;i<t.length();i++)
		     if(hm.containsKey(t.charAt(i)))
		     {
		        if(hm.get(t.charAt(i))==1)
			        hm.remove(t.charAt(i));
	          else
		          hm.put(t.charAt(i),hm.get(t.charAt(i))-1); 
		     }
	       else
			    return false;

	    if(hm.isEmpty())
		   return true;
	    else
		   return false;
    }
}


//Optimal Approach

class Solution {
    public boolean isAnagram(String s, String t) {
      if(s.length()!=t.length())
        return false;
      
      int n=s.length();

      int[]count=new int[26];

      for(int i=0;i<n;i++)
        count[s.charAt(i)-'a']++;
      
      for(int i=0;i<n;i++)
        count[t.charAt(i)-'a']--;

      for(int i=0;i<26;i++)
       if(count[i]!=0)
         return false;
      
      return true;
    }
}
