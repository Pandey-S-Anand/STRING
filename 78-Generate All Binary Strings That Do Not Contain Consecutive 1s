/*
How many binary strings of length 'n' is possible ?

OR

Given an array of size 'n', find the number of ways to fill the entire array such that each position in the array can contain either '0' or '1'.


The total number of binary strings of length 'n' is 2 ^ n .
Each position in the binary string can either be '0' or '1', giving us two choices per position. 
For 'n' positions, the total number of combinations is 2 raised to the power of n.

To Recap:

If n=1, the possible strings are: "0", "1" (Total: 2 ^ 1 = 2)
If n=2, the possible strings are: "00", "01", "10", "11" (Total: 2 ^ 2 = 4)
If n=3, the possible strings are: "000", "001", "010", "011", "100", "101", "110", "111" (Total: 2 ^ 3 = 8)
*/

//Bruteforce Approach

class Solution {
   public static List<String> generateBinaryStrings(int n) {
      List<String>nLengthValidBinaryStrings=new ArrayList<>();
      int totalNLengthBinaryStrings=1<<n;  //x<<y = x*2^n
      char[] currentBinaryString=new char[n];

      for(int num=0;num<totalNLengthBinaryStrings;num++){
          for(int i=0;i<n;i++){
              if((num & (1 << i))!=0){
                 currentBinaryString[n - 1 - i]='1';
              }else{
                 currentBinaryString[n - 1 - i]='0';
              }
          }
        
        String nLengthBinaryString=new String(currentBinaryString);
        
        if(!nLengthBinaryString.contains("11")){
           nLengthValidBinaryStrings.add(nLengthBinaryString); 
        }
      }
      
      return nLengthValidBinaryStrings;
   }
}

/*
if you reverse the logic as described below, you will still generate all possible combination of binary strings of length n, 
but the lexicographical order will not be preserved. 

if ((num & (1 << i)) != 0) {
    currentBinaryString[n - 1 - i] = '0';
} else {
    currentBinaryString[n - 1 - i] = '1';
}

Example
Let's illustrate with n = 3:

Normal Logic (Lexicographical Order):

000
001
010
011
100
101
110
111

Reversed Logic:

111 (binary 7 in decimal)
110 (binary 6 in decimal)
101 (binary 5 in decimal)
100 (binary 4 in decimal)
011 (binary 3 in decimal)
010 (binary 2 in decimal)
001 (binary 1 in decimal)
000 (binary 0 in decimal)

As you can see, the reversed logic results in the strings being generated in the reverse order of their numeric values, which is not lexicographical.
To maintain lexicographical order with reversed approach, you would need to sort the generated binary strings after generating them. 
*/

/*
When generating binary strings of length 'n' without consecutive 1s, backward recursion cannot be used because it reverses the lexicographical ordering of output strings. 
However, this ordering would not matter if we were just generating all possible 'n' length binary strings without constraints.

Example:
Input: n = 3

Backward recursion output: "000 100 010 001 101" (incorrect lexicographical order)
Forward recursion output: "000 001 010 100 101" (correct lexicographical order)
Therefore, forward recursion must be used to maintain proper lexicographical ordering when generating binary strings without consecutive 1s.
*/

//Aliter

class Solution {
   private static List<String>validNLengthBinaryStrings;
   
   public static List<String> generateBinaryStrings(int n) {
      validNLengthBinaryStrings=new ArrayList<>();
      generateAllValidNLengthBinaryStrings(new char[n],0);
      return validNLengthBinaryStrings;
   }
  
    private static void generateAllValidNLengthBinaryStrings(char[] currentBinaryString, int index) {
        if (index == currentBinaryString.length) {
            String nLengthBinaryString=new String(currentBinaryString);
            if(!nLengthBinaryString.contains("11")){
               validNLengthBinaryStrings.add(nLengthBinaryString);
            }
            return;
        }

        currentBinaryString[index] = '0';
        generateAllValidNLengthBinaryStrings(currentBinaryString, index + 1);

        currentBinaryString[index] = '1';
        generateAllValidNLengthBinaryStrings(currentBinaryString, index + 1);
    }
}


//Optimal Approach

class Solution {
    private static List<String> validNLengthBinaryStrings;

    public static List<String> generateBinaryStrings(int n) {
        validNLengthBinaryStrings = new ArrayList<>();
        generateAllValidNLengthBinaryStrings(new char[n], 0, false);
        return validNLengthBinaryStrings;
    }

    private static void generateAllValidNLengthBinaryStrings(char[] currentBinaryString, int index, boolean wasLastBit1) {
        if (index == currentBinaryString.length) {
            validNLengthBinaryStrings.add(new String(currentBinaryString));
            return;
        }

        currentBinaryString[index] = '0';
        generateAllValidNLengthBinaryStrings(currentBinaryString, index + 1, false);

        if (!wasLastBit1) {
            currentBinaryString[index] = '1';
            generateAllValidNLengthBinaryStrings(currentBinaryString, index + 1, true);
        }
    }
}
