//Bruteforce Approach

class Solution {
    public int numDistinct(String text, String pattern) {
        StringBuilder subsequence = new StringBuilder();
        int count=0,totalSubsequences = 1 << text.length(); // x << y = x * 2^n

        for (int num = 0; num < totalSubsequences; num++) {
            for (int i = 0; i < text.length(); i++) {
                if ((num & (1 << i)) != 0) {
                    subsequence.append(text.charAt(i));
                }
            }

            if(subsequence.toString().equals(pattern)){
                count++;
            }

            subsequence.setLength(0);
        }

        return count;
    }
}


//Improved Approacch

class Solution {
    public int numDistinct(String text, String pattern) {
        return countDistinct(text, pattern, text.length() - 1, pattern.length() - 1);
    }

    private int countDistinct(String text, String pattern, int i, int j) {
        if (j < 0) {        
            return 1;  // If we've matched all characters of the pattern, count this subsequence
        }

        if (i < 0) {
            return 0; // If we've exhausted the main text without fully matching the pattern, return 0
        }

        if (pattern.charAt(j) == text.charAt(i)) {
            return countDistinct(text, pattern, i - 1, j - 1) + countDistinct(text, pattern, i - 1, j);
        }

        return countDistinct(text, pattern, i - 1, j);
    }
}


//Better Approach

//Naive implementation

class Solution {
    private int[][] cache;

    public int numDistinct(String text, String pattern) {
        cache = new int[text.length()][pattern.length()];
        intializeCache();
        return countDistinct(text, pattern, text.length() - 1, pattern.length() - 1);
    }

    private int countDistinct(String text, String pattern, int i, int j) {
        if (j < 0) {
            return 1;
        }

        if (i < 0) {
            return 0;
        }

        if (cache[i][j] != -1) {
            return cache[i][j];
        }

        if (pattern.charAt(j) == text.charAt(i)) {
            return cache[i][j] = countDistinct(text, pattern, i - 1, j - 1) + countDistinct(text, pattern, i - 1, j);
        }

        return cache[i][j] = countDistinct(text, pattern, i - 1, j);
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal implementation

class Solution {
    private int[][] cache;

    public int numDistinct(String text, String pattern) {
        cache = new int[text.length()][pattern.length()];
        intializeCache();
        return countDistinct(text, pattern, text.length() - 1, pattern.length() - 1);
    }

    private int countDistinct(String text, String pattern, int i, int j) {
        if (j < 0) {
            return 1;
        }

        if (i < j) {
            return 0;  // If there are fewer characters left in the text than in the pattern, it's impossible to form the pattern
        }

        if (cache[i][j] != -1) {
            return cache[i][j];
        }

        if (pattern.charAt(j) == text.charAt(i)) {
            return cache[i][j] = countDistinct(text, pattern, i - 1, j - 1) + countDistinct(text, pattern, i - 1, j);
        }

        return cache[i][j] = countDistinct(text, pattern, i - 1, j);
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation 

class Solution {
    public int numDistinct(String text, String pattern) {
        // dp[i][j]: This represents the number of distinct subsequences of the text[0...i-1] that match the pattern[0...j-1].
        int[][] dp = new int[text.length() + 1][pattern.length() + 1];

        dp[0][0] = 1;

        for (int i = 1; i <= text.length(); i++) {
            dp[i][0] = 1;
        }

        for (int i = 1; i <= pattern.length(); i++) {
            dp[0][i] = 0;
        }

        for (int i = 1; i <= text.length(); i++) {
            for (int j = 1; j <= pattern.length(); j++) {
                if (text.charAt(i - 1) == pattern.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp[text.length()][pattern.length()];
    }
}

//Optimal Implementation 

class Solution {
    public int numDistinct(String text, String pattern) {
        // dp[i][j]: This represents the number of distinct subsequences of the text[0...i-1] that match the pattern[0...j-1].
        int[][] dp = new int[text.length() + 1][pattern.length() + 1];
        
        for (int i = 0; i <= text.length(); i++) {
            dp[i][0] = 1;
        }

        for (int i = 1; i <= text.length(); i++) {
            for (int j = 1; j <= pattern.length(); j++) {
                if (text.charAt(i - 1) == pattern.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp[text.length()][pattern.length()];
    }
}

//Aliter

class Solution {
    public int numDistinct(String text, String pattern) {
        int[] currentRow = new int[pattern.length() + 1];
        int[] previousRow = new int[pattern.length() + 1];

        previousRow[0] = 1;

        for (int i = 1; i <= text.length(); i++) {
            currentRow[0] = 1;
            for (int j = 1; j <= pattern.length(); j++) {
                if (text.charAt(i - 1) == pattern.charAt(j - 1)) {
                    currentRow[j] = previousRow[j - 1] + previousRow[j];
                } else {
                    currentRow[j] = previousRow[j];
                }
            }
            int[] temp = currentRow;
            currentRow = previousRow;
            previousRow = temp;
        }

        return previousRow[pattern.length()];
    }
}
