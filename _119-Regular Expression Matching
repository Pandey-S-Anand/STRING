/*
 * The problem constraint guarantees that each '*' in the pattern p will have a
 * preceding character, ensuring well-formed patterns. This means that we won't
 * encounter cases where '*' appears as the first character in p.
 */

//Naive Approach

class Solution {
    public boolean isMatch(String text, String pattern) {
        return isMatchHelper(text, pattern, 0, 0);
    }

    private boolean isMatchHelper(String text, String pattern, int i, int j) {
        // Base Case 1: If both text and pattern are fully matched, return true.
        if (i == text.length() && j == pattern.length()) {
            return true;
        }

        // Base Case 2: If the pattern is exhausted but the text isn't fully matched,return false.
        // This ensures that partial matching is not accepted.
        if (j == pattern.length()) {
            return false;
        }

        /*
         * Explanation for the case when the text is empty but the pattern is not:
         * If the remaining pattern contains characters followed by '*', we can still
         * match the empty text since 'char*' can match zero occurrences of 'char'.
         * This case is handled implicitly by the recursive calls.
         * 
         * Example:
         * Testcase 1:
         * text = "", pattern = "a*b*c*"
         * The pattern can match an empty string since each 'char*' means zero
         * occurrences.
         * Expected Output: true
         * 
         * Testcase 2:
         * text = "", pattern = "a*b*cd"
         * Here, the remaining "cd" cannot match an empty string, hence the output is
         * false.
         * Expected Output: false
         */

        boolean isNextStar = (j + 1 < pattern.length() && pattern.charAt(j + 1) == '*');

        if (!isNextStar) {
            // Check if the current characters of text and pattern match or if the pattern has '.'. ( '.' can match any single character.)
            if (i < text.length() && (pattern.charAt(j) == text.charAt(i) || pattern.charAt(j) == '.')) {
                // If they match, recursively check the remaining text and pattern.
                return isMatchHelper(text, pattern, i + 1, j + 1);
            }
            // If the current characters do not match and the pattern does not contain a '.', return false.
            return false;
        }

        // If the current characters match
        if (i < text.length() && (pattern.charAt(j) == text.charAt(i) || pattern.charAt(j) == '.')) {
            return isMatchHelper(text, pattern, i, j + 2) // Match zero occurrences of char*
                    || isMatchHelper(text, pattern, i + 1, j); // Match one occurrence of char
        }

        // If the current characters don't match
        return isMatchHelper(text, pattern, i, j + 2); // Match zero occurrences of char*
    }
}


//Better Approach

class Solution {
    private int[][] cache;

    public boolean isMatch(String text, String pattern) {
        cache = new int[text.length() + 1][pattern.length()];
        initializeCache();
        return isMatchHelper(text, pattern, 0, 0);
    }

    private boolean isMatchHelper(String text, String pattern, int i, int j) {
        if (i == text.length() && j == pattern.length()) {
            return true;
        }

        if (j == pattern.length()) {
            return false;
        }

        if (cache[i][j] != -1) {
            return cache[i][j] == 1;
        }

        boolean isNextStar = (j + 1 < pattern.length() && pattern.charAt(j + 1) == '*');
        boolean isSame = (i < text.length() && (pattern.charAt(j) == text.charAt(i) || pattern.charAt(j) == '.'));

        if (!isNextStar) {
            if (isSame) {
                cache[i][j] = isMatchHelper(text, pattern, i + 1, j + 1) ? 1 : 0;
            } else {
                cache[i][j] = 0;
            }

            return cache[i][j] == 1;
        }

        if (isSame) {
            cache[i][j] = (isMatchHelper(text, pattern, i, j + 2) || isMatchHelper(text, pattern, i + 1, j)) ? 1 : 0;
            return cache[i][j] == 1;
        }

        cache[i][j] = isMatchHelper(text, pattern, i, j + 2) ? 1 : 0;
        return cache[i][j] == 1;
    }

    private void initializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation

class Solution {
    public boolean isMatch(String text, String pattern) {
        // dp[i][j] is true if text[i..text.length()-1] matches pattern[j..pattern.length()-1]; otherwise, it is false.
        boolean[][] dp = new boolean[text.length() + 1][pattern.length() + 1];

        // Empty text and empty pattern is a match
        dp[text.length()][pattern.length()] = true;

        // If the pattern is empty but the text is not, the match is always false, as an empty pattern cannot match any non-empty text.
        for (int i = text.length() - 1; i >= 0; i--) {
            dp[i][pattern.length()] = false;
        }

        /*
         * When the text is empty but the pattern is not:
         * Non-asterisk characters cannot match an empty text, so dp[text.length()][i]  remains false.
         * However, if the pattern contains '*', it can skip the preceding character,
         * potentially allowing a match with the empty text(if dp[text.length()][i+2] is true).
         * We check dp[text.length()][i+2] to see if the rest of the pattern up to that point can match the empty text.
         */
        for (int i = pattern.length() - 1; i >= 0; i--) {
            if (i < pattern.length() - 1 && pattern.charAt(i + 1) == '*') {
                dp[text.length()][i] = dp[text.length()][i + 2];
            }
        }

        for (int i = text.length() - 1; i >= 0; i--) {
            for (int j = pattern.length() - 1; j >= 0; j--) {
                boolean isNextStar = (j + 1 < pattern.length() && pattern.charAt(j + 1) == '*');
                boolean isSame = (i < text.length() && (pattern.charAt(j) == text.charAt(i) || pattern.charAt(j) == '.'));

                if (!isNextStar) {
                    if (isSame) {
                        dp[i][j] = dp[i + 1][j + 1];
                    } else {
                        dp[i][j] = false;
                    }
                    continue;
                }

                if (isSame) {
                    dp[i][j] = (dp[i][j + 2] || dp[i + 1][j]);
                    continue;
                }

                dp[i][j] = dp[i][j + 2];
            }
        }
        return dp[0][0];
    }
}


//Optimal Implementation

class Solution {
    public boolean isMatch(String text, String pattern) {
        boolean[][] dp = new boolean[text.length() + 1][pattern.length() + 1];

        dp[text.length()][pattern.length()] = true;

        for (int i = pattern.length() - 1; i >= 0; i--) {
            if (i < pattern.length() - 1 && pattern.charAt(i + 1) == '*') {
                dp[text.length()][i] = dp[text.length()][i + 2];
            }
        }

        for (int i = text.length() - 1; i >= 0; i--) {
            for (int j = pattern.length() - 1; j >= 0; j--) {
                boolean isNextStar = (j + 1 < pattern.length() && pattern.charAt(j + 1) == '*');
                boolean isSame = (i < text.length() && (pattern.charAt(j) == text.charAt(i) || pattern.charAt(j) == '.'));

                if (!isNextStar) {
                    if (isSame) {
                        dp[i][j] = dp[i + 1][j + 1];
                    }
                } else {
                    if (isSame) {
                        dp[i][j] = (dp[i][j + 2] || dp[i + 1][j]);
                    } else {
                        dp[i][j] = dp[i][j + 2];
                    }
                }
            }
        }
        return dp[0][0];
    }
}


//Aliter (Space optimised)

class Solution {
    public boolean isMatch(String text, String pattern) {
        boolean[] currRow = new boolean[pattern.length() + 1];
        boolean[] nextRow = new boolean[pattern.length() + 1];

        nextRow[pattern.length()] = true;

        for (int i = pattern.length() - 1; i >= 0; i--) {
            if (i < pattern.length() - 1 && pattern.charAt(i + 1) == '*') {
                nextRow[i] = nextRow[i + 2];
            }
        }

        for (int i = text.length() - 1; i >= 0; i--) {
            currRow[pattern.length()] = false;
            for (int j = pattern.length() - 1; j >= 0; j--) {
                boolean isNextStar = (j + 1 < pattern.length() && pattern.charAt(j + 1) == '*');
                boolean isSame = (i < text.length() && (pattern.charAt(j) == text.charAt(i) || pattern.charAt(j) == '.'));

                if (!isNextStar) {
                    if (isSame) {
                        currRow[j] = nextRow[j + 1];
                    } else {
                        currRow[j] = false;
                    }
                } else {
                    if (isSame) {
                        currRow[j] = (currRow[j + 2] || nextRow[j]);
                    } else {
                        currRow[j] = currRow[j + 2];
                    }
                }
            }

            boolean[] temp = currRow;
            currRow = nextRow;
            nextRow = temp;
        }
        
        return nextRow[0];
    }
}
