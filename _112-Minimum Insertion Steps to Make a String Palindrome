//Without LPS

//Naive Approach

class Solution {
    public int minInsertions(String str) {
        return minInsertions(str, 0, str.length() - 1);
    }

    private int minInsertions(String str, int i, int j) {
        if (i > j) {
            return 0; // Base case: if the start index exceeds the end index, return 0 (no insertions needed)
        }

        /*
         * We need to insert one character (either before i or after j)
         * The minimum insertions needed is 1 plus the minimum of:
         * - Inserting a character after i (move i forward)
         * - Inserting a character before j (move j backward)
         */
        if (str.charAt(i) != str.charAt(j)) {
            return 1 + Math.min(minInsertions(str, i + 1, j), minInsertions(str, i, j - 1));
        }

        // If the characters at indices i and j are the same, we can move inward and check the next pair of characters
        return minInsertions(str, i + 1, j - 1);
    }
}


//Better Approach 

class Solution {
    private int[][] cache;

    public int minInsertions(String str) {
        cache = new int[str.length()][str.length()];
        intializeCache();
        return minInsertions(str, 0, str.length() - 1);
    }

    private int minInsertions(String str, int i, int j) {
        if (i > j) {
            return 0;
        }

        if (cache[i][j] != -1) {
            return cache[i][j];
        }

        if (str.charAt(i) != str.charAt(j)) {
            return cache[i][j] = 1 + Math.min(minInsertions(str, i + 1, j), minInsertions(str, i, j - 1));
        }

        return cache[i][j] = minInsertions(str, i + 1, j - 1);
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation

class Solution {
    public int minInsertions(String str) {
        // dp[i][j] represents the minimum number of insertions required to make the substring str[i..j] a palindrome.
        int[][] dp = new int[str.length() + 1][str.length() + 1];

        for (int start = str.length() - 1; start >= 0; start--) {
            for (int end = start; end < str.length(); end++) {
                if (str.charAt(start) != str.charAt(end)) {
                    dp[start][end] = 1 + Math.min(dp[start + 1][end], end - 1 < 0 ? 0 : dp[start][end - 1]);
                } else {
                    if (end > 0) {
                        dp[start][end] = dp[start + 1][end - 1];
                    }
                }
            }
        }

        return dp[0][str.length() - 1];
    }
}


//Aliter (Space optimised)

class Solution {
    public int minInsertions(String str) {
        int[] currentRow = new int[str.length() + 1];
        int[] nextRow = new int[str.length() + 1];

        for (int start = str.length() - 1; start >= 0; start--) {
            for (int end = start; end < str.length(); end++) {
                if (str.charAt(start) != str.charAt(end)) {
                    currentRow[end] = 1 + Math.min(nextRow[end], end - 1 < 0 ? 0 : currentRow[end - 1]);
                } else {
                    if (end > 0) {
                        currentRow[end] = nextRow[end - 1];
                    }
                }
            }

            int[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[str.length() - 1];
    }
}


//Using LPS

//Bruteforce Approach

class Solution {
    public int minInsertions(String str) {
        return str.length() - longestPalindromeSubsequence(str);
    }

    private int longestPalindromeSubsequence(String str) {
        int maxLength = 0;
        List<String> subsequences = new ArrayList<>();
        subsequences.add(""); // Start with the empty subsequence

        for (int i = 0; i < str.length(); i++) {
            int size = subsequences.size();
            for (int j = 0; j < size; j++) {
                String subsequence = subsequences.get(j) + str.charAt(i);
                if (isPalindrome(subsequence)) {
                    maxLength = Math.max(maxLength, subsequence.length());
                }
                subsequences.add(subsequence);
            }
        }

        return maxLength;
    }

    private boolean isPalindrome(String str) {
        int start = 0, end = str.length() - 1;

        while (start < end) {
            if (str.charAt(start) != str.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }

        return true;
    }
}

//Good Approach

class Solution {
    public int minInsertions(String str) {
        return str.length() - longestPalindromeSubsequence(str, 0, str.length() - 1);
    }

    private int longestPalindromeSubsequence(String str, int start, int end) {
        if (start == end) {
            return 1;
        }

        if (end - start == 1) {
            return str.charAt(start) == str.charAt(end) ? 2 : 1;
        }

        if (str.charAt(start) == str.charAt(end)) {
            return 2 + longestPalindromeSubsequence(str, start + 1, end - 1);
        }

        return Math.max(longestPalindromeSubsequence(str, start + 1, end), longestPalindromeSubsequence(str, start, end - 1));
    }
}

//Better Approach

class Solution {
    private int[][] cache;

    public int minInsertions(String str) {
        cache = new int[str.length()][str.length()];
        intializeCache();
        return str.length() - longestPalindromeSubsequence(str, 0, str.length() - 1);
    }

    private int longestPalindromeSubsequence(String str, int start, int end) {
        if (start > end) {
            return 0;
        }

        if (end - start <= 1) {
            return (start == end) ? 1 : (str.charAt(start) == str.charAt(end) ? 2 : 1);
        }

        if (cache[start][end] != -1) {
            return cache[start][end];
        }

        if (str.charAt(start) == str.charAt(end)) {
            return cache[start][end] = 2 + longestPalindromeSubsequence(str, start + 1, end - 1);
        }

        return cache[start][end] = Math.max(longestPalindromeSubsequence(str, start + 1, end), longestPalindromeSubsequence(str, start, end - 1));
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

class Solution {
    public int minInsertions(String str) {
        return str.length() - longestPalindromeSubsequence(str);
    }

    private int longestPalindromeSubsequence(String str) {
        int[][] dp = new int[str.length()][str.length()];

        for (int start = str.length() - 1; start >= 0; start--) {
            for (int end = start; end < str.length(); end++) {
                if (end - start <= 1) {
                    dp[start][end] = (start == end) ? 1 : (str.charAt(start) == str.charAt(end) ? 2 : 1);
                } else {
                    if (str.charAt(start) == str.charAt(end)) {
                        dp[start][end] = 2 + dp[start + 1][end - 1];
                    } else {
                        dp[start][end] = Math.max(dp[start + 1][end], dp[start][end - 1]);
                    }
                }
            }
        }

        return dp[0][str.length() - 1];
    }
}

//Aliter (Space optimised)

class Solution {
    public int minInsertions(String str) {
        return str.length() - longestPalindromeSubsequence(str);
    }

    private int longestPalindromeSubsequence(String str) {
        int[] nextRow = new int[str.length()];
        int[] curentRow = new int[str.length()];

        for (int start = str.length() - 1; start >= 0; start--) {
            for (int end = start; end < str.length(); end++) {
                if (end - start <= 1) {
                    curentRow[end] = (start == end) ? 1 : (str.charAt(start) == str.charAt(end) ? 2 : 1);
                } else {
                    if (str.charAt(start) == str.charAt(end)) {
                        curentRow[end] = 2 + nextRow[end - 1];
                    } else {
                        curentRow[end] = Math.max(nextRow[end], curentRow[end - 1]);
                    }
                }
            }

            int[] temp = curentRow;
            curentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[str.length() - 1];
    }
}
