//Bruteforce Approach

class Solution {
    public String minWindow(String str, String sub) {
        if (str.length() < sub.length()) {
            return ""; // Early return if str is smaller than sub
        }

        Map<Character, Integer> windowFreqMap = new HashMap<>();
        Map<Character, Integer> subFreqMap = new HashMap<>();
        int minLength = Integer.MAX_VALUE, bestStart = -1, bestEnd = -1;

        for (int i = 0; i < sub.length(); i++) {
            subFreqMap.put(sub.charAt(i), subFreqMap.getOrDefault(sub.charAt(i), 0) + 1);
        }

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                windowFreqMap.put(str.charAt(end), windowFreqMap.getOrDefault(str.charAt(end), 0) + 1);

                // If the current window size is smaller than the length of the target string, skip it
                if (end - start + 1 < sub.length()) {
                    continue; // Continue to expand the window
                }

                if (containsAllChar(windowFreqMap, subFreqMap) && (end - start + 1) < minLength) {
                    minLength = end - start + 1;
                    bestStart = start;
                    bestEnd = end;
                    break; // Break out of the inner loop since further expansions will only yield larger substrings
                }
            }
            // Clear the window frequency map after finishing the current 'start' point to reset for the next window
            windowFreqMap.clear();
        }
        // If no valid window was found, return an empty string Otherwise, return the substring from the best start to best end positions
        return minLength == Integer.MAX_VALUE ? "" : str.substring(bestStart, bestEnd + 1);
    }

    private boolean containsAllChar(Map<Character, Integer> windowFreqMap, Map<Character, Integer> subFreqMap) {
        for (char ch : subFreqMap.keySet()) {
            if (!windowFreqMap.containsKey(ch) || windowFreqMap.get(ch) < subFreqMap.get(ch)) {
                return false; // If a character is missing from the window or its count is less than needed, return false
            }
        }
        // If all characters are present with the required frequencies, return true
        return true;
    }
}


//Improved Approach

class Solution {
    public String minWindow(String str, String sub) {
        if (str.length() < sub.length()) {
            return "";
        }

        int[] windowFreqMap = new int[52];
        int[] subFreqMap = new int[52];
        int minLength = Integer.MAX_VALUE, bestStart = -1, bestEnd = -1;

        for (int i = 0; i < sub.length(); i++) {
            if (Character.isUpperCase(sub.charAt(i))) {
                subFreqMap[sub.charAt(i) - 'A']++; // Map uppercase 'A'-'Z' to 0-25
            } else {
                subFreqMap[sub.charAt(i) - 'a' + 26]++; // Map lowercase 'a'-'z' to 26-51
            }
        }

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                if (Character.isUpperCase(str.charAt(end))) {
                    windowFreqMap[str.charAt(end) - 'A']++;
                } else {
                    windowFreqMap[str.charAt(end) - 'a' + 26]++;
                }

                if (end - start + 1 < sub.length()) {
                    continue; // Continue to expand the window
                }

                if (containsAllChar(windowFreqMap, subFreqMap) && (end - start + 1) < minLength) {
                    minLength = end - start + 1;
                    bestStart = start;
                    bestEnd = end;
                    break;
                }
            }
            Arrays.fill(windowFreqMap, 0);
        }

        return minLength == Integer.MAX_VALUE ? "" : str.substring(bestStart, bestEnd + 1);
    }

    private boolean containsAllChar(int[] windowFreqMap, int[] subFreqMap) {
        for (int ch = 0; ch < 52; ch++) {
            if (windowFreqMap[ch] < subFreqMap[ch]) {
                return false;
            }
        }
        return true;
    }
}


//Better Approach

class Solution {
    public String minWindow(String str, String sub) {
        if (str.length() < sub.length()) {
            return ""; // Early return if str is smaller than sub
        }

        Map<Character, Integer> windowFreqMap = new HashMap<>();
        Map<Character, Integer> subFreqMap = new HashMap<>();

        for (int i = 0; i < sub.length(); i++) {
            subFreqMap.put(sub.charAt(i), subFreqMap.getOrDefault(sub.charAt(i), 0) + 1);
        }

        // matchCount : Counter to track how many characters from 'sub' have been matched in the current window
        int start = 0, end = 0, matchCount = 0, bestStart = -1, bestEnd = -1, minLength = Integer.MAX_VALUE;

        while (end < str.length()) {
            windowFreqMap.put(str.charAt(end), windowFreqMap.getOrDefault(str.charAt(end), 0) + 1);
            /*
             * If the character is in the target 'sub' and its frequency in the current
             * window does not exceed the required frequency in 'sub', we increment
             * matchCount
             */
            if (subFreqMap.containsKey(str.charAt(end)) && windowFreqMap.get(str.charAt(end)) <= subFreqMap.get(str.charAt(end))) {
                matchCount++; // This indicates one more character is correctly matched
            }

            /*
             * When all the characters in the sub have been matched in the window, i.e.,
             * when the matchCount is equal to the length of sub, we have a candidate window
             * that contains all characters of sub. However, this window may not be the
             * smallest one. To try to minimize the window size, we move the left pointer
             * (start) to the right, reducing the window size while ensuring that the window
             * still contains all characters of sub in the required frequency.
             */
            while (matchCount == sub.length()) {
                // Check if the current window is smaller than the previous smallest window
                if ((end - start + 1) < minLength) {
                    minLength = end - start + 1;
                    bestStart = start;
                    bestEnd = end;
                }

                windowFreqMap.put(str.charAt(start), windowFreqMap.get(str.charAt(start)) - 1);
                /*
                 * When moving the start pointer, we reduce the frequency of the character at
                 * str[start] in windowFreqMap. If this character is one of the characters in
                 * sub, and reducing its frequency causes it to fall below the required count
                 * (i.e., windowFreqMap.get(str.charAt(start)) <
                 * subFreqMap.get(str.charAt(start))),
                 * then we decrement matchCount. This indicates that the window is no longer
                 * valid
                 * for containing all characters of sub.
                 */
                if (subFreqMap.containsKey(str.charAt(start)) && (windowFreqMap.get(str.charAt(start)) < subFreqMap.get(str.charAt(start)))) {
                    matchCount--;
                }
                // Move the 'start' pointer to the right to further shrink the window
                start++;
            }
            /*
             * Once matchCount drops below sub.length(), it indicates that the current
             * window is no longer valid, and we need to expand the window by moving the end
             * pointer again.
             */
            end++;
        }
        // If no valid window was found, return an empty string. Otherwise, return the smallest window found.
        return minLength == Integer.MAX_VALUE ? "" : str.substring(bestStart, bestEnd + 1);
    }
}

//Aliter

class Solution {
    public String minWindow(String str, String sub) {
        if (str.length() < sub.length()) {
            return "";
        }

        Map<Character, Integer> windowFreqMap = new HashMap<>();
        Map<Character, Integer> subFreqMap = new HashMap<>();

        for (int i = 0; i < sub.length(); i++) {
            subFreqMap.put(sub.charAt(i), subFreqMap.getOrDefault(sub.charAt(i), 0) + 1);
        }

        int start = 0, end = 0, matchCount = 0, bestStart = -1, bestEnd = -1, minLength = Integer.MAX_VALUE;

        while (end < str.length()) {
            windowFreqMap.put(str.charAt(end), windowFreqMap.getOrDefault(str.charAt(end), 0) + 1);

            if (windowFreqMap.get(str.charAt(end)) <= subFreqMap.getOrDefault(str.charAt(end), 0)) {
                matchCount++;
            }

            while (matchCount == sub.length()) {
                if ((end - start + 1) < minLength) {
                    minLength = end - start + 1;
                    bestStart = start;
                    bestEnd = end;
                }

                windowFreqMap.put(str.charAt(start), windowFreqMap.get(str.charAt(start)) - 1);

                if (windowFreqMap.get(str.charAt(start)) < subFreqMap.getOrDefault(str.charAt(start), 0)) {
                    matchCount--;
                }

                start++;
            }

            end++;
        }

        return minLength == Integer.MAX_VALUE ? "" : str.substring(bestStart, bestEnd + 1);
    }
}


//Optimal Approach

class Solution {
    public String minWindow(String str, String sub) {
        if (str.length() < sub.length()) {
            return "";
        }

        int[] windowFreqMap = new int[128];
        int[] subFreqMap = new int[128];

        for (int i = 0; i < sub.length(); i++) {
            subFreqMap[sub.charAt(i)]++;
        }

        int start = 0, end = 0, matchCount = 0, bestStart = -1, bestEnd = -1, minLength = Integer.MAX_VALUE;

        while (end < str.length()) {
            windowFreqMap[str.charAt(end)]++;

            if (windowFreqMap[str.charAt(end)] <= subFreqMap[str.charAt(end)]) {
                matchCount++;
            }

            while (matchCount == sub.length()) {
                if ((end - start + 1) < minLength) {
                    minLength = end - start + 1;
                    bestStart = start;
                    bestEnd = end;
                }

                windowFreqMap[str.charAt(start)]--;

                if (windowFreqMap[str.charAt(start)] < subFreqMap[str.charAt(start)]) {
                    matchCount--;
                }

                start++;
            }

            end++;
        }

        return minLength == Integer.MAX_VALUE ? "" : str.substring(bestStart, bestEnd + 1);
    }
}


//Aliter

class Solution {
    public String minWindow(String str, String sub) {
        if (str.length() < sub.length()) {
            return "";
        }

        int[] windowFreqMap = new int[52];
        int[] subFreqMap = new int[52];

        for (int i = 0; i < sub.length(); i++) {
            if (Character.isUpperCase(sub.charAt(i))) {
                subFreqMap[sub.charAt(i) - 'A']++;
            } else {
                subFreqMap[sub.charAt(i) - 'a' + 26]++;
            }
        }

        int start = 0, end = 0, matchCount = 0, bestStart = -1, bestEnd = -1, minLength = Integer.MAX_VALUE;

        while (end < str.length()) {
            if (Character.isUpperCase(str.charAt(end))) {
                windowFreqMap[str.charAt(end) - 'A']++;
                if (windowFreqMap[str.charAt(end) - 'A'] <= subFreqMap[str.charAt(end) - 'A']) {
                    matchCount++;
                }
            } else {
                windowFreqMap[str.charAt(end) - 'a' + 26]++;
                if (windowFreqMap[str.charAt(end) - 'a' + 26] <= subFreqMap[str.charAt(end) - 'a' + 26]) {
                    matchCount++;
                }
            }

            while (matchCount == sub.length()) {
                if ((end - start + 1) < minLength) {
                    minLength = end - start + 1;
                    bestStart = start;
                    bestEnd = end;
                }

                if (Character.isUpperCase(str.charAt(start))) {
                    windowFreqMap[str.charAt(start) - 'A']--;
                    if (windowFreqMap[str.charAt(start) - 'A'] < subFreqMap[str.charAt(start) - 'A']) {
                        matchCount--;
                    }
                } else {
                    windowFreqMap[str.charAt(start) - 'a' + 26]--;
                    if (windowFreqMap[str.charAt(start) - 'a' + 26] < subFreqMap[str.charAt(start) - 'a' + 26]) {
                        matchCount--;
                    }
                }

                start++;
            }

            end++;
        }

        return minLength == Integer.MAX_VALUE ? "" : str.substring(bestStart, bestEnd + 1);
    }
}
