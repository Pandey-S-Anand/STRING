/*

# Understanding Permutations

The term nPr refers to the number of permutations of n distinct objects taken r at a time. It is mathematically represented by the formula:
nPr= n! / (n−r)!

When discussing permutations of a string, the terms n and r in the context of nPr can be defined as follows:

n: This represents the total number of distinct characters in the string.
r: This represents the number of characters you want to arrange.

Case 1: Permutations of All Characters

If you want to find the permutations of all characters in a string of length n, then you would set:

r = n, In this case, the formula simplifies to:

nPn = n! / (n - n)! = n!

This means you are calculating all possible arrangements of the entire string.

### Example

For a string of size 3, say "abc", the permutations are:

- "abc"
- "acb"
- "bac"
- "bca"
- "cab"
- "cba"

There are 3! = 6 permutations in total, which matches 3P3.


Case 2: Permutations of a Subset of Characters

If you want to find permutations where you only arrange a subset of characters (say r characters from the string), then you would set:

In this case, you would use:
nPr= n! / (n−r)!

### Example

For a string "abcd" (size 4) and r = 2 (i.e., we are choosing 2 characters at a time), the possible permutations of 2 characters are:

- "ab"
- "ac"
- "ad"
- "ba"
- "bc"
- "bd"
- "ca"
- "cb"
- "cd"
- "da"
- "db"
- "dc"

There are 4P2 = 4! / (4 - 2)! = 4! / 2! = (4 × 3 × 2 × 1) / (2 × 1) = 12 permutations in total.

### Additional Information

- Unlike combinations, where the order does not matter, in permutations, different orders of the same items are counted as different arrangements. For example, if you select 2 letters from the set {A, B, C}, the arrangements AB and BA are considered different.
*/


//Method 1

//Brutefore Approach

class Solution {
    private ArrayList<String> permutations;

    public ArrayList<String> permutation(String str) {
        permutations = new ArrayList<>();
        findPermutations(str, new StringBuilder());
        Collections.sort(permutations);
        return permutations;
    }

    private void findPermutations(String str, StringBuilder permutation) {
        if (str.isEmpty()) {
            permutations.add(permutation.toString());
            return;
        }

        for (int i = 0; i < str.length(); i++) {
            permutation.append(str.charAt(i));
            findPermutations(str.substring(0, i) + str.substring(i + 1), permutation);
            permutation.setLength(permutation.length() - 1);
        }
    }
}


// Optimal Approach

class Solution {
    private ArrayList<String> permutations;

    public ArrayList<String> permutation(String str) {
        permutations = new ArrayList<>();
        findPermutations(str, new StringBuilder(), new boolean[str.length()]);
        Collections.sort(permutations);
        return permutations;
    }

    private void findPermutations(String str, StringBuilder permutation, boolean[] visited) {
        if (permutation.length() == str.length()) {
            permutations.add(permutation.toString());
            return;
        }

        for (int i = 0; i < str.length(); i++) {
            if (!visited[i]) {
                visited[i] = true;
                permutation.append(str.charAt(i));
                findPermutations(str, permutation, visited);
                permutation.setLength(permutation.length() - 1);
                visited[i] = false;
            }
        }
    }
}


//Method 2

class Solution {
    private ArrayList<String> permutations;

    public ArrayList<String> permutation(String str) {
        permutations = new ArrayList<>();
        findPermutations(str.toCharArray(), 0);
        Collections.sort(permutations);
        return permutations;
    }

    private void findPermutations(char[] arr, int index) {
        if (index == arr.length) {
            permutations.add(new String(arr));
            return;
        }

        for (int i = index; i < arr.length; i++) {
            swap(arr, index, i);
            findPermutations(arr, index + 1);
            swap(arr, index, i);
        }
    }

    private void swap(char[] arr, int i, int j) {
        char temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
