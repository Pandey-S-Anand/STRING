//Iterative Approach

public class Solution {
    public static ArrayList<String> binaryStrings(String str) {
        ArrayList<String> newCombinations = new ArrayList<>();
        ArrayList<String> combinations = new ArrayList<>();
        // Start with an initial combination (the original string)
        combinations.add(str);

        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) == '?') {
                // Replace '?' with '0' and '1' for each existing combination
                for (String combination : combinations) {
                    // Replace '?' with '0'
                    newCombinations.add(combination.substring(0, i) + '0' + combination.substring(i + 1));
                    // Replace '?' with '1'
                    newCombinations.add(combination.substring(0, i) + '1' + combination.substring(i + 1));
                }

                // Clear the original combinations and add new ones
                combinations.clear();
                combinations.addAll(newCombinations);
                newCombinations.clear();
            }
        }

        return combinations;
    }
}


//Aliter

public class Solution {
    public static ArrayList<String> binaryStrings(String str) {
        ArrayList<String> combinations = new ArrayList<>();
        combinations.add(str);

        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) == '?') {
                ArrayList<String> newCombinations = new ArrayList<>();

                for (String combination : combinations) {
                    newCombinations.add(combination.substring(0, i) + '0' + combination.substring(i + 1));
                    newCombinations.add(combination.substring(0, i) + '1' + combination.substring(i + 1));
                }

                combinations = newCombinations;
            }
        }

        return combinations;
    }
}

/*
When generating binary strings with '?' replacements, backward recursion cannot be used because the order of replacements affects the lexicographical ordering of output strings.

Example:
Input: "1?"

Forward recursion processes left-to-right, producing: "10" and "11" (correct lexicographical order)
Backward recursion processes right-to-left, producing: "01" and "11" (incorrect lexicographical order)
Therefore, forward recursion must be used to maintain the expected lexicographical ordering of the generated strings.
*/

//Recursive approach

public class Solution {
    private static ArrayList<String> combinations;

    public static ArrayList<String> binaryStrings(String str) {
        combinations = new ArrayList<>();
        generateAllStrings(str, 0, new StringBuilder());
        return combinations;
    }

    private static void generateAllStrings(String str, int index, StringBuilder currentCombination) {
        // Base case: If we've processed all characters of the string, add the current combination to the list
        if (index == str.length()) {
            combinations.add(currentCombination.toString());
            return;
        }

        // If the current character is '?', replace it with both '0' and '1'
        if (str.charAt(index) == '?') {
            // Replace '?' with '0' and recursively process the next character
            currentCombination.append('0');
            generateAllStrings(str, index + 1, currentCombination);

            // Backtrack: Replace the last character (which is '0') with '1' and recursively process the next character
            currentCombination.setCharAt(currentCombination.length() - 1, '1');
            generateAllStrings(str, index + 1, currentCombination);

            // Backtrack: Remove the last character to restore the combination and move up the recursion tree.
            currentCombination.setLength(currentCombination.length() - 1);
        } else {
            // If the current character is not '?', simply append it to the current combination
            currentCombination.append(str.charAt(index));

            // Recurse to process the next character in the string
            generateAllStrings(str, index + 1, currentCombination);

            // Backtrack: Remove the last character to restore the combination and move up the recursion tree.
            currentCombination.setLength(currentCombination.length() - 1);
        }
    }
}
