//Bruteforce Approach

class Solution {
    public int countBinarySubstrings(String str) {
       int n=str.length(),ans=0;
        
        for(int i=0;i<n;i++)
          for(int j=i;j<n;j++)
              if(isValid(str,i,j)) 
                ans++;
      
      return ans;
    }
    
    private boolean isValid(String str,int low,int high)
    {
         if((high-low+1)%2!=0) 
           return false; // string length is odd

         char ch1=str.charAt(low),ch2=str.charAt(high);

         if(ch1==ch2) 
           return false;  // end and start should be different

         int start=low , end=high;

         while(start<end)
         {
            if(str.charAt(start)!=ch1)
              return false;
            else if(str.charAt(end)!=ch2)
                return false;
            else
            {
                start++;
                end--;
            }     
         }
        return true;
    }
}


//Optimal Approach

class Solution {
    public int countBinarySubstrings(String str) {
        int currBlockSize=1,prevBlockSize=0,cnt=0,n=str.length();

        for(int i=1;i<n;i++)
            if(str.charAt(i)==str.charAt(i-1))
                currBlockSize++;
            else
            {
                cnt+=Math.min(currBlockSize,prevBlockSize);
                prevBlockSize=currBlockSize;
                currBlockSize=1;
            }
        
        return cnt+Math.min(currBlockSize,prevBlockSize);
    }
}


