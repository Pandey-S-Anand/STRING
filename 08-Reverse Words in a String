/* Good Approach :

Approach
1:  The input string s is trimmed to remove any leading or trailing spaces using the trim() method.
2:  The trimmed string is then split into an array of words using the split("\\s+") method. The regular expression "\s+" matches one or more whitespace characters, effectively separating the words.
3 : A variable res is initialized as an empty string to store the reversed words.
4 : Starting from the last word in the array (str.length - 1), the loop iterates backwards until the first word (index 0) is reached.
5 : In each iteration, the current word str[i] is appended to res along with a space (" ") to separate the words.
6 : Finally, the first word str[0] is appended to res.
7:  The reversed string of words, stored in res, is returned as the result.


*/


//Naive Implementation

class Solution {
    public String reverseWords(String s) {
        String str=s.trim();
        String[]arr=str.split("\\s+");
        String res="";
        for(int i=arr.length-1;i>=0;i--)
          res=res+arr[i]+" ";

       return res.trim();
    }
}


//Optimal Implementation

class Solution {
    public String reverseWords(String s) {
        String str=s.trim();
        String[]arr=str.split("\\s+");

        StringBuilder res=new StringBuilder();

        for(int i=arr.length-1;i>0;i--){
          res.append(arr[i]);
          res.append(" ");
        }
       
        res.append(arr[0]);

       return res.toString();
    }
}


// Optimal Approach
    
//Naive Implementation

class Solution {
    public static String reverseWords(String s) {
        String str=s.trim();
        char[] arr = str.toCharArray();

        ArrayList<Character>res = new ArrayList<>();
        int i = arr.length - 1;

        while (i > 0) 
        {
            int j = i; // word end index

            while (i >= 0 && arr[i] != ' ')
               i--; 
            
            i++; //word start index
            
            // copy word
            for (int k = i; k <= j; k++) 
              res.add(arr[k]);  

            if(i>0)
              res.add(' ');  // add ' ' to res[]
            
            i--;

            // clear excess space
            while (i >= 0 && arr[i] == ' ') 
              i--; 
        }
        
        for (int k = 0; k <= i; k++) 
           res.add(arr[k]);

        String ans="";

        for(int k=0;k<res.size();k++)
          ans+=res.get(k);

        return ans;
    }
}

//Optimal Implementation


class Solution {
    public static String reverseWords(String s) {
        String str=s.trim();
        char[] arr = str.toCharArray();

        char[]res=new char[arr.length];

        int i = arr.length-1,idx=0;

        while (i > 0) 
        {
            int j = i; // word end index

            while (i >= 0 && arr[i] != ' ')
               i--; 
            
            i++; //word start index
            
            // copy word
            for (int k = i; k <= j; k++) 
              res[idx++]=arr[k];  

            if(i>0)
              res[idx++]=' ';  // add ' ' to res[]
            
            i--;

            // clear excess space
            while (i >= 0 && arr[i] == ' ') 
              i--; 
        }

        for (int k = 0; k <= i; k++) 
           res[idx++]=arr[k];

        return new String(res,0,idx);
    }
}
