//Bruteforce Approach

class Solution {
    long countPS(String str) {
        List<String> subsequences = generateSubsequences(str);
        long MOD=1000000007,count = 0;

        for (String subsequence : subsequences) {
            if (isPalindrome(subsequence)) {
                count=(count+1)%MOD;
            }
        }

        return count;
    }

    private List<String> generateSubsequences(String str) {
        List<String> subsequences = new ArrayList<>();
        subsequences.add(""); // Start with the empty subsequence

        for (int i = 0; i < str.length(); i++) {
            int size = subsequences.size();
            for (int j = 0; j < size; j++) {
                subsequences.add(subsequences.get(j) + str.charAt(i));
            }
        }

        return subsequences;
    }

    private boolean isPalindrome(String str) {
        if(str.isEmpty()){
            return false;
        }
        
        int start = 0, end = str.length() - 1;

        while (start < end) {
            if (str.charAt(start) != str.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }

        return true;
    }
}


//Improved Approach

class Solution {
    long countPS(String str) {
        long MOD = 1000000007, count = 0;
        List<String> subsequences = new ArrayList<>();

        subsequences.add(""); // Start with the empty subsequence

        for (int i = 0; i < str.length(); i++) {
            int size = subsequences.size();
            for (int j = 0; j < size; j++) {
                String subsequence = subsequences.get(j) + str.charAt(i);
                if (isPalindrome(subsequence)) {
                    count = (count + 1) % MOD;
                }
                subsequences.add(subsequence);
            }
        }

        return count;
    }

    private boolean isPalindrome(String str) {
        if (str.isEmpty()) {
            return false;
        }

        int start = 0, end = str.length() - 1;

        while (start < end) {
            if (str.charAt(start) != str.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }

        return true;
    }
}


//Good Approach

