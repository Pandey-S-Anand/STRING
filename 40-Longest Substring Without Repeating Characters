//Bruteforce Approach

class Solution {
  public int lengthOfLongestSubstring(String str) {
    int maxLength = 0,n = str.length();

    for (int i = 0; i < n; i++)
      for (int j = i; j < n; j++)
      {
          if(allUnique(str,i,j))
            maxLength = Math.max(maxLength, (j-i+1));
      }

    return maxLength;
  }

  private boolean allUnique(String str,int low,int high) 
  {
    Set<Character> hs = new HashSet<>();

    for (int i=low;i<=high;i++)
    {
      char ch=str.charAt(i);

      if (hs.contains(ch))
        return false;
      else
        hs.add(ch);
    }
    
    return true;
  }
}


//Better Approach


class Solution {
    public int lengthOfLongestSubstring(String str){
      int maxLen=0,n=str.length(),i=0;
      HashSet<Character>hs=new HashSet();

      for(int j=0;j<n;j++)
      {
        char ch=str.charAt(j);

        if(hs.contains(ch))
        {
           while(str.charAt(i)!=ch)
           {
             hs.remove(str.charAt(i));
             i++;
           }
             
           i++;
        }
        else
          hs.add(ch);
      
        maxLen=Math.max((j-i+1),maxLen);
      }

      return maxLen;
    }
}


//Optimal Approach

class Solution {
    public int lengthOfLongestSubstring(String str){
      int maxLen=0,n=str.length(),i=0;
      int[]set=new int[128];

      for(int j=0;j<n;j++)
      {
        char ch=str.charAt(j);

        if(set[ch]==1)
        {
           while(str.charAt(i)!=ch)
           {
             set[str.charAt(i)]--;
             i++;
           }
             
           i++;
        }
        else
          set[ch]++;
      
        maxLen=Math.max((j-i+1),maxLen);
      }

      return maxLen;
    }
}
