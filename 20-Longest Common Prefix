//Bruteforce Approach

class Solution {
    public String longestCommonPrefix(String[] arr) {
        Arrays.sort(arr, (str1, str2) -> str1.length() - str2.length()); // Sort array according to length in ascending order 
        StringBuilder longestCommonPrefix = new StringBuilder();

        for (int i = 0; i < arr[0].length(); i++) {
            for (int j = 1; j < arr.length; j++) {
                if (arr[j].charAt(i) != arr[0].charAt(i)) {
                    return longestCommonPrefix.toString();
                }
            }

            longestCommonPrefix.append(arr[0].charAt(i));
        }

        return longestCommonPrefix.toString();
    }
}


//Better Approach

class Solution {
    public String longestCommonPrefix(String[] arr) {
        int smallestStringIndex = 0;
        String smallestString = arr[0];

        for (int i = 1; i < arr.length; i++) {
            if (arr[i].length() < smallestString.length()) {
                smallestStringIndex = i;
                smallestString = arr[i];
            }
        }

        StringBuilder longestCommonPrefix = new StringBuilder();

        for (int i = 0; i < smallestString.length(); i++) {
            for (int j = 0; j < arr.length; j++) {
                if (j == smallestStringIndex) {
                    continue;
                }
                if (arr[j].charAt(i) != smallestString.charAt(i)) {
                    return longestCommonPrefix.toString();
                }
            }

            longestCommonPrefix.append(smallestString.charAt(i));
        }

        return longestCommonPrefix.toString();
    }
}



//Optimal Approach

class Solution {
    public String longestCommonPrefix(String[] arr) {
        // Initialize the prefix as the first string
        String prefix = arr[0];

        // Compare the prefix with each string in the array
        for (int i = 1; i < arr.length; i++) {
            // Reduce the prefix length until it matches the start of the current string
            while (arr[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);

                if (prefix.isEmpty()) {
                    return ""; // No common prefix
                }
            }
        }

        return prefix;
    }
}


//Aliter

class Solution {
    public String longestCommonPrefix(String[] arr) {
        String prefix = arr[0];

        for (int i = 1; i < arr.length; i++) {
            while (!arr[i].startsWith(prefix)) {
                prefix = prefix.substring(0, prefix.length() - 1);

                if (prefix.isEmpty()) {
                    return "";
                }
            }
        }

        return prefix;
    }
}


// Aliter

class Solution {
    public String longestCommonPrefix(String[] arr) {
        StringBuilder prefix = new StringBuilder(arr[0]);

        for (int i = 1; i < arr.length; i++) {
            while (!arr[i].startsWith(prefix.toString())) {
                prefix.setLength(prefix.length() - 1);

                if (prefix.length() == 0) {
                    return "";
                }
            }
        }

        return prefix.toString();
    }
}
