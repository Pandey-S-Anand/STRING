//Bruteforce Approach

class Solution {
    public int beautySum(String str) {
      List<String>subs=generateAllSubstrings(str);
      int sum=0;

      for(String s:subs)
      {
         int[]freq=frequency(s);

         int maxFreq = Integer.MIN_VALUE, minFreq = Integer.MAX_VALUE;

         for (int k = 0; k < 26; k++) 
            if (freq[k]!=0) 
            {
              if(freq[k]>maxFreq)
                maxFreq=freq[k];

              if(freq[k]<minFreq)
                minFreq=freq[k];
            }
        
        sum+=(maxFreq - minFreq);
      }

      return sum;
    }

    public List<String> generateAllSubstrings(String str)
    {
      List<String>res=new ArrayList<>();
      int n=str.length();
      
      for(int i=0;i<n;i++)
      {
        StringBuilder temp=new StringBuilder();

        for(int j=i;j<n;j++)
        {
           temp.append(str.charAt(j));
           res.add(temp.toString());
        }
      }

      return res;
    }

    public int[] frequency(String str)
    {
      int n=str.length();
      int[]freq=new int[26];

      for(int i=0;i<n;i++)
        freq[str.charAt(i)-'a']++;
      
      return freq; 
    }
}


//Optimal Approach

class Solution {
    public int beautySum(String str) {
        int n = str.length();
        int sum = 0;

        for (int i = 0; i < n; i++)
        {
            int[] freq = new int[26];

            for (int j = i; j < n; j++)
            {
                freq[str.charAt(j) - 'a']++;

                int maxFreq = Integer.MIN_VALUE;
                int minFreq = Integer.MAX_VALUE;

                for (int k = 0; k < 26; k++) 
                  if(freq[k]!=0) 
                  {
                    maxFreq=Math.max(maxFreq,freq[k]);
                    minFreq=Math.min(minFreq,freq[k]);
                  }

                sum += maxFreq - minFreq;
            }
        }

        return sum;
    }
}
