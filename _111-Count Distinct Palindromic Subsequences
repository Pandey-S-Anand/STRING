//Bruteforce Approach

class Solution {
    static final int MOD = 1000000007;

    public int countPalindromicSubsequences(String str) {
        Set<String> set = new HashSet<>();
        StringBuilder subsequence = new StringBuilder();
        int totalSubsequences = 1 << str.length(); // x << y = x * 2^n

        for (int num = 0; num < totalSubsequences; num++) {
            for (int i = 0; i < str.length(); i++) {
                if ((num & (1 << i)) != 0) {
                    subsequence.append(str.charAt(i));
                }
            }

            if (isPalindrome(subsequence)) {
                set.add(subsequence.toString());
            }

            subsequence.setLength(0);
        }

        return set.size() % MOD;
    }

    private boolean isPalindrome(StringBuilder str) {
        if (str.isEmpty()) {
            return false;
        }

        int start = 0, end = str.length() - 1;

        while (start < end) {
            if (str.charAt(start) != str.charAt(end)) {
                return false;
            }

            start++;
            end--;
        }

        return true;
    }
}


//Good Approach

class Solution {
    private int[] prevIndex;
    private int[] nextIndex;
    private final int mod = 1000000007;

    public int countPalindromicSubsequences(String str) {
        nextIndex = new int[str.length()];
        prevIndex = new int[str.length()];
        Map<Character, Integer> map = new HashMap<>();

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            prevIndex[i] = map.getOrDefault(ch, -1);
            map.put(ch, i);
        }

        map.clear();

        for (int i = str.length() - 1; i >= 0; i--) {
            char ch = str.charAt(i);
            nextIndex[i] = map.getOrDefault(ch, -1);
            map.put(ch, i);
        }

        return computeDps(str, 0, str.length() - 1);
    }

    private int computeDps(String str, int start, int end) {
        if (start > end) {
            return 0;
        }

        if (end == start) {
            return 1; // A single character is a palindrome
        }

        if (end - start == 1) {
            return 2; // If chars are different, count both individually. If same, count one character and the pair as palindrome.
        }

        if (str.charAt(start) != str.charAt(end)) {
            return (computeDps(str, start, end - 1)  + computeDps(str, start + 1, end) - computeDps(str, start + 1, end - 1) + mod) % mod;
        }

        if (nextIndex[start] > prevIndex[end]) {
            return (2 * computeDps(str, start + 1, end - 1) % mod + 2) % mod;
        }

        if (nextIndex[start] == prevIndex[end]) {
            return (2 * computeDps(str, start + 1, end - 1) % mod + 1) % mod;
        }

        return (2  * (computeDps(str, start + 1, end - 1) % mod) % mod  - computeDps(str, nextIndex[start] + 1, prevIndex[end] - 1) + mod) % mod;
    }
}


//Better Approach

class Solution {
    private int[] prevIndex;
    private int[] nextIndex;
    private int[][] cache;
    private final int mod = 1000000007;

    public int countPalindromicSubsequences(String str) {
        cache = new int[str.length()][str.length()];
        intializeCache();
        nextIndex = new int[str.length()];
        prevIndex = new int[str.length()];
        Map<Character, Integer> map = new HashMap<>();

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            prevIndex[i] = map.getOrDefault(ch, -1);
            map.put(ch, i);
        }

        map.clear();

        for (int i = str.length() - 1; i >= 0; i--) {
            char ch = str.charAt(i);
            nextIndex[i] = map.getOrDefault(ch, -1);
            map.put(ch, i);
        }

        return computeDps(str, 0, str.length() - 1);
    }

    private int computeDps(String str, int start, int end) {
        if (start > end) {
            return 0;
        }

        if (end == start) {
            return 1;
        }

        if (end - start == 1) {
            return 2;
        }

        if (cache[start][end] != -1) {
            return cache[start][end];
        }

        if (str.charAt(start) != str.charAt(end)) {
            cache[start][end] = computeDps(str, start, end - 1) + computeDps(str, start + 1, end) - computeDps(str, start + 1, end - 1);
            if (cache[start][end] < 0) {
                cache[start][end] += mod;
            } else {
                cache[start][end] %= mod;
            }

            return cache[start][end];
        }

        if (nextIndex[start] > prevIndex[end]) {
            cache[start][end] = (2 * computeDps(str, start + 1, end - 1) + 2);
            if (cache[start][end] < 0) {
                cache[start][end] += mod;
            } else {
                cache[start][end] %= mod;
            }

            return cache[start][end];
        }

        if (nextIndex[start] == prevIndex[end]) {
            cache[start][end] = 2 * computeDps(str, start + 1, end - 1) + 1;
            if (cache[start][end] < 0) {
                cache[start][end] += mod;
            } else {
                cache[start][end] %= mod;
            }
            return cache[start][end];
        }

        cache[start][end] = (2 * computeDps(str, start + 1, end - 1) - computeDps(str, nextIndex[start] + 1, prevIndex[end] - 1));
        if (cache[start][end] < 0) {
            cache[start][end] += mod;
        } else {
            cache[start][end] %= mod;
        }

        return cache[start][end];
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

class Solution {
    private int mod = 1000000007;

    public int countPalindromicSubsequences(String str) {
        int[][] dp = new int[str.length()][str.length()];
        int[] nextOccurenceIndex = new int[str.length()];
        int[] prevOccurenceIndex = new int[str.length()];
        Map<Character, Integer> map = new HashMap<>();

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            prevOccurenceIndex[i] = map.getOrDefault(ch, -1);
            map.put(ch, i);
        }

        map.clear();

        for (int i = str.length() - 1; i >= 0; i--) {
            char ch = str.charAt(i);
            nextOccurenceIndex[i] = map.getOrDefault(ch, -1);
            map.put(ch, i);
        }
        
        // dp[i][j] = count of distinct palindromic subsequences in the substring str[i...j]
        for (int gap = 0; gap < str.length(); gap++) {
            for (int i = 0, j = gap; j < str.length(); i++, j++) {
                if (gap == 0) {
                    dp[i][j] = 1;// A single character is a palindrome
                } else if (gap == 1) {
                    dp[i][j] = 2;// If chars are different, count both individually. If same, count one character and the pair as palindrome.
                } else {
                    if (str.charAt(i) != str.charAt(j)) {
                        dp[i][j] = dp[i][j - 1] + dp[i + 1][j] - dp[i + 1][j - 1];
                    } else { // str.charAt(i)==str.charAt(j) = ch (say)
                        int nextIndex = nextOccurenceIndex[i]; // Next occurence of 'ch' after i
                        int prevIndex = prevOccurenceIndex[j]; // Previous occurence of 'ch' before j

                        if (nextIndex > prevIndex) { // Means no occurence of 'ch' in middle part
                            dp[i][j] = 2 * dp[i + 1][j - 1] + 2;
                        } else if (nextIndex == prevIndex) { // Means only one occurence of 'ch' in middle part
                            dp[i][j] = 2 * dp[i + 1][j - 1] + 1;
                        } else {// nextIndex < prevIndex => Means more than one occurences of 'ch' in middle part
                            dp[i][j] = 2 * dp[i + 1][j - 1] - dp[nextIndex + 1][prevIndex - 1];
                        }
                    }
                }

                // Handle modulo
                if (dp[i][j] < 0) {
                    dp[i][j] = dp[i][j] + mod;
                } else {
                    dp[i][j] = dp[i][j] % mod;
                }
            }
        }

        return dp[0][str.length() - 1];
    }
}
