//Bruteforce Approach

class Solution {
    public String longestCommonPrefix(String[] arr) {
    
    Arrays.sort(arr,new Comp()); //Sort array according to length in ascending order so that smallest string is at 0th index
    StringBuilder res=new StringBuilder();
    int minLen=arr[0].length();

    for(int i=0;i<minLen;i++)
    {
      for(int j=1;j<arr.length;j++)
        if(arr[j].charAt(i)!=arr[0].charAt(i))
          return res.toString();
      
      res.append(arr[0].charAt(i));
    }

    return res.toString();
  }
}

class Comp implements Comparator<String>{
  public int compare(String str1,String str2){
    if(str1.length()<str2.length())
      return -1;
    else if(str1.length()>str2.length())
      return 1;
    else
      return 0;
  }
}


//Optimal Approach

class Solution {
    public String longestCommonPrefix(String[] arr) {
      String prefix = arr[0];

      for(int i = 1; i < arr.length; i++) 
        while (arr[i].indexOf(prefix) != 0)
        {
          prefix = prefix.substring(0, prefix.length() - 1);

          if (prefix.isEmpty())
            return "";
        }

    return prefix;
  }
}

//Aliter

class Solution {
    public String longestCommonPrefix(String[] arr) {
      String prefix = arr[0];

      for(int i = 1; i < arr.length; i++) 
        while (arr[i].startsWith(prefix)==false)
        {
          prefix = prefix.substring(0, prefix.length() - 1);

          if (prefix.isEmpty())
            return "";
        }

    return prefix;
  }
}
