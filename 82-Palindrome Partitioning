//Bruteforce Approach

class Solution {
    private List<List<String>> allPartitions;

    public List<List<String>> partition(String str) {
        allPartitions = new ArrayList<>();
        partitionHelper(str, new ArrayList<>());
        return allPartitions;
    }

    private void partitionHelper(String str, List<String> currentPartitions) {
        if (str.isEmpty()) {
            allPartitions.add(new ArrayList<>(currentPartitions));
            return;
        }

        for (int i = 0; i < str.length(); i++) {
            if (isPalindrome(str, 0, i)) {
                currentPartitions.add(str.substring(0, i + 1));
                partitionHelper(str.substring(i + 1), currentPartitions);
                currentPartitions.remove(currentPartitions.size() - 1);
            }
        }
    }

    private boolean isPalindrome(String str, int i, int j) {
        while (i < j) {
            if (str.charAt(i) != str.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }

        return true;
    }
}


//Better Approach

//Forward recursive approach

class Solution {
    private List<List<String>> allPartitions;
    private int[][] cache;

    public List<List<String>> partition(String str) {
        allPartitions = new ArrayList<>();
        cache = new int[str.length()][str.length()];
        intializeCache();
        partitionHelper(str, 0, new ArrayList<>(str.length()));
        return allPartitions;
    }

    private void partitionHelper(String str, int start, List<String> currentPartitions) {
        if (start == str.length()) {
            allPartitions.add(new ArrayList<>(currentPartitions));
            return;
        }

        for (int i = start; i < str.length(); i++) {
            if (isPalindrome(str, start, i)) {
                currentPartitions.add(str.substring(start, i + 1));
                partitionHelper(str, i + 1, currentPartitions);
                currentPartitions.remove(currentPartitions.size() - 1);
            }
        }
    }

    private boolean isPalindrome(String str, int start, int end) {
        if (cache[start][end] != -1) {
            return cache[start][end] == 1;
        }

        while (start < end) {
            if (str.charAt(start) != str.charAt(end)) {
                cache[start][end] = 0;
                return cache[start][end] == 1;
            }
            start++;
            end--;
        }
        cache[start][end] = 1;
        return cache[start][end] == 1;
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}

//Backward recursive approach

class Solution {
    private List<List<String>> allPartitions;
    private int[][] cache;

    public List<List<String>> partition(String str) {
        cache = new int[str.length()][str.length()];
        intializeCache();
        allPartitions = new ArrayList<>();
        partitionHelper(str, str.length() - 1, new ArrayList<>(str.length()));
        return allPartitions;
    }

    private void partitionHelper(String str, int start, List<String> currentPartitions) {
        if (start < 0) {
            allPartitions.add(new ArrayList<>(currentPartitions));
            return;
        }

        for (int i = start; i >= 0; i--) {
            if (isPalindrome(str, i, start)) {
                currentPartitions.add(0, str.substring(i, start + 1));
                partitionHelper(str, i - 1, currentPartitions);
                currentPartitions.remove(0);
            }
        }
    }

    private boolean isPalindrome(String str, int start, int end) {
        if (cache[start][end] != -1) {
            return cache[start][end] == 1;
        }

        while (start < end) {
            if (str.charAt(start) != str.charAt(end)) {
                cache[start][end] = 0;
                return cache[start][end] == 1;
            }
            start++;
            end--;
        }
        cache[start][end] = 1;
        return cache[start][end] == 1;
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

class Solution {
    private boolean[][] dp;
    private List<List<String>> allPartitions;

    public List<List<String>> partition(String str) {
        allPartitions = new ArrayList<>();
        precomputePalindromeSubstrings(str);
        partitionHelper(str, 0, new ArrayList<>(str.length()));
        return allPartitions;
    }

    private void partitionHelper(String str, int start, List<String> currentPartitions) {
        if (start == str.length()) {
            allPartitions.add(new ArrayList<>(currentPartitions));
            return;
        }

        for (int i = start; i < str.length(); i++) {
            if (dp[start][i]) {
                currentPartitions.add(str.substring(start, i + 1));
                partitionHelper(str, i + 1, currentPartitions);
                currentPartitions.remove(currentPartitions.size() - 1);
            }
        }
    }

    private void precomputePalindromeSubstrings(String str) {
        dp = new boolean[str.length()][str.length()];

        for (int gap = 0; gap < str.length(); gap++) {
            for (int i = 0, j = gap; j < str.length(); i++, j++) {
                if (gap == 0) {
                    dp[i][j] = true;
                } else if (gap == 1) {
                    dp[i][j] = str.charAt(i) == str.charAt(j);
                } else {
                    dp[i][j] = (dp[i + 1][j - 1] && str.charAt(i) == str.charAt(j));
                }
            }
        }
    }
}
