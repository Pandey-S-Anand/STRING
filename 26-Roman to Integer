//Bruteforce Approach

class Solution {
    private static final Map<Character, Integer> ROMAN_NUMERAL_MAP = Map.of(
            'I', 1,
            'V', 5,
            'X', 10,
            'L', 50,
            'C', 100,
            'D', 500,
            'M', 1000);

    public int romanToInt(String str) {
        int integerValue = 0;
        for (int i = 0; i < (str.length() - 1); i++) {
            char ch = str.charAt(i);

            if (ROMAN_NUMERAL_MAP.get(ch) < ROMAN_NUMERAL_MAP.get(str.charAt(i + 1))) {
                integerValue -= ROMAN_NUMERAL_MAP.get(ch);
            } else {
                integerValue += ROMAN_NUMERAL_MAP.get(ch);
            }
        }

        integerValue += ROMAN_NUMERAL_MAP.get(str.charAt(str.length() - 1));

        return integerValue;
    }
}


//Optimal Approach

class Solution {
    private static final int[] romanValues = new int[26];

    static {
        romanValues['C' - 'A'] = 100;
        romanValues['D' - 'A'] = 500;
        romanValues['I' - 'A'] = 1;
        romanValues['L' - 'A'] = 50;
        romanValues['M' - 'A'] = 1000;
        romanValues['V' - 'A'] = 5;
        romanValues['X' - 'A'] = 10;
    }

    public int romanToInt(String str) {
        int integerValue = 0;

        for (int i = 0; i < (str.length() - 1); i++) {
            char ch = str.charAt(i);

            if (romanValues[ch - 'A'] < romanValues[str.charAt(i + 1) - 'A']) {
                integerValue -= romanValues[ch - 'A'];
            } else {
                integerValue += romanValues[ch - 'A'];
            }
        }

        integerValue += romanValues[str.charAt(str.length() - 1) - 'A'];

        return integerValue;
    }
}
