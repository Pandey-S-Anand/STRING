//Intuitive Implementation 

class Solution {
    public boolean isRobotBounded(String instructions) {
        int x = 0, y = 0; // Intially at origin (0,0)
        /*
         * Direction Mapping :
         * 0 -> North
         * 1 -> East
         * 2 -> South
         * 3 -> West
         */
        int direction = 0; // Intially facing north

        for (int i = 0; i < instructions.length(); i++) {
            char instruction = instructions.charAt(i);

            if (instruction == 'G') {
                // Move forward in the current direction
                if (direction == 0) {
                    y++; // Moving North increases y
                } else if (direction == 1) {
                    x++; // Moving East increases x
                } else if (direction == 2) {
                    y--; // Moving South decreases y
                } else if (direction == 3) {
                    x--; // Moving West decreases x
                }
            } else if (instruction == 'L') {
                if (direction == 0) {
                    // North(0) => left => West(3)
                    direction = 3;
                } else {
                    /*
                     * South(2) => left => East(1)
                     * East(1) => left => North(0)
                     * West(3) => left => South(2)
                     */
                    direction--;
                }
            } else if (instruction == 'R') {
                if (direction == 3) {
                    direction = 0; // West(3) => right => North(0)
                } else {
                    /*
                     * North(0) => right => East(1)
                     * South(2) => right => West(3)
                     * East(1) => right => South(2)
                     */
                    direction++;
                }
            }
        }

        /*
         * The robot is bounded in a circle if:
         * 1. It ends up at the origin (0, 0) after one set of instructions (Ex: instructions ="GGLLGG")
         * 2. Or, if it doesn't end up at origin and donot face north (direction != 0)
         * i.e If the robot does not face north after executing the instructions,
         * it implies that it will return to the origin (0, 0) after every 4 rounds of
         * the given instructions. This is because any orientation other than north
         * (becasue its intial direction was north) creates a cyclic path that will
         * bring the robot back to its original position.(Ex: instructions = "GL")
         */
        return (x == 0 && y == 0) || direction != 0;
        /*
         * The robot is not bounded in a circle if:
         * If it doesn't end up at origin after one set of instructions and faces north (direction == 0) 
         * it means it will move in a straight line indefinitely without returning to the origin.
         * Ex : instructions = "GG"
         */
    }
}


//Optimal Implementation


class Solution {
    public boolean isRobotBounded(String instructions) {
        int x = 0, y = 0, direction = 0;

        for (int i = 0; i < instructions.length(); i++) {
            char instruction = instructions.charAt(i);

            if (instruction == 'G') {
                if (direction == 0) {
                    y++;
                } else if (direction == 1) {
                    x++;
                } else if (direction == 2) {
                    y--;
                } else { // if (direction == 3)
                    x--;
                }
            } else if (instruction == 'L') {
                direction = (direction + 3) % 4;
            } else { // if (instruction == 'R')
                direction = (direction + 1) % 4;
            }
        }

        return (x == 0 && y == 0) || direction != 0;
    }
}
