//Without LCS

//Bruteforce Approach

class Solution {
    public int minDistance(String word1, String word2) {
        return findMinDeletions(word1, word2, 0, 0);
    }

    private int findMinDeletions(String word1, String word2, int i, int j) {
        // Base case: if we reach the end of both the strings word1 and word2
        if (i == word1.length() && j == word2.length()) {
            return 0;
        }
        // Base case: if we reach the end of word1
        if (i == word1.length()) {
            return word2.length() - j; // All remaining characters in word2 must be deleted
        }
        // Base case: if we reach the end of word2
        if (j == word2.length()) {
            return word1.length() - i; // All remaining characters in word1 must be deleted
        }
        // If the characters match, move to the next characters in both strings
        if (word1.charAt(i) == word2.charAt(j)) {
            return findMinDeletions(word1, word2, i + 1, j + 1);
        }
        // If characters do not match, consider deleting from either string and take the minimum of both possibilities
        return 1 + Math.min(findMinDeletions(word1, word2, i + 1, j), findMinDeletions(word1, word2, i, j + 1));
    }
}


//Better Approach

class Solution {
    private int[][] cache;

    public int minDistance(String word1, String word2) {
        cache = new int[word1.length()][word2.length()];
        initializeCache();
        return findMinDeletions(word1, word2, 0, 0);
    }

    private int findMinDeletions(String word1, String word2, int i, int j) {
        if (i == word1.length() && j == word2.length()) {
            return 0;
        }

        if (i == word1.length()) {
            return word2.length() - j;
        }

        if (j == word2.length()) {
            return word1.length() - i;
        }

        if (cache[i][j] != -1) {
            return cache[i][j];
        }

        if (word1.charAt(i) == word2.charAt(j)) {
            return cache[i][j] = findMinDeletions(word1, word2, i + 1, j + 1);
        }

        return cache[i][j] = 1 + Math.min(findMinDeletions(word1, word2, i + 1, j), findMinDeletions(word1, word2, i, j + 1));
    }

    private void initializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

class Solution {
    public int minDistance(String word1, String word2) {
        //dp[i][j] represents the minimum number of deletions required to make the substrings word1[i..word1.length()-1] and word2[j..word2.length()-1] identical
        int[][] dp = new int[word1.length() + 1][word2.length() + 1];

        dp[word1.length()][word2.length()] = 0;  // Initialize dp[0][0] to 0, as no deletions are needed for two empty strings
        
        // If word2 is empty , we need to delete all characters of word1
        for (int i = word1.length(); i >= 0; i--) {
            dp[i][word2.length()] = word1.length() - i; // Remaining characters in word1
        }

        // If word1 is empty , we need to delete all characters of word2
        for (int j = word2.length(); j >= 0; j--) {
            dp[word1.length()][j] = word2.length() - j; // Remaining characters in word2
        }

        for (int i = word1.length()-1; i >= 0; i--) {
            for (int j = word2.length()-1; j >= 0; j--) {
                if (word1.charAt(i) == word2.charAt(j)) {
                    dp[i][j] = dp[i + 1][j + 1];
                } else {
                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j + 1]);
                }
            }
        }

        return dp[0][0];
    }
}


//Aliter (Space optimized)

class Solution {
    public int minDistance(String word1, String word2) {
        int[] currRow = new int[word2.length() + 1];
        int[] nextRow = new int[word2.length() + 1];

        for (int j = word2.length(); j >= 0; j--) {
            nextRow[j] = word2.length() - j; // If word1 is empty , we need to delete all characters of word2
        }

        for (int i = word1.length() - 1; i >= 0; i--) {
            currRow[word2.length()] = word1.length() - i; // if word2 is empty , we need to delete all characters of word1
            for (int j = word2.length() - 1; j >= 0; j--) {
                if (word1.charAt(i) == word2.charAt(j)) {
                    currRow[j] = nextRow[j + 1];
                } else {
                    currRow[j] = 1 + Math.min(nextRow[j], currRow[j + 1]);
                }
            }

            int[] temp = currRow;
            currRow = nextRow;
            nextRow = temp;
        }

        return nextRow[0];
    }
}


//Using LCS

/*
Calculate the minimum deletions:

To make word1 equal to word2, the characters that are not part of the LCS must be deleted.
The number of deletions required for word1 is word1.length() - LCS.
The number of deletions required for word2 is word2.length() - LCS.
The total number of deletions is the sum of these two values.
*/

//Bruteforce Approach

class Solution {
    public int minDistance(String word1, String word2) {
        int lcs = longestCommonSubsequence(word1, word2);
        return (word1.length() - lcs) + (word2.length() - lcs);
    }

    private int longestCommonSubsequence(String str1, String str2) {
        List<String> subsequences1 = generateSubsequences(str1);
        List<String> subsequences2 = generateSubsequences(str2);
        int maxLength = 0;

        for (String subsequence1 : subsequences1) {
            for (String subsequence2 : subsequences2) {
                if (subsequence1.equals(subsequence2)) {
                    maxLength = Math.max(maxLength, subsequence1.length());
                }
            }
        }

        return maxLength;
    }

    private List<String> generateSubsequences(String str) {
        List<String> subsequences = new ArrayList<>();
        subsequences.add(""); // Start with the empty subsequence

        for (int i = 0; i < str.length(); i++) {
            int size = subsequences.size();
            for (int j = 0; j < size; j++) {
                subsequences.add(subsequences.get(j) + str.charAt(i));
            }
        }

        return subsequences;
    }
}


//Improved Approach

class Solution {
    public int minDistance(String word1, String word2) {
        int lcs = longestCommonSubsequence(word1, word2, 0, 0);
        return (word1.length() - lcs) + (word2.length() - lcs);
    }

    private int longestCommonSubsequence(String str1, String str2, int i, int j) {
        if (i == str1.length() || j == str2.length()) {
            return 0;
        }

        if (str1.charAt(i) == str2.charAt(j)) {
            return 1 + longestCommonSubsequence(str1, str2, i + 1, j + 1);
        }

        return Math.max(longestCommonSubsequence(str1, str2, i + 1, j), longestCommonSubsequence(str1, str2, i, j + 1));
    }
}


//Better Approach

class Solution {
    private int[][] cache;

    public int minDistance(String word1, String word2) {
        cache = new int[word1.length()][word2.length()];
        intializeCache();
        int lcs = longestCommonSubsequence(word1, word2, 0, 0);
        return (word1.length() - lcs) + (word2.length() - lcs);
    }

    private int longestCommonSubsequence(String str1, String str2, int i, int j) {
        if (i == str1.length() || j == str2.length()) {
            return 0;
        }

        if (cache[i][j] != -1) {
            return cache[i][j];
        }

        if (str1.charAt(i) == str2.charAt(j)) {
            return cache[i][j] = 1 + longestCommonSubsequence(str1, str2, i + 1, j + 1);
        }

        return cache[i][j] = Math.max(longestCommonSubsequence(str1, str2, i + 1, j), longestCommonSubsequence(str1, str2, i, j + 1));
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

class Solution {
    public int minDistance(String word1, String word2) {
        int lcs = longestCommonSubsequence(word1, word2);
        return (word1.length() - lcs) + (word2.length() - lcs);
    }

    private int longestCommonSubsequence(String str1, String str2) {
        int[][] dp = new int[str1.length() + 1][str2.length() + 1];

        for (int i = str1.length() - 1; i >= 0; i--) {
            for (int j = str2.length() - 1; j >= 0; j--) {
                if (str1.charAt(i) == str2.charAt(j)) {
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j + 1]);
                }
            }
        }

        return dp[0][0];
    }
}


//Aliter (space optimised)

class Solution {
    public int minDistance(String word1, String word2) {
        int lcs = longestCommonSubsequence(word1, word2);
        return (word1.length() - lcs) + (word2.length() - lcs);
    }

    private int longestCommonSubsequence(String str1, String str2) {
        int[] nextRow = new int[str2.length() + 1];
        int[] currentRow = new int[str2.length() + 1];

        for (int i = str1.length() - 1; i >= 0; i--) {
            for (int j = str2.length() - 1; j >= 0; j--) {
                if (str1.charAt(i) == str2.charAt(j)) {
                    currentRow[j] = 1 + nextRow[j + 1];
                } else {
                    currentRow[j] = Math.max(nextRow[j], currentRow[j + 1]);
                }
            }
            int[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[0];
    }
}
