//Bruteforce Approach (Using ArrayDeque class for implementating Stack)

class Solution {
    public boolean checkValidString(String str) {
        ArrayDeque<Integer>openBracket=new ArrayDeque<>();
        ArrayDeque<Integer>star=new ArrayDeque<>();
        int n=str.length();

        for(int i=0;i<n;i++)
        {
          char ch=str.charAt(i);

          if(ch=='(')
            openBracket.push(i);
          else if (ch=='*')
            star.push(i);
          else
          {
            if(openBracket.isEmpty()==false)
              openBracket.pop();
            else // ch==')'
            {
              if(star.isEmpty()==false)
                star.pop();
              else
                return false;
            } 
          }
        }
        
        if(openBracket.size()>star.size())
          return false;

        while(openBracket.isEmpty()==false)
        {
          if(star.isEmpty())
            return false;
          else
          {
            if(star.peek()>openBracket.peek())
            {
              openBracket.pop();
              star.pop();
            }
            else
              return false;
          }          
        }

      return true;
    }
}


//Optimal Approach (Using Array for implementating Stack)

class Solution {
    public boolean checkValidString(String str) {
        int n = str.length();
        int[] openBracket = new int[n];
        int[] star = new int[n];
        int openTop = -1;
        int starTop = -1;
        
        for (int i = 0; i < n; i++)
        {
            char ch = str.charAt(i);

            if (ch == '(') 
              openBracket[++openTop] = i;
            else if (ch == '*')
              star[++starTop] = i;
            else // ch==')' 
            {
                if (openTop!=-1)
                    openTop--;
                else
                {
                   if (starTop!=-1)
                    starTop--;
                   else
                    return false;
                }
            }
        }
        
        if((openTop+1)>(starTop+1))
          return false;

        while (openTop !=-1)
        {
           if(starTop==-1)
             return false;
           
           if(star[starTop] < openBracket[openTop])
                return false;

          openTop--;
          starTop--;
        }

        return true;
    }
}

