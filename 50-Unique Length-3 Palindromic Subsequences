//Bruteforce Approach

class Solution {
    public int countPalindromicSubsequence(String str) {
        Set<String> uniqueSubsequencesOfLengthThree = new HashSet<>();
        StringBuilder currentSubsequence = new StringBuilder();
        int count = 0, totalSubsequences = 1 << str.length();

        for (int num = 0; num < totalSubsequences; num++) {
            for (int i = 0; i < str.length(); i++) {
                if ((num & (1 << i)) != 0) {
                    currentSubsequence.append(str.charAt(i));
                    if (currentSubsequence.length() > 3) {
                        break;
                    }
                }
            }

            String subsequence = currentSubsequence.toString();

            if (subsequence.length() == 3 && isPalindrome(subsequence) && !uniqueSubsequencesOfLengthThree.contains(subsequence)) {
                count++;
            }

            uniqueSubsequencesOfLengthThree.add(subsequence);
            currentSubsequence.setLength(0);
        }

        return count;
    }

    private boolean isPalindrome(String str) {
        return str.charAt(0) == str.charAt(2);
    }
}


//Improved Approach

class Solution {
    public int countPalindromicSubsequence(String str) {
        Set<String> uniqueSubsequencesOfLengthThree = new HashSet<>();

        for (int i = 0; i < str.length(); i++) {
            for (int j = i + 1; j < str.length(); j++) {
                for (int k = j + 1; k < str.length(); k++) {
                    String subsequence = "" + str.charAt(i) + str.charAt(j) + str.charAt(k);
                    if (isPalindrome(subsequence)) {
                        uniqueSubsequencesOfLengthThree.add(subsequence);
                    }
                }
            }
        }

        return uniqueSubsequencesOfLengthThree.size();
    }

    private boolean isPalindrome(String str) {
        return str.charAt(0) == str.charAt(2);
    }
}


//Good Approach

class Solution {
    public int countPalindromicSubsequence(String str) {
        Set<String> uniquePalindromicSubsequence = new HashSet<>();

        // Traverse each character in the string as the center
        for (int i = 1; i < str.length() - 1; i++) {
            // For each character 'a' to 'z', check if it appears on both sides
            for (char ch = 'a'; ch <= 'z'; ch++) {
                if (isPresentOnLeft(str, ch, i) && isPresentOnRight(str, ch, i)) {
                    uniquePalindromicSubsequence.add("" + ch + str.charAt(i) + ch);
                }
            }
        }

        // Return the number of unique palindromic subsequences
        return uniquePalindromicSubsequence.size();
    }

    private boolean isPresentOnLeft(String str, char ch, int index) {
        for (int i = 0; i < index; i++) {
            if (str.charAt(i) == ch) {
                return true;
            }
        }

        return false;
    }

    private boolean isPresentOnRight(String str, char ch, int index) {
        for (int i = index + 1; i < str.length(); i++) {
            if (str.charAt(i) == ch) {
                return true;
            }
        }

        return false;
    }
}


//Better Approach

class Solution {
    public int countPalindromicSubsequence(String str) {
        Set<String> uniquePalindromicSubsequence = new HashSet<>();
        boolean[] leftSeen = new boolean[26];
        boolean[] rightSeen = new boolean[26];

        // Traverse each character in the string as the center
        for (int i = 1; i < str.length() - 1; i++) {

            // Mark the characters that exist on the left of the center
            for (int left = 0; left < i; left++) {
                leftSeen[str.charAt(left) - 'a'] = true;
            }

            // Mark the characters that exist on the right of the center
            for (int right = i + 1; right < str.length(); right++) {
                rightSeen[str.charAt(right) - 'a'] = true;
            }

            // For each character 'a' to 'z', check if it appears on both sides
            for (char ch = 'a'; ch <= 'z'; ch++) {
                if (leftSeen[ch - 'a'] && rightSeen[ch - 'a']) {
                    uniquePalindromicSubsequence.add("" + ch + str.charAt(i) + ch);
                }
            }

            // Reset leftSeen and rightSeen arrays to false
            Arrays.fill(leftSeen, false);
            Arrays.fill(rightSeen, false);
        }

        // Return the number of unique palindromic subsequences
        return uniquePalindromicSubsequence.size();
    }
}

/*
Ex: 
str= "bbcbabbaaabab"

All palindromic subsequences of length 3 : (Total = 17)

bbb
bcb
bbb (repeated)
bab
aba
bbb (repeated)
aba (repeated)
bbb (repeated)
aaa
bab (repeated)
aaa (repeated)
bab (repeated)
aaa (repeated)
bab (repeated)
aba (repeated)
bbb (repeated)
bab (repeated)

All unique palindromic subsequences of length 3 : (Total = 5)

bbb
bcb
bab
aba
aaa
*/

//Further Optimised

class Solution {
    public int countPalindromicSubsequence(String str) {
        Set<String> uniquePalindromicSubsequence = new HashSet<>();
        boolean[] leftSeen = new boolean[26]; // To track characters seen on the left
        int[] rightSeenCount = new int[26]; // To count characters to the right

        // Initialize rightSeenCount for the entire string
        for (int i = 0; i < str.length(); i++) {
            rightSeenCount[str.charAt(i) - 'a']++;
        }

        // Traverse each character in the string as the center
        for (int i = 0; i < str.length(); i++) {
            // Decrease the count of the current character from rightSeenCount
            rightSeenCount[str.charAt(i) - 'a']--;

            // For each character 'a' to 'z', check if it appears on both sides
            for (char ch = 'a'; ch <= 'z'; ch++) {
                if (leftSeen[ch - 'a'] && rightSeenCount[ch - 'a'] > 0) {
                    uniquePalindromicSubsequence.add("" + ch + str.charAt(i) + ch);
                }
            }

            // Mark the center character as seen on the left for the next iteration
            leftSeen[str.charAt(i) - 'a'] = true;
        }

        // Return the number of unique palindromic subsequences
        return uniquePalindromicSubsequence.size();
    }
}


//Optimal Approach

class Solution {
    public int countPalindromicSubsequence(String str) {
        boolean[][] seen = new boolean[26][26]; //Tracks whether we have already counted the palindrome that starts and ends with ch1 and has ch2 in the middle.
        boolean[] leftSeen = new boolean[26];
        int[] rightSeenCount = new int[26];
        int count = 0;

        for (int i = 0; i < str.length(); i++) {
            rightSeenCount[str.charAt(i) - 'a']++;
        }

        for (int i = 0; i < str.length(); i++) {

            rightSeenCount[str.charAt(i) - 'a']--;

            for (char ch = 'a'; ch <= 'z'; ch++) {
                if (leftSeen[ch - 'a'] && rightSeenCount[ch - 'a'] > 0) {
                    // Check if this pair has been seen before
                    if (!seen[ch - 'a'][str.charAt(i) - 'a']) {
                        count++; // Count this palindromic subsequence
                        seen[ch - 'a'][str.charAt(i) - 'a'] = true; // Mark this pair as seen
                    }
                }
            }

            leftSeen[str.charAt(i) - 'a'] = true;
        }

        return count;
    }
}
