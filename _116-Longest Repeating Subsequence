//Bruteforce Approach

public class Solution {
    public static int longestRepeatingSubsequence(String str, int n) {
        Map<String, List<List<Integer>>> subsequenceMap = generateSubsequences(str, n);
        int maxLength = 0;

        for (Map.Entry<String, List<List<Integer>>> entry : subsequenceMap.entrySet()) {
            String subsequence = entry.getKey();
            List<List<Integer>> indicesList = entry.getValue();

            // Only consider if there are more than one occurrence of the subsequence i.e a repeating subsequence
            if (indicesList.size() > 1) {
                for (int i = 0; i < indicesList.size(); i++) {
                    Iterator<List<Integer>> iterator = indicesList.listIterator(i + 1);
                    while (iterator.hasNext()) {
                        if (hasOverlappingIndices(indicesList.get(i), iterator.next())) {
                            iterator.remove(); // Remove overlapping subsequence
                        }
                    }
                }
            }

            if (indicesList.size() > 1) {
                maxLength = Math.max(maxLength, subsequence.length());
            }
        }

        return maxLength;
    }


    private static Map<String, List<List<Integer>>> generateSubsequences(String str, int n) {
        Map<String, List<List<Integer>>> subsequenceMap = new HashMap<>();
        StringBuilder currentSubsequence = new StringBuilder();
        List<Integer> currentIndices = new ArrayList<>();
        int totalSubsequences = 1 << n; // 2^n

        for (int num = 0; num < totalSubsequences; num++) {
            for (int i = 0; i < n; i++) {
                if ((num & (1 << i)) != 0) {
                    currentSubsequence.append(str.charAt(i));
                    currentIndices.add(i);
                }
            }

            String currSubsequence = currentSubsequence.toString();

            // Only add non-empty subsequences to the map
            if (!currSubsequence.isEmpty()) {
                subsequenceMap.putIfAbsent(currSubsequence, new ArrayList<>());
                subsequenceMap.get(currSubsequence).add(new ArrayList<>(currentIndices));
            }
            currentSubsequence.setLength(0);
            currentIndices.clear();
        }

        return subsequenceMap;
    }


    private static boolean hasOverlappingIndices(List<Integer> indices1, List<Integer> indices2) {
        for (int i = 0; i < indices1.size(); i++) {
            if (indices1.get(i) == indices2.get(i)) {
                return true;
            }
        }
        return false;
    }
}


//Improved Approach

public class Solution {
    public static int longestRepeatingSubsequence(String str, int n) {
        return computeLrs(str, str, 0, 0, n);
    }

    private static int computeLrs(String str1, String str2, int i, int j, int n) {
        if (i == n || j == n) {
            return 0;
        }

        if (i != j && str1.charAt(i) == str2.charAt(j)) {
            return 1 + computeLrs(str1, str2, i + 1, j + 1, n);
        }

        return Math.max(computeLrs(str1, str2, i + 1, j, n), computeLrs(str1, str2, i, j + 1, n));
    }
}


//Better Approach

public class Solution {
    private static int[][] cache;

    public static int longestRepeatingSubsequence(String str, int n) {
        cache = new int[str.length()][str.length()];
        initializeCache();
        return computeLrs(str, str, 0, 0, n);
    }

    private static int computeLrs(String str1, String str2, int i, int j, int n) {
        if (i == n || j == n) {
            return 0;
        }

        if (cache[i][j] != -1) {
            return cache[i][j];
        }

        if (i != j && str1.charAt(i) == str2.charAt(j)) {
            return cache[i][j] = 1 + computeLrs(str1, str2, i + 1, j + 1, n);
        }

        return cache[i][j] = Math.max(computeLrs(str1, str2, i + 1, j, n), computeLrs(str1, str2, i, j + 1, n));
    }

    private static void initializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation 

public class Solution {
    public static int longestRepeatingSubsequence(String str, int n) {
        int[][] dp = new int[n + 1][n + 1];

        for (int i = 0; i <= n; i++) {
            dp[n][i] = dp[n][0] = 0;
        }

        // dp[i][j]=length of longest repeating subsequence between str[i...n-1] and str[i..n-1]
        for (int i = n-1; i >= 0; i--) {
            // Check if characters are the same but at different positions
            for (int j = n-1; j >= 0; j--) {
                if (i != j && str.charAt(i) == str.charAt(j)) {
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                } else {
                    dp[i][j] = Math.max(dp[i][j + 1], dp[i + 1][j]);
                }
            }
        }

        return dp[0][0];
    }
}


//Optimal Implementation 

public class Solution {
    public static int longestRepeatingSubsequence(String str, int n) {
        int[][] dp = new int[n + 1][n + 1];

        for (int i = n-1; i >= 0; i--) {
            for (int j = n-1; j >= 0; j--) {
                if (i != j && str.charAt(i) == str.charAt(j)) {
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                } else {
                    dp[i][j] = Math.max(dp[i][j + 1], dp[i + 1][j]);
                }
            }
        }

        return dp[0][0];
    }
}


//Aliter (Space optimised)

public class Solution {
    public static int longestRepeatingSubsequence(String str, int n) {
        int[] currentRow = new int[n + 1];
        int[] nextRow = new int[n + 1];

        for (int i = n - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (i != j && str.charAt(i) == str.charAt(j)) {
                    currentRow[j] = 1 + nextRow[j + 1];
                } else {
                    currentRow[j] = Math.max(currentRow[j + 1], nextRow[j]);
                }
            }
            int[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[0];
    }
}
