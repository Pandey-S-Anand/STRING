/*
 * For problems involving subsequences, it is generally more intuitive to use forward recursion (starting from the beginning of the sequence and moving to the end). 
 * This approach aligns naturally with the ordering constraint of subsequences, which must preserve the order of elements as they appear in the original array.
*/

//Without LCS

//Bruteforce Approach

class Solution {
    public static int shortestCommonSupersequence(String str1, String str2, int m, int n) {
        return computeScs(str1, str2, 0, 0, m, n);
    }

    private static int computeScs(String str1, String str2, int i, int j, int m, int n) {
        // Base case 1: If we reach the end of both strings, no more characters are needed
        if (i == m && j == n) {
            return 0;
        }

        // Base case 2: If we reach the end of str1, we need to add remaining characters of str2
        if (i == m) {
            return n - j; // remaining length of str2
        }

        // Base case 3: If we reach the end of str2, we need to add remaining characters of str1
        if (j == n) {
            return m - i; // remaining length of str1
        }

        // If current characters match, move both indices forward and add 1 to supersequence length
        if (str1.charAt(i) == str2.charAt(j)) {
            return 1 + computeScs(str1, str2, i + 1, j + 1, m, n);
        }

       /*
        * If characters donâ€™t match, find the minimum supersequence length by considering:
        * (1) moving forward in str1 (keeping j unchanged)
        * (2) moving forward in str2 (keeping i unchanged)
        * Add 1 to include the current character in the supersequence count.
        */
        return 1 + Math.min(computeScs(str1, str2, i + 1, j, m, n), computeScs(str1, str2, i, j + 1, m, n));
    }
}


//Better Approach

class Solution {
    private static int[][] cache;
    
    public static int shortestCommonSupersequence(String str1, String str2, int m, int n) {
        cache = new int[str1.length()][str2.length()];
        intializeCache();
        return computeScs(str1, str2, 0, 0, m, n);
    }

    private static int computeScs(String str1, String str2, int i, int j, int m, int n) {
        if (i == m && j == n) {
            return 0;
        }

        if (i == m) {
            return n - j;
        }

        if (j == n) {
            return m - i;
        }
        
        if (cache[i][j] != -1) {
            return cache[i][j];
        }

        if (str1.charAt(i) == str2.charAt(j)) {
            return 1 + computeScs(str1, str2, i + 1, j + 1, m, n);
        }

        return cache[i][j] = 1 + Math.min(computeScs(str1, str2, i + 1, j, m, n), computeScs(str1, str2, i, j + 1, m, n));
    }
    
    private static void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

class Solution {
    public static int shortestCommonSupersequence(String str1, String str2, int m, int n) {
        // dp[i][j] represents the length of the shortest common supersequence (SCS) between the substrings str1[i...m-1] and str2[j...n-1].
        int[][] dp = new int[m + 1][n + 1];

        // Base case 1: If both substrings are empty, the SCS length is 0
        dp[m][n] = 0;

        // Base case 2: When str1 is exhausted (i.e., we are beyond its last character),the SCS length is the length of the remaining characters in str2.
        for (int i = 0; i < n; i++) {
            dp[m][i] = n - i;
        }

        // Base case 3: When str2 is exhausted (i.e., we are beyond its last character), the SCS length is the length of the remaining characters in str1.
        for (int i = 0; i < m; i++) {
            dp[i][n] = m - i;
        }

        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (str1.charAt(i) == str2.charAt(j)) {
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                } else {
                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j + 1]);
                }
            }
        }

        return dp[0][0];
    }
}


//Aliter (space optimised)

class Solution {
    public static int shortestCommonSupersequence(String str1, String str2, int m, int n) {
        int[] currentRow = new int[n + 1];
        int[] nextRow = new int[n + 1];

        int[][] dp = new int[m + 1][n + 1];

        for (int i = 0; i <= n; i++) {
            nextRow[i] = n - i;
        }

        for (int i = m - 1; i >= 0; i--) {
            currentRow[n] = m - i;
            for (int j = n - 1; j >= 0; j--) {
                if (str1.charAt(i) == str2.charAt(j)) {
                    currentRow[j] = 1 + nextRow[j + 1];
                } else {
                    currentRow[j] = 1 + Math.min(nextRow[j], currentRow[j + 1]);
                }
            }
            int[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[0];
    }
}


//Using LCS

//Bruteforce Approach

class Solution {
    public static int shortestCommonSupersequence(String str1, String str2, int m, int n) {
        List<String> subsequences1 = generateSubsequences(str1, m);
        List<String> subsequences2 = generateSubsequences(str2, n);
        int maxLength = 0;

        for (String subsequence1 : subsequences1) {
            for (String subsequence2 : subsequences2) {
                if (subsequence1.equals(subsequence2)) {
                    maxLength = Math.max(maxLength, subsequence1.length());
                }
            }
        }

        return m + n - maxLength;
    }

    private static List<String> generateSubsequences(String str, int n) {
        List<String> subsequences = new ArrayList<>();
        subsequences.add(""); // Start with the empty subsequence

        for (int i = 0; i < n; i++) {
            int size = subsequences.size();
            for (int j = 0; j < size; j++) {
                subsequences.add(subsequences.get(j) + str.charAt(i));
            }
        }

        return subsequences;
    }
}


//Improved Approach

class Solution {
    public static int shortestCommonSupersequence(String str1, String str2, int m, int n) {
        return m + n - longestCommonSubsequence(str1, str2, 0, 0, m, n);
    }

    private static int longestCommonSubsequence(String str1, String str2, int i, int j, int m, int n) {
        if (i == m || j == n) {
            return 0;
        }

        if (str1.charAt(i) == str2.charAt(j)) {
            return 1 + longestCommonSubsequence(str1, str2, i + 1, j + 1, m, n);
        }

        return Math.max(longestCommonSubsequence(str1, str2, i + 1, j, m, n), longestCommonSubsequence(str1, str2, i, j + 1, m, n));
    }
}


//Better Approach

class Solution {
    private static int[][] cache;

    public static int shortestCommonSupersequence(String str1, String str2, int m, int n) {
        cache = new int[m][n];
        intializeCache();
        return m + n - longestCommonSubsequence(str1, str2, 0, 0, m, n);
    }

    private static int longestCommonSubsequence(String str1, String str2, int i, int j, int m, int n) {
        if (i == m || j == n) {
            return 0;
        }

        if (cache[i][j] != -1) {
            return cache[i][j];
        }

        if (str1.charAt(i) == str2.charAt(j)) {
            return 1 + longestCommonSubsequence(str1, str2, i + 1, j + 1, m, n);
        }

        return cache[i][j] = Math.max(longestCommonSubsequence(str1, str2, i + 1, j, m, n), longestCommonSubsequence(str1, str2, i, j + 1, m, n));
    }

    private static void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

class Solution {
    public static int shortestCommonSupersequence(String str1, String str2, int m, int n) {
        return m + n - longestCommonSubsequence(str1, str2, m, n);
    }

    private static int longestCommonSubsequence(String str1, String str2, int m, int n) {
        int[][] dp = new int[m + 1][n + 1];

        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (str1.charAt(i) == str2.charAt(j)) {
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j + 1]);
                }
            }
        }

        return dp[0][0];
    }
}

//Aliter (Space optimised)

class Solution {
    public static int shortestCommonSupersequence(String str1, String str2, int m, int n) {
        return m + n - longestCommonSubsequence(str1, str2, m, n);
    }

    private static int longestCommonSubsequence(String str1, String str2, int m, int n) {
        int[] currentRow = new int[n + 1];
        int[] nextRow = new int[n + 1];

        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (str1.charAt(i) == str2.charAt(j)) {
                    currentRow[j] = 1 + nextRow[j + 1];
                } else {
                    currentRow[j] = Math.max(nextRow[j], currentRow[j + 1]);
                }
            }
            int[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[0];
    }
}
