//Bruteforce Approach

class Solution {
    private final int MOD = 1000000007;

    public int distinctSubseqII(String str) {
        Set<String> set = new HashSet<>();
        StringBuilder subsequence = new StringBuilder();
        int totalSubsequences = 1 << str.length(); // x << y = x * 2^n

        for (int num = 0; num < totalSubsequences; num++) {
            for (int i = 0; i < str.length(); i++) {
                if ((num & (1 << i)) != 0) {
                    subsequence.append(str.charAt(i));
                }
            }

            set.add(subsequence.toString());

            subsequence.setLength(0);
        }

        return set.size() % MOD - 1; // Subtract 1 to exclude the empty subsequence
    }
}


//Better Approach

//Intuitive implementation

class Solution {
    private final int MOD = 1000000007;
    private int[] cache;
    private int[] charLastIndexMap;

    public int distinctSubseqII(String str) {
        cache = new int[str.length()];
        charLastIndexMap = new int[26];
        Arrays.fill(cache, -1);
        Arrays.fill(charLastIndexMap, -1); // Set initial value as -1 to indicate no occurrences

        int result = distinctSubseq(str, 0) - 1; // Subtract 1 to exclude the empty subsequence
        if (result < 0) {
            result = result + MOD;
        } else {
            result = result % MOD;
        }

        return result;
    }

    private int distinctSubseq(String str, int index) {
        if (index == str.length()) {
            return 1; // Base case: return 1 for the empty subsequence
        }

        if (cache[index] != -1) {
            return cache[index];
        }

        int result = 2 * distinctSubseq(str, index + 1);
        if (result < 0) {
            result = result + MOD;
        } else {
            result = result % MOD;
        }

        if (charLastIndexMap[str.charAt(index) - 'a'] != -1) {
            result = result - distinctSubseq(str, charLastIndexMap[str.charAt(index) - 'a'] + 1);
            if (result < 0) {
                result = result + MOD;
            } else {
                result = result % MOD;
            }
        }

        charLastIndexMap[str.charAt(index) - 'a'] = index;

        return cache[index] = result;
    }
}


//Optimal Implementation

class Solution {
    private final int MOD = 1000000007;
    private int[] cache;
    private int[] charLastIndexMap;

    public int distinctSubseqII(String str) {
        cache = new int[str.length()];
        charLastIndexMap = new int[26];
        Arrays.fill(cache, -1);
        Arrays.fill(charLastIndexMap, -1);

        return (distinctSubseq(str, 0) - 1 + MOD) % MOD;
    }

    private int distinctSubseq(String str, int index) {
        if (index == str.length()) {
            return 1;
        }

        if (cache[index] != -1) {
            return cache[index];
        }

        int result = (2 * (distinctSubseq(str, index + 1) % MOD)) % MOD;

        if (charLastIndexMap[str.charAt(index) - 'a'] != -1) {
            result = (result - (distinctSubseq(str, charLastIndexMap[str.charAt(index) - 'a'] + 1)) % MOD + MOD) % MOD;
        }

        charLastIndexMap[str.charAt(index) - 'a'] = index;

        return cache[index] = result;
    }
}


//Optimal Approach

class Solution {
    private final int MOD = 1000000007;

    public int distinctSubseqII(String str) {
        int[] dp = new int[str.length() + 1]; // dp[i] represents the count of distinct subsequences of the substring str[i...str.length()-1]
        int[] charLastIndexMap = new int[26]; // Track last occurrence of each character

        dp[str.length()] = 1; // Base case: There's one subsequence (the empty subsequence)

        for (int i = str.length() - 1; i >= 0; i--) {
            dp[i] = 2 * dp[i + 1];

            char ch = str.charAt(i);
            if (charLastIndexMap[ch - 'a'] != 0) {
                dp[i] = (dp[i] - dp[charLastIndexMap[ch - 'a'] + 1]);
            }

            charLastIndexMap[ch - 'a'] = i;

            if (dp[i] < 0) {
                dp[i] = dp[i] + MOD;
            } else {
                dp[i] = dp[i] % MOD;
            }
        }

        int result = dp[0] - 1; // Subtract 1 to exclude the empty subsequence

        if (result < 0) {
            result += MOD; // Handle negative result after subtraction
        }

        return result;
    }
}
