class Solution {
    public boolean checkValidString(String str) {
        Deque<Integer> openBracket = new ArrayDeque<>();
        Deque<Integer> star = new ArrayDeque<>();

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);

            if (ch == '(') {
                openBracket.push(i);
            } else if (ch == '*') {
                star.push(i);
            } else {
                if (!openBracket.isEmpty()) {
                    openBracket.pop();
                } else {
                    if (!star.isEmpty()) {
                        star.pop();
                    } else {
                        return false;
                    }
                }
            }
        }

        if (openBracket.isEmpty()) {
            return true;
        }

        if (openBracket.size() > star.size()) {
            return false;
        }

        while (!openBracket.isEmpty()) {
            if (star.peek() > openBracket.peek()) {
                openBracket.pop();
                star.pop();
            } else {
                return false;
            }
        }

        return true;
    }
}


//Optimal Approach (Using Array for implementating Stack)

class Solution {
    public boolean checkValidString(String str) {
        int n = str.length();
        int[] openBracket = new int[n];
        int[] star = new int[n];
        int openTop = -1;
        int starTop = -1;
        
        for (int i = 0; i < n; i++)
        {
            char ch = str.charAt(i);

            if (ch == '(') 
              openBracket[++openTop] = i;
            else if (ch == '*')
              star[++starTop] = i;
            else // ch==')' 
            {
                if (openTop!=-1)
                    openTop--;
                else
                {
                   if (starTop!=-1)
                    starTop--;
                   else
                    return false;
                }
            }
        }
        
        if((openTop+1)>(starTop+1))
          return false;

        while (openTop !=-1)
        {
           if(starTop==-1)
             return false;
           
           if(star[starTop] < openBracket[openTop])
                return false;

          openTop--;
          starTop--;
        }

        return true;
    }
}

