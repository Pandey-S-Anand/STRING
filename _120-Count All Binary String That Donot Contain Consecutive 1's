//Bruteforce Approach
/*
Note 1:
To determine the number of binary strings of length n, we need to calculate the different ways to form a string consisting of n bits, where each bit can be either 0 or 1.

Since each position in the binary string has 2 options (0 or 1), the total number of binary strings of length n can be expressed as: 2 ^ n.

Note 2:
By generating numbers from 0 to 2^n - 1 and converting each number to its binary form (while ensuring it is padded to a length of N), we capture all possible combinations of N bits.

Each bit position can be independently set to 0 or 1, and this systematic approach guarantees that every possible bit configuration is represented exactly once.
*/

class Solution {
    private static final long MOD = 1000000007L;

    long countStrings(int n) {
        long countValidNLengthBinaryStrings = 0;
        int totalNLengthBinaryStrings = 1 << n; // x<<y = x*2^n
        char[] nLengthBinaryString = new char[n];

        for (int num = 0; num < totalNLengthBinaryStrings; num++) {
            for (int i = 0; i < n; i++) {
                if ((num & (1 << i)) != 0) {
                    nLengthBinaryString[n - 1 - i] = '1';
                } else {
                    nLengthBinaryString[n - 1 - i] = '0';
                }
            }

            if (isValidBinaryString(nLengthBinaryString)) {
                countValidNLengthBinaryStrings = (countValidNLengthBinaryStrings + 1) % MOD;
            }
        }

        return countValidNLengthBinaryStrings;
    }

    private boolean isValidBinaryString(char[] arr) {
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] == '1' && arr[i] == arr[i - 1]) {
                return false;
            }
        }

        return true;
    }
}


//Improved Approach

class Solution {
    private static final int MOD = 1000000007;

    int countStrings(int n) {
        return countValidNLengthBinaryStrings(new char[n], 0, false);
    }

    private int countValidNLengthBinaryStrings(char[] currentNLengthBinaryString, int index, boolean wasLastBitOne) {
        if (index == currentNLengthBinaryString.length) {
            return 1;
        }

        // Place '0' at the current index
        currentNLengthBinaryString[index] = '0';
        int count = countValidNLengthBinaryStrings(currentNLengthBinaryString, index + 1, false);

        // Place '1' at the current index only if the previous bit is not '1'
        if (!wasLastBitOne) {
            currentNLengthBinaryString[index] = '1';
            count = (count + countValidNLengthBinaryStrings(currentNLengthBinaryString, index + 1, true)) % MOD;
        }

        return count;
    }
}


//Good Approach

class Solution {
    private static final int MOD = 1000000007;

    int countStrings(int n) {
        return countValidNLengthBinaryStrings(0, n, false);
    }

    private int countValidNLengthBinaryStrings(int index, int n, boolean wasLastBitOne) {
        if (index == n) {
            return 1;
        }

        // Place '0' at the current index
        int count = countValidNLengthBinaryStrings(index + 1, n, false);

        // Place '1' at the current index only if the previous bit is not '1'
        if (!wasLastBitOne) {
            count = (count + countValidNLengthBinaryStrings(index + 1, n, true)) % MOD;
        }

        return count;
    }
}


//Better Approach

class Solution {
    private static final int MOD = 1000000007;
    private int[][] cache;

    int countStrings(int n) {
        cache = new int[n][2];
        intializeCache();
        return countValidNLengthBinaryStrings(0, n, 0);
    }

    private int countValidNLengthBinaryStrings(int index, int n, int wasLastBitOne) {
        if (index == n) {
            return 1;
        }

        if (cache[index][wasLastBitOne] != -1) {
            return cache[index][wasLastBitOne];
        }

        int count = countValidNLengthBinaryStrings(index + 1, n, 0);

        if (wasLastBitOne == 0) {
            count = (count + countValidNLengthBinaryStrings(index + 1, n, 1)) % MOD;
        }

        return cache[index][wasLastBitOne] = count;
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

class Solution {
    private static final int MOD = 1000000007;

    int countStrings(int n) {
        /*
         * dp[i][0] -> Count of valid strings of length i ending with '0'
         * dp[i][1] -> Count of valid strings of length i ending with '1'
         */
        int[][] dp = new int[n + 1][2];

        // Base case: An empty string can be considered as both ending with '0' and '1'
        dp[n][0] = 1;
        dp[n][1] = 1;

        for (int index = n - 1; index >= 0; index--) {
            for (int wasLastBitOne = 0; wasLastBitOne <= 1; wasLastBitOne++) {
                int count = dp[index + 1][0];
                if (wasLastBitOne == 0) {
                    count = (count + dp[index + 1][1]) % MOD;
                }

                dp[index][wasLastBitOne] = count;
            }
        }

        return dp[0][0];
    }
}


//Aliter (Space optimised)

class Solution {
    private static final int MOD = 1000000007;

    int countStrings(int n) {
        int[] currentRow = new int[2];
        int[] nextRow = new int[2];

        nextRow[0] = 1;
        nextRow[1] = 1;

        for (int index = n - 1; index >= 0; index--) {
            for (int wasLastBitOne = 0; wasLastBitOne <= 1; wasLastBitOne++) {
                int count = nextRow[0];
                if (wasLastBitOne == 0) {
                    count = (count + nextRow[1]) % MOD;
                }

                currentRow[wasLastBitOne] = count;
            }

            int[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[0];
    }
}
