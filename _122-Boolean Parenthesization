//Bruteforce Approach

class Solution {
    private static final int MOD = 1003;

    static int countWays(int n, String s) {
        /*
         * Invoke the recursive function to evaluate the entire expression with the
         * boolean flag set to true, indicating we're calculating for a "true" result.
         */
        return countWays(s, 0, n - 1, true);
    }

    private static int countWays(String expression, int start, int end, boolean isTrue) {
        // Base case: When the subexpression consists of a single operand.
        if (start == end) {
            // If the desired result is true.
            if (isTrue) {
                return expression.charAt(start) == 'T' ? 1 : 0;
            }
            // If the desired result is false.
            return expression.charAt(start) == 'F' ? 1 : 0;
        }

        int totalWays = 0;
        /*
         * Loop through each operator and partition the expression around it.
         * Operators are located at odd indices, so we start the partition at start + 1 and increment by 2.
         */
        for (int partition = start + 1; partition < end; partition++) {
            // Recursively calculate the number of ways for the left and right subexpressions.
            int leftFalseCount = countWays(expression, start, partition - 1, false); // Left evaluates to false
            int leftTrueCount = countWays(expression, start, partition - 1, true); // Left evaluates to true
            int rightFalseCount = countWays(expression, partition + 1, end, false); // Right evaluates to False
            int rightTrueCount = countWays(expression, partition + 1, end, true); // Right evaluates to true

            char operator = expression.charAt(partition);

            /*
             * Truth Table for Boolean Operators:
             * 
             * 1. AND (`&`):
             * - T & T = T
             * - T & F = F
             * - F & T = F
             * - F & F = F
             * 
             * 2. OR (`|`):
             * - T | T = T
             * - T | F = T
             * - F | T = T
             * - F | F = F
             * 
             * 3. XOR (`^`):
             * - T ^ T = F
             * - T ^ F = T
             * - F ^ T = T
             * - F ^ F = F
             */
            // Calculate total ways based on the operator
            if (operator == '&') {
                if (isTrue) {
                    totalWays += (leftTrueCount * rightTrueCount) % MOD;
                } else {
                    totalWays += (leftTrueCount * rightFalseCount) % MOD;
                    totalWays += (leftFalseCount * rightTrueCount) % MOD;
                    totalWays += (leftFalseCount * rightFalseCount) % MOD;
                }
            } else if (operator == '|') {
                if (isTrue) {
                    totalWays += (leftTrueCount * rightTrueCount) % MOD;
                    totalWays += (leftTrueCount * rightFalseCount) % MOD;
                    totalWays += (leftFalseCount * rightTrueCount) % MOD;
                } else {
                    totalWays += (leftFalseCount * rightFalseCount) % MOD;
                }
            } else if (operator == '^') {
                if (isTrue) {
                    totalWays += (leftTrueCount * rightFalseCount) % MOD;
                    totalWays += (leftFalseCount * rightTrueCount) % MOD;
                } else {
                    totalWays += (leftTrueCount * rightTrueCount) % MOD;
                    totalWays += (leftFalseCount * rightFalseCount) % MOD;
                }
            }

            totalWays %= MOD;
        }
        // Return the total number of ways for the current subproblem.
        return totalWays;
    }
}


//Better Approach

class Solution {
    private static final int MOD = 1003;
    private static int[][][] cache;

    static int countWays(int n, String expression) {
        cache = new int[n][n][2];
        initializeCache();
        return countWays(expression, 0, n - 1, 1);
    }

    private static int countWays(String expression, int start, int end, int isTrue) {
        if (start == end) {
            if (isTrue == 1) {
                return expression.charAt(start) == 'T' ? 1 : 0;
            }
            return expression.charAt(start) == 'F' ? 1 : 0;
        }

        if (cache[start][end][isTrue] != -1) {
            return cache[start][end][isTrue];
        }

        int totalWays = 0;

        for (int partition = start + 1; partition < end; partition++) {
            int leftFalseCount = countWays(expression, start, partition - 1, 0);
            int leftTrueCount = countWays(expression, start, partition - 1, 1);
            int rightFalseCount = countWays(expression, partition + 1, end, 0);
            int rightTrueCount = countWays(expression, partition + 1, end, 1);

            char operator = expression.charAt(partition);

            if (operator == '&') {
                if (isTrue == 1) {
                    totalWays += (leftTrueCount * rightTrueCount) % MOD;
                } else {
                    totalWays += (leftTrueCount * rightFalseCount) % MOD;
                    totalWays += (leftFalseCount * rightTrueCount) % MOD;
                    totalWays += (leftFalseCount * rightFalseCount) % MOD;
                }
            } else if (operator == '|') {
                if (isTrue == 1) {
                    totalWays += (leftTrueCount * rightTrueCount) % MOD;
                    totalWays += (leftTrueCount * rightFalseCount) % MOD;
                    totalWays += (leftFalseCount * rightTrueCount) % MOD;
                } else {
                    totalWays += (leftFalseCount * rightFalseCount) % MOD;
                }
            } else if (operator == '^') {
                if (isTrue == 1) {
                    totalWays += (leftTrueCount * rightFalseCount) % MOD;
                    totalWays += (leftFalseCount * rightTrueCount) % MOD;
                } else {
                    totalWays += (leftTrueCount * rightTrueCount) % MOD;
                    totalWays += (leftFalseCount * rightFalseCount) % MOD;
                }
            }

            totalWays %= MOD;
        }

        return cache[start][end][isTrue] = totalWays;
    }

    private static void initializeCache() {
        for (int i = 0; i < cache.length; i++) {
            for (int j = 0; j < cache[0].length; j++) {
                Arrays.fill(cache[i][j], -1);
            }
        }
    }
}


//Optimal Approach

class Solution {
    private static final int MOD = 1003;

    static int countWays(int n, String expression) {
        /*
         * dp[start][end][isTrue] stores the number of ways to parenthesize the
         * substring of the boolean expression from index start to end such that the
         * result evaluates to:
         * 
         * True if isTrue = 1.
         * False if isTrue = 0.
         */
        int[][][] dp = new int[n][n][2];

        for (int start = n - 1; start >= 0; start--) {
            for (int end = start; end < n; end++) {
                for (int isTrue = 0; isTrue <= 1; isTrue++) {
                    if (start == end) {
                        if (isTrue == 1) {
                            dp[start][end][isTrue] = expression.charAt(start) == 'T' ? 1 : 0;
                        } else {
                            dp[start][end][isTrue] = expression.charAt(start) == 'F' ? 1 : 0;
                        }

                        continue;
                    }

                    int totalWays = 0;
                    for (int partition = start + 1; partition < end; partition++) {
                        int leftFalseCount = dp[start][partition - 1][0];
                        int leftTrueCount = dp[start][partition - 1][1];
                        int rightFalseCount = dp[partition + 1][end][0];
                        int rightTrueCount = dp[partition + 1][end][1];

                        char operator = expression.charAt(partition);

                        if (operator == '&') {
                            if (isTrue == 1) {
                                totalWays += (leftTrueCount * rightTrueCount) % MOD;
                            } else {
                                totalWays += (leftTrueCount * rightFalseCount) % MOD;
                                totalWays += (leftFalseCount * rightTrueCount) % MOD;
                                totalWays += (leftFalseCount * rightFalseCount) % MOD;
                            }
                        } else if (operator == '|') {
                            if (isTrue == 1) {
                                totalWays += (leftTrueCount * rightTrueCount) % MOD;
                                totalWays += (leftTrueCount * rightFalseCount) % MOD;
                                totalWays += (leftFalseCount * rightTrueCount) % MOD;
                            } else {
                                totalWays += (leftFalseCount * rightFalseCount) % MOD;
                            }
                        } else if (operator == '^') {
                            if (isTrue == 1) {
                                totalWays += (leftTrueCount * rightFalseCount) % MOD;
                                totalWays += (leftFalseCount * rightTrueCount) % MOD;
                            } else {
                                totalWays += (leftTrueCount * rightTrueCount) % MOD;
                                totalWays += (leftFalseCount * rightFalseCount) % MOD;
                            }
                        }

                        totalWays %= MOD;
                    }

                    dp[start][end][isTrue] = totalWays;
                }
            }
        }

        return dp[0][n - 1][1];
    }
}
