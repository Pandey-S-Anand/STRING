//Bruteforce Approach

public class Solution {
    public static String findLCS(int m, int n, String str1, String str2) {
        List<String> subsequencesStr1 = generateSubsequences(str1, m);
        List<String> subsequencesStr2 = generateSubsequences(str2, n);
        int maxLength = 0;
        String longestCommonSubsequence = "";

        for (String subsequence1 : subsequencesStr1) {
            for (String subsequence2 : subsequencesStr2) {
                if (subsequence1.equals(subsequence2) && subsequence1.length() > maxLength) {
                    maxLength = subsequence1.length();
                    longestCommonSubsequence = subsequence1;
                }
            }
        }

        return longestCommonSubsequence;
    }

    private static List<String> generateSubsequences(String str, int n) {
        List<String> subsequences = new ArrayList<>();
        subsequences.add(""); // Start with the empty subsequence

        for (int i = 0; i < n; i++) {
            int size = subsequences.size();
            for (int j = 0; j < size; j++) {
                subsequences.add(subsequences.get(j) + str.charAt(i));
            }
        }

        return subsequences;
    }
}


//Improved Approach

public class Solution {
    public static String findLCS(int m, int n, String str1, String str2) {
        return computeLcs(str1, str2, 0, 0, m, n);
    }

    private static String computeLcs(String str1, String str2, int i, int j, int m, int n) {
        if (i == m || j == n) {
            return "";
        }

        if (str1.charAt(i) == str2.charAt(j)) {
            return str1.charAt(i) + computeLcs(str1, str2, i + 1, j + 1, m, n);
        }

        String option1 = computeLcs(str1, str2, i + 1, j, m, n);
        String option2 = computeLcs(str1, str2, i, j + 1, m, n);

        return option1.length() > option2.length() ? option1 : option2;
    }
}


//Optimal Approach 

public class Solution {
    public static String findLCS(int m, int n, String str1, String str2) {
        int[][] dp = new int[m + 1][n + 1];

        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (str1.charAt(i) == str2.charAt(j)) {
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j + 1]);
                }
            }
        }

        int i = 0, j = 0;
        StringBuilder longestCommonSubsequence = new StringBuilder();

        while (i < m && j < n) {
            if (str1.charAt(i) == str2.charAt(j)) {
                longestCommonSubsequence.append(str1.charAt(i - 1));
                i++;
                j++;
            } else if (dp[i + 1][j] > dp[i][j + 1]) {
                i++;
            } else {
                j++;
            }
        }

        return longestCommonSubsequence.toString();
    }
}
