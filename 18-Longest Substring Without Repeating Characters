//Bruteforce Approach

class Solution {
    public int lengthOfLongestSubstring(String str) {
        int maxLength = 0;
        Set<Character> set = new HashSet<>();

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                for (int range = start; range <= end; range++) {
                    set.add(str.charAt(range));
                }

                if (set.size() == (end - start + 1)) {
                    maxLength = Math.max(maxLength, (end - start + 1));
                }

                set.clear();
            }
        }

        return maxLength;
    }
}


//Better Approach

class Solution {
    public int lengthOfLongestSubstring(String str) {
        int maxLength = 0;
        Set<Character> set = new HashSet<>();
        
        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                set.add(str.charAt(end));
                
                if (set.size() == (end - start + 1)) {
                    maxLength = Math.max(maxLength, (end - start + 1));
                }
            }
            set.clear();
        }

        return maxLength;
    }
}


//Optimal Approach




