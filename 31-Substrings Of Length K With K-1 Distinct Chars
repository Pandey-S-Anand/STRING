//Bruteforce Approach

class Solution {
    static int countOfSubstrings(String str, int k) {
        int count = 0;
        Set<Character> unique = new HashSet<>();

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                unique.add(str.charAt(end));
                if ((end - start + 1) == k && unique.size() == k - 1) {
                    count++;
                }

                if ((end - start + 1) > k) {
                    break;
                }
            }
            unique.clear();
        }

        return count;
    }
}


//Better Approach

class Solution {
    static int countOfSubstrings(String str, int k) {
        int count = 0;
        Set<Character> unique = new HashSet<>();

        for (int i = 0; i <= (str.length() - k); i++) {
            for (int j = i; j < (i + k); j++) {
                unique.add(str.charAt(j));
            }

            if (unique.size() == k - 1) {
                count++;
            }
            unique.clear();
        }

        return count;
    }
}


//Optimal Approach

class Solution {
    static int countOfSubstrings(String str, int k) {
        int start = 0, end = 0, count = 0;

        // Frequency map to track character frequencies in the window
        Map<Character, Integer> frequencyMap = new HashMap<>();

        while (start <= (str.length() - k)) {
            frequencyMap.put(str.charAt(end), frequencyMap.getOrDefault(str.charAt(end), 0) + 1);

            // Check if the window size is less than k
            if (end - start + 1 < k) {
                end++;
            } else {
                // Check if there are exactly k-1 distinct characters
                if (frequencyMap.size() == k - 1) {
                    count++;
                }

                // Shrink the window by removing the character at 'start'
                char startChar = str.charAt(start);
                if (frequencyMap.get(startChar) == 1) {
                    frequencyMap.remove(startChar);
                } else {
                    frequencyMap.put(startChar, frequencyMap.get(startChar) - 1);
                }

                // Move both pointers to maintain window of size 'k'
                start++;
                end++;
            }
        }

        return count;
    }
}
