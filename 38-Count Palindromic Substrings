//Bruteforce Approach

class Solution {
    public int countSubstrings(String str) {
        int count = 0;
        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                if (isPalindrome(str, start, end)) {
                    count++;
                }
            }
        }

        return count;
    }

    private boolean isPalindrome(String str, int start, int end) {
        while (start < end) {
            if (str.charAt(start) != str.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }

        return true;
    }
}


//Better Approach

class Solution {
    int[][] memo = new int[1000][1000];

    public int countSubstrings(String str) {
        initializeMemo();
        int count = 0;

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                if (isPalindrome(str, start, end)) {
                    count++;
                }
            }
        }

        return count;
    }

    private void initializeMemo() {
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
    }

    private boolean isPalindrome(String str, int start, int end) {
        if (start >= end) {
            return true;
        }

        if (memo[start][end] != -1) {
            return memo[start][end] == 1;
        }

        if (str.charAt(start) != str.charAt(end)) {
            memo[start][end] = 0;
            return false;
        }

        memo[start][end] = isPalindrome(str, start + 1, end - 1) ? 1 : 0;
        return memo[start][end] == 1;
    }
}

