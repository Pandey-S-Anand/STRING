//Bruteforce Approach

class Solution {
    public String multiply(String num1, String num2) {
        return new java.math.BigInteger(num1).multiply(new java.math.BigInteger(num2)).toString();
    }
}


//Optimal Approach

/*
Ex 1: 

      5632
  ×   4512
  --------
    11264
   56320    
  28160
 22528      
--------
25411584


Ex 2:

     1 1 1 1
×    2 3 1 2
    -----------
      2 2 2 2
    1 1 1 1
  3 3 3 3
2 2 2 2
-----------
2 5 6 8 6 3 2

*/

//Better Approach

class Solution {
    public String multiply(String num1, String num2) {
        if (num1.equals("0") || num2.equals("0")) {
            return "0";
        }

        if (num1.equals("1")) {
            return num2;
        }

        if (num2.equals("1")) {
            return num1;
        }

        if (num1.length() < num2.length()) {
            return multiply(num2, num1);
        }

        int padding = 0;

        String product = "";

        for (int i = num2.length() - 1; i >= 0; i--) {
            product = addTwoNumbers(product, multiplyDigit(num1, num2.charAt(i) - '0', padding++));
        }

        return product;
    }

    private String multiplyDigit(String num1, int digit, int padding) {
        if (digit == 0) {
            return "0";
        }

        int carry = 0;

        StringBuilder product = new StringBuilder();

        for (int pad = 1; pad <= padding; pad++) {
            product.append(0);
        }

        for (int i = num1.length() - 1; i >= 0; i--) {
            int prod = (num1.charAt(i) - '0') * digit;
            product.append((prod + carry) % 10);
            carry = (prod + carry) / 10;
        }

        if (carry != 0) {
            product.append(carry);
        }

        return product.reverse().toString();
    }

    private String addTwoNumbers(String num1, String num2) {
        int i = num1.length() - 1, j = num2.length() - 1, carry = 0;
        StringBuilder sum = new StringBuilder();

        while (i >= 0 || j >= 0 || carry == 1) {
            int digit1 = (i >= 0) ? num1.charAt(i--) - '0' : 0;
            int digit2 = (j >= 0) ? num2.charAt(j--) - '0' : 0;

            int currentSum = digit1 + digit2 + carry;
            sum.append(currentSum % 10);
            carry = currentSum / 10;
        }

        return sum.reverse().toString();
    }
}


//Optimal Approach

class Solution {
    public String multiply(String num1, String num2) {
        if (num1.equals("0") || num2.equals("0")) {
            return "0";
        }

        if (num1.equals("1")) {
            return num2;
        }

        if (num2.equals("1")) {
            return num1;
        }

        int carry = 0, padding = 0;
        int[] productArray = new int[num1.length() + num2.length()]; // Result can be at most m + n digits long

        // Multiply each digit of num1 with each digit of num2
        for (int i = num2.length() - 1; i >= 0; i--) {
            int k = productArray.length - 1 - padding;
            for (int j = num1.length() - 1; j >= 0; j--) {
                int sum = (num1.charAt(j) - '0') * (num2.charAt(i) - '0') + carry + productArray[k];
                productArray[k] = (sum % 10);
                carry = (sum / 10);
                k--;
            }

            productArray[k] += carry; // It is relevant when the carry value is left over after multiplying with the last digit of num1 (i.e at index =0)
            carry = 0;
            padding++;
        }

        StringBuilder product = new StringBuilder();
        for (int num : productArray) {
            if (product.length() == 0 && num == 0) {
                continue;// Skip leading zeros
            }

            product.append(num);
        }

        return product.length() == 0 ? "0" : product.toString(); // Return "0" if the result is empty
    }
}
