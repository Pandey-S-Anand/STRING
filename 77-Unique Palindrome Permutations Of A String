//Bruteforce Approach

class Solution {
    private List<String> palindromePermutations;

    public List<String> all_palindromes(String str) {
        palindromePermutations = new ArrayList<>();
        findUniquePalindromePermutations(str, new StringBuilder(), new boolean[str.length()]);
        Collections.sort(palindromePermutations);
        return palindromePermutations;
    }

    private void findUniquePalindromePermutations(String str, StringBuilder permutation, boolean[] visited) {
        if (permutation.length() == str.length()) {
            String currentPermutation = permutation.toString();
            if (isPalindrome(currentPermutation)) {
                palindromePermutations.add(currentPermutation);
            }
            return;
        }

        Set<Character> used = new HashSet<>();

        for (int i = 0; i < str.length(); i++) {
            if (used.contains(str.charAt(i))) {
                continue;
            }

            if (!visited[i]) {
                used.add(str.charAt(i));
                visited[i] = true;
                permutation.append(str.charAt(i));
                findUniquePalindromePermutations(str, permutation, visited);
                permutation.setLength(permutation.length() - 1);
                visited[i] = false;
            }
        }
    }

    private boolean isPalindrome(String str) {
        int start = 0, end = str.length() - 1;

        while (start < end) {
            if (str.charAt(start) != str.charAt(end)) {
                return false;
            }

            start++;
            end--;
        }

        return true;
    }
}


//Optimal Approach

/*
Ex: "abbabccaa".
Character Count
First, we count the frequency of each character in the string:

a: 4
b: 3
c: 2


For a string to have palindromic permutations:
All characters must have even frequencies, except for at most one character which can have an odd frequency (this character would be placed in the middle of the palindrome).

In this case:
a: 4 (even)
b: 3 (odd)
c: 2 (even)

Conclusion :

Valid: The frequencies meet the criteria for forming palindromic permutations. The character b can be placed in the middle of the palindrome, while the others can be mirrored.

Forming the Half Palindrome

The half palindrome can be constructed as follows:
For a (4 occurrences), take 2 for the half.
For b (3 occurrences), take 1 for the half.
For c (2 occurrences), take 1 for the half.

So, the first half becomes: "aabc" or any other permutations like (baac ..etc)

To form the complete palindrome:

First half: "aabc"
Middle character: "b"
Second half: Same as the first half but reversed: "cbaa"

The full palindrome would be:
"aabcbcbaa" (or any other arrangement derived from permutations).

All unique permutations of “aabc” are:
aabc
aacb
abac
abca
acab
acba
baac
baca
bcaa
caab
caba
cbaa

All unique palindrome permutations of “abbabccaa”:
aabc => aabc + b + cbaa => aabcbcbaa
aacb => aacb + b + bcaa => aacbbbcaa
abac => abac + b + caba => abacbcaba
abca => abca + b + acba => abcabacba
acab => acab + b + baca => acabbbaca
acba => acba + b + abca => acbababca
baac => baac + b + caab => baacbcaab
baca => baca + b + acab => bacabacab
bcaa => bcaa + b + aacb => bcaabaacb
caab => caab + b + baac => caabbbaac
caba => caba + b + abac => cabababac
cbaa => cbaa + b + aabc => cbaabaabc

*/

//Intuitive implementation

class Solution {
    private List<String> palindromePermutations;

    public List<String> all_palindromes(String str) {
        palindromePermutations = new ArrayList<>();
        Map<Character, Integer> frequencyMap = new HashMap<>();

        for (int i = 0; i < str.length(); i++) {
            frequencyMap.put(str.charAt(i), frequencyMap.getOrDefault(str.charAt(i), 0) + 1);
        }

        boolean oddFreqCharFound = false;
        String middleChar = "";

        for (char ch : frequencyMap.keySet()) {
            int frequency = frequencyMap.get(ch);
            if (frequency % 2 != 0) {
                if (oddFreqCharFound) {
                    return palindromePermutations; // If we've already found an odd frequency character, a palindrome isn't possible
                }

                oddFreqCharFound = true;
                // Add only one occurrence of the odd frequency character to the middle
                middleChar = Character.toString(ch);
            }
        }

        // To construct half of the palindrome
        StringBuilder half = new StringBuilder();

        for (char ch : frequencyMap.keySet()) {
            int frequency = frequencyMap.get(ch);
            /*
             * Add half of the even count characters to the half string.
             * For the only character with odd frequency, add (frequency - 1) / 2
             * occurrences to the half string,
             * and the remaining (frequency - 1) will go in the second half, with 1
             * occurrence in the middle.
             * Ex: If a char has occurred 5 times, 2 occurrences will go in the first half,
             * 2 occurrences in the second half, and 1 in the middle.
             */
            for (int i = 1; i <= frequency / 2; i++) {
                half.append(ch);
            }
        }

        //Generate all unique  permutations using the half string
        findUniquePalindromePermutations(half.toString(), new boolean[half.length()], new StringBuilder(), middleChar);
        Collections.sort(palindromePermutations);
        return palindromePermutations;
    }

    private void findUniquePalindromePermutations(String str, boolean[] visited, StringBuilder permutation, String middle) {
        if (permutation.length() == str.length()) {
            // Construct the palindrome permutation and add it to the list
            palindromePermutations.add(permutation.toString() + middle + permutation.reverse().toString());
            permutation.reverse();
            return;
        }

        Set<Character> used = new HashSet<>();

        for (int i = 0; i < str.length(); i++) {
            if (used.contains(str.charAt(i))) {
                continue;
            }

            if (!visited[i]) {
                used.add(str.charAt(i));
                visited[i] = true;
                permutation.append(str.charAt(i));
                findUniquePalindromePermutations(str, visited, permutation, middle);
                permutation.setLength(permutation.length() - 1);
                visited[i] = false;
            }
        }
    }
}


//Optimal implementation 

class Solution {
    private List<String> palindromePermutations;

    public List<String> all_palindromes(String str) {
        palindromePermutations = new ArrayList<>();
        int[] frequencyArray = new int[26];

        for (int i = 0; i < str.length(); i++) {
            frequencyArray[str.charAt(i) - 'a']++;
        }

        StringBuilder half = new StringBuilder();
        boolean oddFreqCharFound = false;
        String middleChar = "";

        for (int i = 0; i < 26; i++) {
            if (frequencyArray[i] == 0) {
                continue;
            }

            int frequency = frequencyArray[i];
            if (frequency % 2 != 0) {
                if (oddFreqCharFound) {
                    return palindromePermutations;
                }

                oddFreqCharFound = true;
                middleChar = Character.toString((char) (i + 'a'));
            }

            for (int j = 1; j <= frequency / 2; j++) {
                half.append((char) (i + 'a'));
            }
        }

        findUniquePalindromePermutations(half.toString(), new boolean[half.length()], new StringBuilder(), middleChar);
        Collections.sort(palindromePermutations);
        return palindromePermutations;
    }

    private void findUniquePalindromePermutations(String str, boolean[] visited, StringBuilder permutation, String middle) {
        if (permutation.length() == str.length()) {
            palindromePermutations.add(permutation.toString() + middle + permutation.reverse().toString());
            permutation.reverse();
            return;
        }

        Set<Character> used = new HashSet<>();

        for (int i = 0; i < str.length(); i++) {
            if (used.contains(str.charAt(i))) {
                continue;
            }

            if (!visited[i]) {
                used.add(str.charAt(i));
                visited[i] = true;
                permutation.append(str.charAt(i));
                findUniquePalindromePermutations(str, visited, permutation, middle);
                permutation.setLength(permutation.length() - 1);
                visited[i] = false;
            }
        }
    }
}
