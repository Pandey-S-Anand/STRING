//Iterative Approach

//Bruteforce Approach

class Solution {
    private static final Map<Character, String> KEYPAD_MAPPING = Map.of(
            '2', "abc",
            '3', "def",
            '4', "ghi",
            '5', "jkl",
            '6', "mno",
            '7', "pqrs",
            '8', "tuv",
            '9', "wxyz");

    public List<String> letterCombinations(String digits) {
        if (digits.isEmpty()) {
            return new ArrayList<>();
        }

        StringBuilder combinationBuilder = new StringBuilder();
        List<String> currentCombinations = new ArrayList<>();
        List<String> combinations = new ArrayList<>();
        combinations.add("");

        for (int i = 0; i < digits.length(); i++) {
            String letters = KEYPAD_MAPPING.get(digits.charAt(i));
            for (String combination : combinations) {
                for (int j = 0; j < letters.length(); j++) {
                    currentCombinations.add(combinationBuilder.append(combination).append(letters.charAt(j)).toString());
                    combinationBuilder.setLength(0);
                }
            }
            combinations.clear();
            combinations.addAll(currentCombinations);
            currentCombinations.clear();
        }

        return combinations;
    }
}


//Better Approach

class Solution {
    private static final Map<Character, String> KEYPAD_MAPPING = Map.of(
            '2', "abc",
            '3', "def",
            '4', "ghi",
            '5', "jkl",
            '6', "mno",
            '7', "pqrs",
            '8', "tuv",
            '9', "wxyz");

    public List<String> letterCombinations(String digits) {
        if (digits.isEmpty()) {
            return new ArrayList<>();
        }

        StringBuilder combinationBuilder = new StringBuilder();
        List<String> combinations = new ArrayList<>();
        combinations.add("");

        for (int i = 0; i < digits.length(); i++) {
            String letters = KEYPAD_MAPPING.get(digits.charAt(i));
            int currentSize = combinations.size();
            for (int j = 0; j < currentSize; j++) {
                for (int k = 0; k < letters.length(); k++) {
                    combinations.add(combinationBuilder.append(combinations.get(j)).append(letters.charAt(k)).toString());
                    combinationBuilder.setLength(0);
                }
            }
            combinations.subList(0, currentSize).clear();
        }

        return combinations;
    }
}


//Optimal Approach

class Solution {
    private static final Map<Character, String> KEYPAD_MAPPING = Map.of(
            '2', "abc",
            '3', "def",
            '4', "ghi",
            '5', "jkl",
            '6', "mno",
            '7', "pqrs",
            '8', "tuv",
            '9', "wxyz");

    public List<String> letterCombinations(String digits) {
        if (digits.isEmpty()) {
            return new ArrayList<>();
        }
        /*
         * If using an ArrayList, removing elements from the front involves shifting all
         * subsequent elements, leading to O(n) complexity for each removal operation.
         * In a LinkedList (implementation of a Queue interface), Dequeue (remove
         * operation from both front and rear) operations are O(1).
         */
        StringBuilder combinationBuilder = new StringBuilder();
        Queue<String> combinations = new LinkedList<>();
        combinations.add("");

        for (int i = 0; i < digits.length(); i++) {
            String letters = KEYPAD_MAPPING.get(digits.charAt(i));
            int currentSize = combinations.size();
            while (currentSize-- > 0) {
                String existingCombination = combinations.poll();// Retrieves and removes the head of the queue. 
                for (int j = 0; j < letters.length(); j++) {
                    combinations.add(existingCombination + letters.charAt(j));
                }
            }
        }

        return new ArrayList<>(combinations);
    }
}


//Recursive Approach

//Method 1

class Solution {
    private static final Map<Character, String> KEYPAD_MAPPING = Map.of(
            '2', "abc",
            '3', "def",
            '4', "ghi",
            '5', "jkl",
            '6', "mno",
            '7', "pqrs",
            '8', "tuv",
            '9', "wxyz");

    public List<String> letterCombinations(String digits) {
        if (digits.isEmpty()) {
            return Collections.emptyList();
        }
        return generateLetterCombinations(digits, 0);
    }

    private List<String> generateLetterCombinations(String digits, int index) {
        if (index == digits.length()) {
            return Collections.singletonList("");
        }

        String letters = KEYPAD_MAPPING.get(digits.charAt(index));
        StringBuilder combinationBuilder = new StringBuilder();
        List<String> partialCombinations = generateLetterCombinations(digits, index + 1);
        List<String> completeCombinations = new ArrayList<>();

        for (int i = 0; i < letters.length(); i++) {
            for (String combination : partialCombinations) {
                completeCombinations.add(combinationBuilder.append(letters.charAt(i)).append(combination).toString());
                combinationBuilder.setLength(0);
            }
        }

        return completeCombinations;
    }
}


//Method 2

public class Solution {
    private List<String> combinations;
    private static final Map<Character, String> KEYPAD_MAPPING = Map.of(
            '2', "abc",
            '3', "def",
            '4', "ghi",
            '5', "jkl",
            '6', "mno",
            '7', "pqrs",
            '8', "tuv",
            '9', "wxyz");

    public List<String> letterCombinations(String digits) {
        if (digits.isEmpty()) {
            return Collections.emptyList();
        }
        combinations = new ArrayList<>();
        generateLetterCombinations(digits, 0, new StringBuilder());
        return combinations;
    }

    private void generateLetterCombinations(String digits, int index, StringBuilder currentCombination) {
        if (index == digits.length()) {
            combinations.add(currentCombination.toString());
            return;
        }

        String letters = KEYPAD_MAPPING.get(digits.charAt(index));
        for (int i = 0; i < letters.length(); i++) {
            currentCombination.append(letters.charAt(i));
            generateLetterCombinations(digits, index + 1, currentCombination);
            currentCombination.deleteCharAt(currentCombination.length() - 1);
        }
    }
}
