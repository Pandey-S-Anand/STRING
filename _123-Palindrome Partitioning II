//Bruteforce Approach

class Solution {
    public int minCut(String str) {
        return minCut(str, 0);
    }

    private int minCut(String str, int start) {
        // Base case: If the substring from 'start' to the end is a palindrome, no cuts are needed.
        if (isPalindrome(str, start, str.length() - 1)) {
            return 0;
        }

        int minCuts = Integer.MAX_VALUE;

        // For a string of length 'N', the maximum number of cuts possible is 'N-1'. Therefore, the loop runs from index 0 to 'str.length() - 2' to consider all potential cuts.
        for (int partition = start; partition < str.length() - 1; partition++) {
            // If the substring from 'start' to 'partition' is a palindrome, make a cut and find the minimum cuts for the remaining part.
            if (isPalindrome(str, start, partition)) {
                minCuts = Math.min(minCuts, 1 + minCut(str, partition + 1));
            }
        }

        return minCuts;
    }

    private boolean isPalindrome(String str, int start, int end) {
        if (start >= end) {
            return true;
        }

        if (str.charAt(start) != str.charAt(end)) {
            return false;
        }

        return isPalindrome(str, start + 1, end - 1);
    }
}


//Better Approach

class Solution {
    private int[][] cache1;
    private int[] cache2;

    public int minCut(String str) {
        cache1 = new int[str.length()][str.length()];
        cache2 = new int[str.length()];
        initializeCache();
        return minCut(str, 0);
    }

    private int minCut(String str, int start) {
        if (isPalindrome(str, start, str.length() - 1)) {
            return 0;
        }

        if (cache2[start] != -1) {
            return cache2[start];
        }

        int minCuts = Integer.MAX_VALUE;

        for (int partition = start; partition < str.length() - 1; partition++) {
            if (isPalindrome(str, start, partition)) {
                minCuts = Math.min(minCuts, 1 + minCut(str, partition + 1));
            }
        }

        return cache2[start] = minCuts;
    }

    private boolean isPalindrome(String str, int start, int end) {
        if (start >= end) {
            return true;
        }

        if (cache1[start][end] != -1) {
            return cache1[start][end] == 1;
        }

        if (str.charAt(start) != str.charAt(end)) {
            cache1[start][end] = 0;
            return false;
        }

        cache1[start][end] = isPalindrome(str, start + 1, end - 1) ? 1 : 0;

        return cache1[start][end] == 1;
    }

    private void initializeCache() {
        for (int i = 0; i < cache1.length; i++) {
            Arrays.fill(cache1[i], -1);
        }

        Arrays.fill(cache2, -1);
    }
}


//Optimal Approach

class Solution {
    public int minCut(String str) {
        // isPalindrome[i][j] is true if the substring str[i...j] (from index i to j) is a palindrome; otherwise, it is false.
        boolean[][] isPalindrome = precomputePalindromeSubstrings(str);

        // dp[start] represents the minimum number of cuts needed to partition the substring str[start...str.length()-1] into palindromic substrings.
        int[] dp = new int[str.length()];

        for (int start = str.length() - 1; start >= 0; start--) {
            if (isPalindrome[start][str.length() - 1]) {
                dp[start] = 0;
                continue;
            }

            int minCuts = Integer.MAX_VALUE;

            for (int partition = start; partition < str.length() - 1; partition++) {
                if (isPalindrome[start][partition]) {
                    minCuts = Math.min(minCuts, 1 + dp[partition + 1]);
                }
            }

            dp[start] = minCuts;
        }

        return dp[0];
    }

    private boolean[][] precomputePalindromeSubstrings(String str) {
        boolean[][] dp = new boolean[str.length()][str.length()];

        for (int gap = 0; gap < str.length(); gap++) {
            for (int i = 0, j = gap; j < str.length(); i++, j++) {
                if (gap == 0) {
                    dp[i][j] = true;
                } else if (gap == 1) {
                    dp[i][j] = str.charAt(i) == str.charAt(j);
                } else {
                    dp[i][j] = (dp[i + 1][j - 1] && str.charAt(i) == str.charAt(j));
                }
            }
        }

        return dp;
    }
}
