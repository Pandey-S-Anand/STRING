//Bruteforce Approach

class Solution {
    private int[][] cache;

    public int minCut(String str) {
        cache = new int[str.length()][str.length()];
        initializeCache();
        return minCut(str, 0);
    }

    private int minCut(String str, int start) {
        if (isPalindrome(str, start, str.length() - 1)) {
            return 0;
        }

        int minCuts = Integer.MAX_VALUE;

        for (int partition = start; partition < str.length() - 1; partition++) {
            if (isPalindrome(str, start, partition)) {
                minCuts = Math.min(minCuts, 1 + minCut(str, partition + 1));
            }
        }

        return minCuts;
    }

    private boolean isPalindrome(String str, int start, int end) {
        if (start >= end) {
            return true;
        }

        if (cache[start][end] != -1) {
            return cache[start][end] == 1;
        }

        if (str.charAt(start) != str.charAt(end)) {
            cache[start][end] = 0;
            return false;
        }

        cache[start][end] = isPalindrome(str, start + 1, end - 1) ? 1 : 0;

        return cache[start][end] == 1;
    }

    private void initializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}

