//Bruteforce Approach

class Solution {
    public String multiply(String num1, String num2) {
        BigInteger n1= new BigInteger(num1);
        BigInteger n2= new BigInteger(num2);

        return n1.multiply(n2).toString(); 
    }
}


//Optimal Approach

class Solution {
    public String multiply(String num1, String num2) {
      if(num1.equals("0") || num2.equals("0"))
        return "0";
      
      if(num1.equals("1"))
        return num2;
        
      if(num2.equals("1"))
        return num1;


      if(num1.length()<num2.length())
        return multiply(num2,num1);
      
      int len1=num1.length(),len2=num2.length(),padding=0;
   
      String res="";

      for(int i=len2-1;i>=0;i--)
      {
         String pass=multiplyDigit(num1,num2.charAt(i)-'0',padding++);  
         res=addTwoNumbers(res,pass);
      }  
      
      return res; 
    }
    
    public String multiplyDigit(String num1,int dgt,int padding)
    {
      if(dgt==0)
        return "0";
      
      int carry=0;
    
      StringBuilder ans=new StringBuilder("");
    
      for(int pad=1;pad<=padding;pad++)
        ans.append(0);
      
      for(int i=num1.length()-1;i>=0;i--)
      { 
         int prod=(num1.charAt(i)-'0')*dgt;
         int base=(prod+carry)%10;
         carry=(prod+carry)/10;
         ans.append(base);
      }
      
      if(carry!=0)
        ans.append(carry);
              
      return ans.reverse().toString();
    }

    public String addTwoNumbers(String num1, String num2) 
    {
        int i=num1.length()-1,j=num2.length()-1,carry=0;
        StringBuilder num=new StringBuilder();
        
        while(i>=0 && j>=0)
        {
           int d1=num1.charAt(i)-'0';
           int d2=num2.charAt(j)-'0';
            
           int sum=((d1+d2)+carry)%10;
           carry=((d1+d2)+carry)/10;   
        
           num.append(sum);
           i--;
           j--;
        }
        
        while(i>=0)
        {
          int d1=num1.charAt(i)-'0';
          int sum=(d1+carry)%10;
          carry=(d1+carry)/10;
          num.append(sum);
          i--;
        }
        
        while(j>=0)
        {
          int d2=num2.charAt(j)-'0';
          int sum=(d2+carry)%10;
          carry=(d2+carry)/10; 
          num.append(sum);
          j--;
        }
        
        if(carry==1)
          num.append(carry);
            
        return num.reverse().toString(); 
    }
}
