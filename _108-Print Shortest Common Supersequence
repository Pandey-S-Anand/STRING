//Bruteforce Approach

class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        return computeScs(str1, str2, 0, 0);
    }

    private String computeScs(String str1, String str2, int i, int j) {
        if (i == str1.length() && j == str2.length()) {
            return "";
        }

        if (i == str1.length()) {
            return str2.substring(j);
        }

        if (j == str2.length()) {
            return str1.substring(i);
        }

        if (str1.charAt(i) == str2.charAt(j)) {
            return str1.charAt(i) + computeScs(str1, str2, i + 1, j + 1);
        }

        String option1 = computeScs(str1, str2, i + 1, j);
        String option2 = computeScs(str1, str2, i, j + 1);

        if (option1.length() < option2.length()) {
            return str1.charAt(i) + option1;
        }

        return str2.charAt(j) + option2;
    }
}


//Optimal Approach

class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        int[][] dp = new int[str1.length() + 1][str2.length() + 1];

        for (int i = 1; i <= str2.length(); i++) {
            dp[0][i] = i;
        }

        for (int i = 1; i <= str1.length(); i++) {
            dp[i][0] = i;
        }

        for (int i = 1; i <= str1.length(); i++) {
            for (int j = 1; j <= str2.length(); j++) {
                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = 1 + Math.min(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        int i = str1.length(), j = str2.length();
        StringBuilder shortestCommonSupersequence = new StringBuilder();

        while (i > 0 && j > 0) {
            if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                shortestCommonSupersequence.append(str1.charAt(i - 1));
                i--;
                j--;
            } else if (dp[i - 1][j] < dp[i][j - 1]) {
                shortestCommonSupersequence.append(str1.charAt(i - 1));
                i--;
            } else {
                shortestCommonSupersequence.append(str2.charAt(j - 1));
                j--;
            }
        }

        while (i > 0) {
            shortestCommonSupersequence.append(str1.charAt(i - 1));
            i--;
        }

        while (j > 0) {
            shortestCommonSupersequence.append(str2.charAt(j - 1));
            j--;
        }

        return shortestCommonSupersequence.reverse().toString();
    }
}
