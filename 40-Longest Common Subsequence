//Bruteforce Approach

class Solution {
    public int longestCommonSubsequence(String str1, String str2) {
        List<String> subsequences1 = generateSubsequences(str1);
        List<String> subsequences2 = generateSubsequences(str2);
        int maxLength = 0;

        for (String subsequence1 : subsequences1) {
            for (String subsequence2 : subsequences2) {
                if (subsequence1.equals(subsequence2)) {
                    maxLength = Math.max(maxLength, subsequence1.length());
                }
            }
        }

        return maxLength;
    }

    private List<String> generateSubsequences(String str) {
        List<String> subsequences = new ArrayList<>();
        subsequences.add(""); // Start with the empty subsequence

        for (int i = 0; i < str.length(); i++) {
            int size = subsequences.size();
            for (int j = 0; j < size; j++) {
                subsequences.add(subsequences.get(j) + str.charAt(i));
            }
        }

        return subsequences;
    }
}


//Improved Approach

//Naive implementation

class Solution {
    public int longestCommonSubsequence(String str1, String str2) {
        if (str1.isEmpty() || str2.isEmpty()) {
            return 0;
        }

        if (str1.charAt(0) == str2.charAt(0)) {
            return 1 + longestCommonSubsequence(str1.substring(1), str2.substring(1));
        }

        return Math.max(longestCommonSubsequence(str1, str2.substring(1)), longestCommonSubsequence(str1.substring(1), str2));
    }
}


//Optimal implementation

class Solution {
    public int longestCommonSubsequence(String str1, String str2) {
        return computeLcs(str1, str2, 0, 0);
    }

    public int computeLcs(String str1, String str2, int i, int j) {
        if (i == str1.length() || j == str2.length()) {
            return 0;
        }

        if (str1.charAt(i) == str2.charAt(j)) {
            return 1 + computeLcs(str1, str2, i + 1, j + 1);
        }

        return Math.max(computeLcs(str1, str2, i, j + 1), computeLcs(str1, str2, i + 1, j));
    }
}


//Better Approach

class Solution {
    /*
     * memo[i][j]: It holds the length of the longest common subsequence (LCS)
     * between :
     * The substring of 'str1' starting from index i to the end of str1 (i.e. str1.length() - 1)(inclusive)
     * The substring of 'str1' starting from index j to the end of str2 (i.e. str2.length() - 1)(inclusive)
     */
    public int longestCommonSubsequence(String str1, String str2) {
        int[][] memo = new int[str1.length()][str2.length()];
        // Initialize the memoization array with -1 to indicate uncomputed values
        intializeMemo(memo);

        return computeLcs(str1, str2, 0, 0, memo);
    }

    private void intializeMemo(int[][] memo) {
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
    }

    private int computeLcs(String str1, String str2, int i, int j, int[][] memo) {
        if (i == str1.length() || j == str2.length()) {
            return 0;
        }

        if (memo[i][j] != -1) {
            return memo[i][j];
        }

        // If the characters match, this contributes to the LCS
        if (str1.charAt(i) == str2.charAt(j)) {
            return memo[i][j] = 1 + computeLcs(str1, str2, i + 1, j + 1, memo);
        }

        // If the characters don't match, take the maximum LCS by either skipping a character from str1 or str2
        return memo[i][j] = Math.max(computeLcs(str1, str2, i + 1, j, memo), computeLcs(str1, str2, i, j + 1, memo));
    }
}

//Aliter

 class Solution {
    /*
     memo[i][j]: It holds the length of the longest common subsequence (LCS)
     between:
     - The substring of `str1` from index 0 to i (inclusive)
     - The substring of `str2` from index 0 to j (inclusive)
   */
    public int longestCommonSubsequence(String str1, String str2) {
        int[][] memo = new int[str1.length()][str2.length()];
        intializeMemo(memo);

        return computeLcs(str1, str2, str1.length()-1, str2.length()-1, memo);
    }

    private void intializeMemo(int[][] memo) {
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
    }

    private int computeLcs(String str1, String str2, int i, int j, int[][] memo) {
        if (i <0 || j <0) {
            return 0;
        }

        if (memo[i][j] != -1) {
            return memo[i][j];
        }

        if (str1.charAt(i) == str2.charAt(j)) {
            return memo[i][j] = 1 + computeLcs(str1, str2, i - 1, j - 1, memo);
        }

        return memo[i][j] = Math.max(computeLcs(str1, str2, i - 1, j, memo), computeLcs(str1, str2, i, j - 1, memo));
    }
}

//Optimal Approach

class Solution {
    public int longestCommonSubsequence(String str1, String str2) {
        int[][] dp = new int[str1.length() + 1][str2.length() + 1];
        /*
         * dp[i][j]: It holds the length of the longest common subsequence (LCS)
         * between:
         * - The substring of `str1` from index 0 to i-1 (inclusive)
         * - The substring of `str2` from index 0 to j-1 (inclusive)
         * 
         * This means dp[i][j] refers to the LCS of the first `i` characters of `str1`
         * and the first `j` characters of `str2`.
         * 
         * In the recursive approach(top down), you return 0 if you reach the end of
         * either string (i == str1.length() or j == str2.length())(i.e the base case),
         * which implies that the LCS of an empty string with any other string is 0.
         * To represent this empty string state in the DP table, we add an extra row and an extra column.
         * In other words:
         * 
         * dp[0][*] represents the case when str1 is empty.
         * dp[*][0] represents the case when str2 is empty.
         * Thus, there is no common subsequence between a non-empty string and an empty string, and as a result, all values in 
         * dp[0][0...str2.length()] and dp[0...str1.length()][0] are 0.
         * 
         * Key Difference:
         * Recursive approach (Top-Down): Moves forward in the strings with i + 1 and j+ 1
         * to explore further subproblems.This is a top-down approach where you go
         * deeper into the problem, breaking it down to smaller subproblems. Eventually,
         * you'll reach the base case when either string is fully processed.
         * 
         * DP approach (Bottom-Up): Moves backward, filling the DP table based on
         * previous results like dp[i-1][j-1] This is a bottom-up approach where
         * you're solving smaller subproblems first and using their
         * solutions to build up to the larger problem.
         * 
         */
        for (int i = 1; i <= str1.length(); i++) {
            for (int j = 1; j <= str2.length(); j++) {
                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[str1.length()][str2.length()];
    }
}
