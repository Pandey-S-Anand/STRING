//Itertive Approach

class Solution {
    public int myAtoi(String str) {
        int i = 0, sign = 1; // If neither '+' or '-' is present, then sign is +ve
        double result = 0D;

        // Step 1: Ignore leading whitespaces
        while (i < str.length() && str.charAt(i) == ' ') {
            i++;
        }

        // Step 2: Check for sign
        if (i < str.length()) {
            if (str.charAt(i) == '-') {
                sign = -1;
                i++;
            } else if (str.charAt(i) == '+') {
                i++;
            }
        }

        // Step 3: Combine digits to form a number until the string is exhausted or a non-digit character is encountered
        while (i < str.length() && Character.isDigit(str.charAt(i))) {
            result = result * 10 + (str.charAt(i) - '0');
            i++;
        }

        result = result * sign;

        // Step 4: Handle overflow/underflow
        if (result >= Integer.MAX_VALUE) {
            return Integer.MAX_VALUE;
        }

        if (result <= Integer.MIN_VALUE) {
            return Integer.MIN_VALUE;
        }

        return (int) result;
    }
}


//Recursive Approach

class Solution {
    public int myAtoi(String str) {
        // Ignore leading whitespaces
        str = str.trim();

        if (str.isEmpty()) {
            return 0;
        }

        // Step 2: Check for sign
        if (str.charAt(0) == '-' || str.charAt(0) == '+') {
            return myAtoiRecursive(str, 1, 0D, (str.charAt(0) == '-') ? -1 : 1);
        }

        // If neither '+' or '-' is present, then sign is +ve
        return myAtoiRecursive(str, 0, 0D, 1);
    }

    private int myAtoiRecursive(String str, int index, double result, int sign) {
        if (index == str.length() || !Character.isDigit(str.charAt(index))) {
            // Handle overflow / underflow
            if (result * sign >= Integer.MAX_VALUE) {
                return Integer.MAX_VALUE;
            }
            if (result * sign <= Integer.MIN_VALUE) {
                return Integer.MIN_VALUE;
            }
            return (int) (result * sign);
        }

        // If the current character is a digit, combine it to form a number
        if (Character.isDigit(str.charAt(index))) {
            result = result * 10 + (str.charAt(index) - '0');
            return myAtoiRecursive(str, index + 1, result, sign);
        }

        return myAtoiRecursive(str, index, result, sign);
    }
}
