//Bruteforce Approach

class Solution {
    public int countHomogenous(String str) {
        int count = 0;
        Set<Character> seen = new HashSet<>();

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                for (int range = start; range <= end; range++) {
                    seen.add(str.charAt(range));
                }

                if (seen.size() == 1) {
                    count++;
                }

                seen.clear();
            }
        }

        return count;
    }
}


//Improved Approach

class Solution {
    public int countHomogenous(String str) {
        int count = 0;
        Set<Character> seen = new HashSet<>();

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                seen.add(str.charAt(end));

                if (seen.size() == 1) {
                    count++;
                }
            }
            seen.clear();
        }

        return count;
    }
}


//Good Approach

class Solution {
    public int countHomogenous(String str) {
        int count = 0;
        Set<Character> seen = new HashSet<>();

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                seen.add(str.charAt(end));

                if (seen.size() != 1) {
                    break;
                }
                count++;
            }
            seen.clear();
        }

        return count;
    }
}


//Optimal Approach

/*
A homogeneous substring means that all characters in the substring are the same. To count such substrings:

For every run of consecutive identical characters in the string, the number of homogeneous substrings that can be formed is derived from the length of the run.
For example, a run of 3 consecutive cs ("ccc") allows the substrings: "c", "cc", and "ccc". 
In general, for a run of length n, the total number of substrings = n * (n + 1) / 2
*/

class Solution {
    public int countHomogenous(String str) {
        int mod = 1_000_000_007, length = 0;
        long count = 0L;

        for (int i = 0; i < str.length() - 1; i++) {
            if (str.charAt(i) == str.charAt(i + 1)) {
                length++; // Increase the length of the current homogeneous run
            } else {
                length++; // Include the current character
                count += (long) length * (length + 1) / 2;
                if (count >= mod) {
                    count %= mod; // Only apply modulo when necessary
                }
                length = 0; // Reset length for the next character
            }
        }

        // Add the last homogeneous run
        length++;
        count += (long) length * (length + 1) / 2;
        if (count >= mod) {
            count %= mod; // Only apply modulo when necessary
        }

        return (int) count;
    }
}


//Aliter

class Solution {
    public int countHomogenous(String str) {
        int mod = 1_000_000_007, length = 1;
        long count = 0L;

        for (int i = 1; i < str.length(); i++) {
            if (str.charAt(i) == str.charAt(i - 1)) {
                length++; // Increase the length of the current homogeneous run
            } else {
                count += (long) length * (length + 1) / 2;
                if (count >= mod) {
                    count %= mod; // Only apply modulo when necessary
                }
                length = 1; // Reset length for the curent character
            }
        }

        // Add the last homogeneous run
        count = (count + ((long) length * (length + 1) / 2) % mod) % mod;

        return (int) count;
    }
}


//Aliter

class Solution {
    public int countHomogenous(String str) {
        int mod = 1_000_000_007, length = 1;
        long count = 0L;

        for (int i = 1; i <= str.length(); i++) {
            if (i < str.length() && str.charAt(i) == str.charAt(i - 1)) {
                length++;
            } else {
                count += (long) length * (length + 1) / 2;
                if (count >= mod) {
                    count %= mod; // Only apply modulo when necessary
                }
                length = 1;
            }
        }

        return (int) count;
    }
}
