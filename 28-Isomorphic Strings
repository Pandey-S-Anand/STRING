//Intuitive Implementation

class Solution {
    public boolean isIsomorphic(String str1, String str2) {
       HashMap<Character,Character>hm1=new HashMap<>();
       HashMap<Character,Boolean>hm2=new HashMap<>();
       
       for(int i=0;i<str1.length();i++)
       {
         char ch1=str1.charAt(i);
         char ch2=str2.charAt(i);

         if(hm1.containsKey(ch1)==true) //ch1(of Str1) is already mapped to some character in Str2
         {
           if(hm1.get(ch1)!=ch2) //Checking if ch1 is mapped to ch2, If not, return false
             return false;
         }
         else //ch1(of Str1) is not mapped to any character in Str2
         {
           if(hm2.containsKey(ch2)==true) //Checking if ch2 is available to mapped to ch1,If not, return false
             return false;
           else //ch2 is available to be mapped to ch1
           {
             hm1.put(ch1,ch2); //mapping ch1(of str1) to ch2(of str2)
             hm2.put(ch2,true); //marking that ch2(of str2) is mapped
           }
         }
       }
       
       return true;
    }
}


//Better Implementation

class Solution {
    public boolean isIsomorphic(String str1, String str2) {
       HashMap<Character,Character>hm1=new HashMap<>();
       boolean[]isMapped=new boolean[256]; 
       
       for(int i=0;i<str1.length();i++)
       {
         char ch1=str1.charAt(i);
         char ch2=str2.charAt(i);

         if(hm1.containsKey(ch1)==true) //ch1(of Str1) is already mapped to some character in Str2
         {
           if(hm1.get(ch1)!=ch2) //Checking if ch1 is mapped to ch2, If not, return false
             return false;
         }
         else //ch1(of Str1) is not mapped to any character in Str2
         {
           if(isMapped[ch2]==true) //Checking if ch2 is available to mapped to ch1,If not, return false
             return false;
           else //ch2 is available to be mapped to ch1
           {
             hm1.put(ch1,ch2); //mapping ch1(of str1) to ch2(of str2)
             isMapped[ch2]=true; //marking that ch2(of str2) is mapped
           }
         }
       }
       
       return true;
    }
}



//Optimal Implementation

class Solution {
    public boolean isIsomorphic(String str1, String str2) {
       char[]map=new char[256];
       boolean[]isMapped=new boolean[256]; 
       
       for(int i=0;i<str1.length();i++)
       {
         char ch1=str1.charAt(i);
         char ch2=str2.charAt(i);

        if(map[ch1]!='\u0000') //ch1(of Str1) is already mapped to some character in Str2
         {
           if(map[ch1]!=ch2) //Checking if ch1 is mapped to ch2, If not, return false
             return false;
         }
         else //ch1(of Str1) is not mapped to any character in Str2
         {
           if(isMapped[ch2]==true) //Checking if ch2 is available to mapped to ch1,If not, return false
             return false;
           else //ch2 is available to be mapped to ch1
           {
             map[ch1]=ch2; //map ch1(of str1) to ch2(of str2)
             isMapped[ch2]=true; //marking that ch2(of str2) is mapped
           }
         }
       }
       
       return true;
    }
}
