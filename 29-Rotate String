//Bruteforce Approach

class Solution {
    public boolean rotateString(String str, String goal) {
      if(str.length()!=goal.length())
        return false;
        
      if(str.equals(goal))
        return true;
        
      char[]arr=str.toCharArray();
      int n=str.length();
      
      for(int i=1;i<n;i++)
      {
        str=leftShiftBy1(str);
        if(goal.equals(str))
          return true;
      }
 
      return false;
    }

    public static String leftShiftBy1(String str)
    {
      StringBuilder res=new StringBuilder();
      int n=str.length();
      for(int i=1;i<n;i++)
        res.append(str.charAt(i));
      
      res.append(str.charAt(0));

      return res.toString();
    } 
}


//Better Approach

class Solution {
    public boolean rotateString(String str, String goal) {
      
      char[]arr=str.toCharArray();
      char[]target=goal.toCharArray();

      if(arr.length!=target.length)
        return false;

      if(Arrays.equals(arr,target))
        return true;

      for(int i=1;i<arr.length;i++)
      {
        leftShiftBy1(arr);
        if(Arrays.equals(arr,target))
          return true;
      }
 
      return false;
    }

    public void leftShiftBy1(char[] arr)
    {
      char temp=arr[0];
      for(int i=0;i<(arr.length-1);i++)
        arr[i]=arr[i+1];
      
      arr[arr.length-1]=temp;
    } 
}


//Optimal Approach

class Solution {
    public boolean rotateString(String str, String goal) {
      if(str.length()!=goal.length())
        return false;
        
      return (str+str).contains(goal);
    }
}
