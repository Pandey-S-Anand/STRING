//Using ArrayDeque class

//Intuitive Implementation


class Solution {
    public int[] asteroidCollision(int[] arr) {
        ArrayDeque<Integer>stack=new ArrayDeque<>();

        for(int i=0;i<arr.length;i++)
          if(stack.isEmpty()==false && stack.peek()>0 && arr[i]<0)
          {
            if(stack.peek()==Math.abs(arr[i]))
              stack.pop();
            else if (stack.peek()>Math.abs(arr[i]))
             continue;
            else // stack.peek()<Math.abs(arr[i])
            {
               while(stack.isEmpty()==false && stack.peek()>0 && stack.peek()<Math.abs(arr[i]))
                 stack.pop();
               
               if(stack.isEmpty())
                 stack.push(arr[i]);
               else if(stack.peek()==Math.abs(arr[i]))
                 stack.pop();
               else if(stack.peek()<0)
                 stack.push(arr[i]);
            }
          }
          else
            stack.push(arr[i]);
        
        int[]res=new int[stack.size()];
        int idx=stack.size()-1;

        while(stack.isEmpty()==false)
          res[idx--]=stack.pop();
        
      return res;
    }
}


//Optimal Implementation

class Solution {
    public int[] asteroidCollision(int[] arr) {
        ArrayDeque<Integer>stack=new ArrayDeque<>();

        for(int i=0;i<arr.length;i++)
          if(stack.isEmpty()==false && stack.peek()>0 && arr[i]<0)
          {
            int sum=stack.peek() + arr[i];

            if(sum==0)
              stack.pop();
            else if (sum>0)
             continue;
            else             
            {
               while(stack.isEmpty()==false && stack.peek()>0 && stack.peek()<Math.abs(arr[i]))
                 stack.pop();
               
               if(stack.isEmpty())
                 stack.push(arr[i]);
               else if(stack.peek()==Math.abs(arr[i]))
                 stack.pop();
               else if(stack.peek()<0)
                 stack.push(arr[i]);
            }
          }
          else
            stack.push(arr[i]);
        
        int size=stack.size();
        int[]res=new int[size];
        int idx=size-1;

        while(stack.isEmpty()==false)
          res[idx--]=stack.pop();
        
      return res;
    }
}


//Using Array

class Solution {
    public int[] asteroidCollision(int[] arr) {
        int[]stack=new int[arr.length];
        int top=-1;

        for(int i=0;i<arr.length;i++)
          if(top!=-1 && stack[top]>0 && arr[i]<0)
          {
            int sum=stack[top] + arr[i];

            if(sum==0)
              top--;
            else if (sum>0)
             continue;
            else             
            {
               while(top!=-1 && stack[top]>0 && stack[top]<Math.abs(arr[i]))
                 top--;
               
               if(top==-1)
                 stack[++top]=arr[i];
               else if(stack[top]==Math.abs(arr[i]))
                 top--;
               else if(stack[top]<0)
                 stack[++top]=arr[i];
            }
          }
          else
            stack[++top]=arr[i];
        
        int[]res=new int[top+1];
        int idx=top;

        while(top!=-1)
          res[idx--]=stack[top--];
        
      return res;
    }
}
