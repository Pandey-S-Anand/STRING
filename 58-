//Naive Approach

class Solution {
    public boolean isMatch(String text, String pattern) {
        return isMatchHelper(text, pattern, 0, 0);
    }

    private boolean isMatchHelper(String text, String pattern, int i, int j) {
        // Base Case 1: If both text and pattern are fully matched, return true.
        if (i == text.length() && j == pattern.length()) {
            return true;
        }

        // Base Case 2: If the pattern is exhausted but the text isn't fully matched,return false.
        // This ensures that partial matching is not accepted.
        if (j == pattern.length()) {
            return false;
        }

        /*
         * Explanation for the case when the text is empty but the pattern is not:
         * If the remaining pattern contains characters followed by '*', we can still
         * match the empty text since 'char*' can match zero occurrences of 'char'.
         * This case is handled implicitly by the recursive calls.
         * 
         * Example:
         * Testcase 1:
         * text = "", pattern = "a*b*c*"
         * The pattern can match an empty string since each 'char*' means zero
         * occurrences.
         * Expected Output: true
         * 
         * Testcase 2:
         * text = "", pattern = "a*b*cd"
         * Here, the remaining "cd" cannot match an empty string, hence the output is
         * false.
         * Expected Output: false
         */

        boolean isNextStar = (j + 1 < pattern.length() && pattern.charAt(j + 1) == '*');

        if (!isNextStar) {
            // Check if the current characters of text and pattern match or if the pattern has '.'. ( '.' can match any single character.)
            if (i < text.length() && (pattern.charAt(j) == text.charAt(i) || pattern.charAt(j) == '.')) {
                // If they match, recursively check the remaining text and pattern.
                return isMatchHelper(text, pattern, i + 1, j + 1);
            }
            // If the current characters do not match and the pattern does not contain a '.', return false.
            return false;
        }

        // If the current characters match
        if (i < text.length() && (pattern.charAt(j) == text.charAt(i) || pattern.charAt(j) == '.')) {
            return isMatchHelper(text, pattern, i, j + 2) // Match zero occurrences of char*
                    || isMatchHelper(text, pattern, i + 1, j); // Match one occurrence of char
        }

        // If the current characters don't match
        return isMatchHelper(text, pattern, i, j + 2); // Match zero occurrences of char*
    }
}


//Better Approach

class Solution {
    private int[][] memo;

    public boolean isMatch(String text, String pattern) {
        memo = new int[text.length() + 1][pattern.length() + 1];
        initializeMemo();
        return isMatchHelper(text, pattern, 0, 0);
    }

    private boolean isMatchHelper(String text, String pattern, int i, int j) {
        if (i == text.length() && j == pattern.length()) {
            return true;
        }

        if (j == pattern.length()) {
            return false;
        }

        if (memo[i][j] != -1) {
            return memo[i][j] == 1;
        }

        boolean isNextStar = (j + 1 < pattern.length() && pattern.charAt(j + 1) == '*');

        if (!isNextStar) {
            if (i < text.length() && (pattern.charAt(j) == text.charAt(i) || pattern.charAt(j) == '.')) {
                memo[i][j] = isMatchHelper(text, pattern, i + 1, j + 1) ? 1 : 0;
            } else {
                memo[i][j] = 0;
            }

            return memo[i][j] == 1;
        }

        if (i < text.length() && (pattern.charAt(j) == text.charAt(i) || pattern.charAt(j) == '.')) {
            memo[i][j] = (isMatchHelper(text, pattern, i, j + 2) || isMatchHelper(text, pattern, i + 1, j)) ? 1 : 0;
            return memo[i][j] == 1;
        }
        
        memo[i][j] = isMatchHelper(text, pattern, i, j + 2) ? 1 : 0;
        return memo[i][j] == 1;
    }

    private void initializeMemo() {
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation

class Solution {
    public boolean isMatch(String text, String pattern) {
        // dp[i][j] is true if text[0..i-1] matches pattern[0..j-1]; otherwise, it is false.
        boolean[][] dp = new boolean[text.length() + 1][pattern.length() + 1];

        // Empty text and empty pattern is a match
        dp[0][0] = true;

        /*
         * When the text is empty but the pattern is not:
         * Non-asterisk characters cannot match an empty text, so dp[0][i] remains false.
         * However, if the pattern contains '*', it can skip the preceding character,
         * potentially allowing a match with the empty text(if dp[0][i-2] is true).
         * We check dp[0][i-2] to see if the rest of the
         * pattern up to that point can match the empty text.
         */

        for (int i = 1; i <= pattern.length(); i++) {
            if (pattern.charAt(i - 1) == '*') {
                dp[0][i] = dp[0][i - 2];
            }
        }

        // If the pattern is empty but the text is not, the match is always false, as an empty pattern cannot match any non-empty text.
        for (int i = 1; i <= text.length(); i++) {
            dp[i][0] = false;
        }

        for (int i = 1; i <= text.length(); i++) {
            for (int j = 1; j <= pattern.length(); j++) {
                if (pattern.charAt(j - 1) == text.charAt(i - 1) || pattern.charAt(j - 1) == '.') {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (pattern.charAt(j - 1) == '*') {
                    dp[i][j] = dp[i][j - 2];
                    if (pattern.charAt(j - 2) == text.charAt(i - 1) || pattern.charAt(j - 2) == '.') {
                        dp[i][j] = dp[i][j] || dp[i - 1][j];
                    }
                } else {
                    dp[i][j] = false;
                }
            }
        }

        return dp[text.length()][pattern.length()];
    }
}


//Optimal Implementation

class Solution {
    public boolean isMatch(String text, String pattern) {
        boolean[][] dp = new boolean[text.length() + 1][pattern.length() + 1];

        dp[0][0] = true;

        for (int i = 1; i <= pattern.length(); i++) {
            if (pattern.charAt(i - 1) == '*') {
                dp[0][i] = dp[0][i - 2];
            }
        }

        for (int i = 1; i <= text.length(); i++) {
            for (int j = 1; j <= pattern.length(); j++) {
                if (pattern.charAt(j - 1) == text.charAt(i - 1) || pattern.charAt(j - 1) == '.') {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (pattern.charAt(j - 1) == '*') {
                    dp[i][j] = dp[i][j - 2];
                    if (pattern.charAt(j - 2) == text.charAt(i - 1) || pattern.charAt(j - 2) == '.') {
                        dp[i][j] = dp[i][j] || dp[i - 1][j];
                    }
                }
            }
        }

        return dp[text.length()][pattern.length()];
    }
}


//Aliter (Space optimised)

class Solution {
    public boolean isMatch(String text, String pattern) {
        boolean[] currRow = new boolean[pattern.length() + 1];
        boolean[] prevRow = new boolean[pattern.length() + 1];

        prevRow[0] = true;

        for (int i = 1; i <= pattern.length(); i++) {
            if (pattern.charAt(i - 1) == '*') {
                prevRow[i] = prevRow[i - 2];
            }
        }

        for (int i = 1; i <= text.length(); i++) {
            currRow[0] = false;
            for (int j = 1; j <= pattern.length(); j++) {
                if (pattern.charAt(j - 1) == text.charAt(i - 1) || pattern.charAt(j - 1) == '.') {
                    currRow[j] = prevRow[j - 1];
                } else if (pattern.charAt(j - 1) == '*') {
                    currRow[j] = currRow[j - 2];
                    if (pattern.charAt(j - 2) == text.charAt(i - 1) || pattern.charAt(j - 2) == '.') {
                        currRow[j] = currRow[j] || prevRow[j];
                    }
                } else {
                    currRow[j] = false;
                }
            }

            boolean[] temp = currRow;
            currRow = prevRow;
            prevRow = temp;
        }

        return prevRow[pattern.length()];
    }
}
