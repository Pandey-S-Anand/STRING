//Bruteforce Approach

class Solution {
    public int longestPalindromeSubseq(String str) {
        int maxLength = 0;
        List<String> subsequences = new ArrayList<>();
        subsequences.add(""); // Start with the empty subsequence

        for (int i = 0; i < str.length(); i++) {
            int size = subsequences.size();
            for (int j = 0; j < size; j++) {
                String subsequence = subsequences.get(j) + str.charAt(i);
                if (isPalindrome(subsequence)) {
                    maxLength = Math.max(maxLength, subsequence.length());
                }
                subsequences.add(subsequence);
            }
        }

        return maxLength;
    }

    private boolean isPalindrome(String str) {
        int start = 0, end = str.length() - 1;

        while (start < end) {
            if (str.charAt(start) != str.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }

        return true;
    }
}


//Good Approach

class Solution {
    public int longestPalindromeSubseq(String str) {
        return computeLps(str, 0, str.length() - 1);
    }

    private int computeLps(String str, int start, int end) {
        if (start == end) {
            return 1;// only one char is always palindrome
        }

        // Case: Two characters
        if (end - start == 1) {
            // If characters at 'start' and 'end' are the same, return 2 (one pair as a palindrome); otherwise return 1, representing the single character as a palindromic subsequence.
            return str.charAt(start) == str.charAt(end) ? 2 : 1;
        }

        if (str.charAt(start) == str.charAt(end)) {
            return 2 + computeLps(str, start + 1, end - 1);// the length of the palindromic subsequence increases by 2 (one for each matching character)
        }

        return Math.max(computeLps(str, start + 1, end), computeLps(str, start, end - 1));
    }
}


//Better Approach

class Solution {
    private int[][] cache;

    public int longestPalindromeSubseq(String str) {
        cache = new int[str.length()][str.length()];
        intializeCache();
        return computeLps(str, 0, str.length() - 1);
    }

    private int computeLps(String str, int start, int end) {
        if (end - start <= 1) {
            return (start == end) ? 1 : (str.charAt(start) == str.charAt(end) ? 2 : 1);
        }

        if (cache[start][end] != -1) {
            return cache[start][end];
        }

        if (str.charAt(start) == str.charAt(end)) {
            return cache[start][end] = 2 + computeLps(str, start + 1, end - 1);
        }

        return cache[start][end] = Math.max(computeLps(str, start + 1, end), computeLps(str, start, end - 1));
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

class Solution {
    public int longestPalindromeSubseq(String str) {
        int[][] dp = new int[str.length()][str.length()];

        for (int start = str.length() - 1; start >= 0; start--) {
            for (int end = start; end < str.length(); end++) {
                if (end - start <= 1) {
                    dp[start][end] = (start == end) ? 1 : (str.charAt(start) == str.charAt(end) ? 2 : 1);
                } else {
                    if (str.charAt(start) == str.charAt(end)) {
                        dp[start][end] = 2 + dp[start + 1][end - 1];
                    } else {
                        dp[start][end] = Math.max(dp[start + 1][end], dp[start][end - 1]);
                    }
                }
            }
        }

        return dp[0][str.length() - 1];
    }
}

//Aliter (Space optimised)

class Solution {
    public int longestPalindromeSubseq(String str) {
        int[] nextRow = new int[str.length()];
        int[] curentRow = new int[str.length()];

        for (int start = str.length() - 1; start >= 0; start--) {
            for (int end = start; end < str.length(); end++) {
                if (end - start <= 1) {
                    curentRow[end] = (start == end) ? 1 : (str.charAt(start) == str.charAt(end) ? 2 : 1);
                } else {
                    if (str.charAt(start) == str.charAt(end)) {
                        curentRow[end] = 2 + nextRow[end - 1];
                    } else {
                        curentRow[end] = Math.max(nextRow[end], curentRow[end - 1]);
                    }
                }
            }

            int[] temp = curentRow;
            curentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[str.length() - 1];
    }
}


//Aliter (Using LCS)
/*
When you reverse a string, the sequence of characters is inverted. For instance, the original string "abc" becomes "cba" when reversed. 
This process effectively mirrors each character's position relative to the original string. 
Therefore, if a subsequence exists in both the original string and its reversed version, it indicates that the subsequence maintains a symmetrical arrangement. 
This symmetry means the characters can be read the same way from either end, which is the defining characteristic of a palindrome. 
Thus, any common subsequence found in both the original string and its reverse must be a palindrome.
*/

//Bruteforce Approach

class Solution {
    public int longestPalindromeSubseq(String str) {
        return longestCommonSubsequence(str, new StringBuilder(str).reverse().toString());
    }

    private int longestCommonSubsequence(String str1, String str2) {
        List<String> subsequencesStr1 = generateSubsequences(str1);
        List<String> subsequencesStr2 = generateSubsequences(str2);
        int maxLength = 0;

        for (String subsequence1 : subsequencesStr1) {
            for (String subsequence2 : subsequencesStr2) {
                if (subsequence1.equals(subsequence2)) {
                    maxLength = Math.max(maxLength, subsequence1.length());
                }
            }
        }

        return maxLength;
    }

    private List<String> generateSubsequences(String str) {
        List<String> subsequences = new ArrayList<>();
        subsequences.add(""); // Start with the empty subsequence

        for (int i = 0; i < str.length(); i++) {
            int size = subsequences.size();
            for (int j = 0; j < size; j++) {
                subsequences.add(subsequences.get(j) + str.charAt(i));
            }
        }

        return subsequences;
    }
}

//Improved Approach

class Solution {
    public int longestPalindromeSubseq(String str) {
        return longestCommonSubsequence(str, new StringBuilder(str).reverse().toString());
    }

    private int longestCommonSubsequence(String str1, String str2) {
        return computeLcs(str1, str2, 0, 0);
    }

    private int computeLcs(String str1, String str2, int i, int j) {
        if (i == str1.length() || j == str2.length()) {
            return 0;
        }

        if (str1.charAt(i) == str2.charAt(j)) {
            return 1 + computeLcs(str1, str2, i + 1, j + 1);
        }

        return Math.max(computeLcs(str1, str2, i + 1, j), computeLcs(str1, str2, i, j + 1));
    }
}


//Better Approach

class Solution {
    private int[][] cache;

    public int longestPalindromeSubseq(String str) {
        return longestCommonSubsequence(str, new StringBuilder(str).reverse().toString());
    }

    private int longestCommonSubsequence(String str1, String str2) {
        cache = new int[str1.length()][str2.length()];
        intializeCache();
        return computeLcs(str1, str2, 0, 0);
    }

    private int computeLcs(String str1, String str2, int i, int j) {
        if (i == str1.length() || j == str2.length()) {
            return 0;
        }

        if (cache[i][j] != -1) {
            return cache[i][j];
        }

        if (str1.charAt(i) == str2.charAt(j)) {
            return cache[i][j] = 1 + computeLcs(str1, str2, i + 1, j + 1);
        }

        return cache[i][j] = Math.max(computeLcs(str1, str2, i + 1, j), computeLcs(str1, str2, i, j + 1));
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

class Solution {
    public int longestPalindromeSubseq(String str) {
        return longestCommonSubsequence(str, new StringBuilder(str).reverse().toString());
    }

    private int longestCommonSubsequence(String str1, String str2) {
        int[][] dp = new int[str1.length() + 1][str2.length() + 1];

        for (int i = str1.length() - 1; i >= 0; i--) {
            for (int j = str2.length() - 1; j >= 0; j--) {
                if (str1.charAt(i) == str2.charAt(j)) {
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j + 1]);
                }
            }
        }

        return dp[0][0];
    }
}


//Aliter (Space optimised)

class Solution {
    public int longestPalindromeSubseq(String str) {
        return longestCommonSubsequence(str, new StringBuilder(str).reverse().toString());
    }

    private int longestCommonSubsequence(String str1, String str2) {
        int[] nextRow = new int[str2.length() + 1];
        int[] currentRow = new int[str2.length() + 1];

        for (int i = str1.length() - 1; i >= 0; i--) {
            for (int j = str2.length() - 1; j >= 0; j--) {
                if (str1.charAt(i) == str2.charAt(j)) {
                    currentRow[j] = 1 + nextRow[j + 1];
                } else {
                    currentRow[j] = Math.max(nextRow[j], currentRow[j + 1]);
                }
            }
            int[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[0];
    }
}
