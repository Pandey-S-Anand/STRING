//Bruteforce Approach

class Solution {
    public String longestPalindrome(String str) {
        int maxLength = 0, bestStart = 0, bestEnd = 0;

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                if (isPalindrome(str, start, end) && (end - start + 1) > maxLength) {
                    maxLength = end - start + 1;
                    bestStart = start;
                    bestEnd = end;
                }
            }
        }

        return str.substring(bestStart, bestEnd + 1);
    }

    private boolean isPalindrome(String str, int left, int right) {
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}


//Better Approach

class Solution {
    int[][] memo = new int[1000][1000];

    public String longestPalindrome(String str) {
        initializeMemo();
        int maxLength = 0, bestStart = 0, bestEnd = 0;

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                if (isPalindrome(str, start, end) && (end - start + 1) > maxLength) {
                    maxLength = end - start + 1;
                    bestStart = start;
                    bestEnd = end;
                }
            }
        }

        return str.substring(bestStart, bestEnd + 1);
    }

    private void initializeMemo() {
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
    }

    private boolean isPalindrome(String str, int start, int end) {
        if (start >= end) {
            return true;
        }

        if (memo[start][end] != -1) {
            return memo[start][end] == 1;
        }

        if (str.charAt(start) != str.charAt(end)) {
            memo[start][end] = 0;
            return false;
        }

        memo[start][end] = isPalindrome(str, start + 1, end - 1) ? 1 : 0;
        return memo[start][end] == 1;
    }
}


//Best Approach

//Naive implementation

class Solution {
    public String longestPalindrome(String str) {
        boolean[][] dp = new boolean[str.length()][str.length()];

        for (int gap = 0; gap < str.length(); gap++) {
            for (int i = 0, j = gap; j < str.length(); i++, j++) {
                if (gap == 0) {
                    dp[i][j] = true;
                } else if (gap == 1) {
                    dp[i][j] = str.charAt(i) == str.charAt(j);
                } else {
                    dp[i][j] = (dp[i + 1][j - 1] && str.charAt(i) == str.charAt(j));
                }
            }
        }

        for (int gap = str.length() - 1; gap >= 0; gap--) {
            for (int i = 0, j = gap; j < str.length(); i++, j++) {
                if (dp[i][j]) {
                    return str.substring(i, j + 1);
                }
            }
        }

        return ""; // This return statement will never be reached
    }
}


//Optimal implementaion

class Solution {
    public String longestPalindrome(String str) {
        int bestStart = 0, bestEnd = 0;
        boolean[][] dp = new boolean[str.length()][str.length()];

        for (int gap = 0; gap < str.length(); gap++) {
            for (int i = 0, j = gap; j < str.length(); i++, j++) {
                if (gap == 0) {
                    dp[i][j] = true;
                } else if (gap == 1) {
                    dp[i][j] = str.charAt(i) == str.charAt(j);
                } else {
                    dp[i][j] = (dp[i + 1][j - 1] && str.charAt(i) == str.charAt(j));
                }

                if (dp[i][j]) {
                    bestStart = i;
                    bestEnd = j;
                }
            }
        }

        return str.substring(bestStart, bestEnd + 1);
    }
}


//Further optimised

//Naive Implementation

class Solution {
    public String longestPalindrome(String str) {
        String maxLengthSubstring = "";

        for (int center = 0; center < str.length(); center++) {
            String palindrome1 = expandAroundCenter(str, center, center);
            String palindrome2 = expandAroundCenter(str, center, center + 1);

            if (palindrome1.length() > maxLengthSubstring.length()) {
                maxLengthSubstring = palindrome1;
            }

            if (palindrome2.length() > maxLengthSubstring.length()) {
                maxLengthSubstring = palindrome2;
            }
        }

        return maxLengthSubstring;
    }

    private String expandAroundCenter(String str, int start, int end) {
        while ((start >= 0 && end < str.length()) && str.charAt(start) == str.charAt(end)) {
            start--;
            end++;
        }

        return str.substring(start + 1, end);
    }
}


//Optimal Implementation

class Solution {
    public String longestPalindrome(String str) {
        int bestStart = 0, bestEnd = 0;

        for (int center = 0; center < str.length(); center++) {
            int[] oddPalindrome = expandAroundCenter(str, center, center);
            int[] evenPalindrome = expandAroundCenter(str, center, center + 1);

            if ((oddPalindrome[1] - oddPalindrome[0]) > (bestEnd - bestStart)) {
                bestStart = oddPalindrome[0];
                bestEnd = oddPalindrome[1];
            }

            if ((evenPalindrome[1] - evenPalindrome[0]) > (bestEnd - bestStart)) {
                bestStart = evenPalindrome[0];
                bestEnd = evenPalindrome[1];
            }
        }

        return str.substring(bestStart, bestEnd + 1);
    }

    private int[] expandAroundCenter(String str, int start, int end) {
        while ((start >= 0 && end < str.length()) && str.charAt(start) == str.charAt(end)) {
            start--;
            end++;
        }

        return new int[] { start + 1, end - 1 };
    }
}


//Optimal Approach (Manacher algorithm)
