//Iterative Approach

//Method 1

class Solution {
    public List<String> AllPossibleStrings(String str) {
        List<String> subsequences = new ArrayList<>();
        subsequences.add(""); // Initialize with the empty subsequence

        for (int i = 0; i < str.length(); i++) {
            int currentSize = subsequences.size();
            for (int j = 0; j < currentSize; j++) {
                subsequences.add(subsequences.get(j) + str.charAt(i));
            }
        }
        subsequences.remove(""); // Remove the empty subsequence

        Collections.sort(subsequences); // Sort the subsequences in alphabetical order

        return subsequences;
    }
}

//Method 2

//Naive Implementation 

class Solution {
    public List<String> AllPossibleStrings(String str) {
        List<String> subsequences = new ArrayList<>();
        StringBuilder currentSubsequence = new StringBuilder();

        int totalSubsequences = 1 << str.length();

        for (int num = 1; num < totalSubsequences; num++) {
            String binaryWithoutLeadingZeroes = Integer.toBinaryString(num);

            int length = binaryWithoutLeadingZeroes.length();
            for (int i = length - 1; i >= 0; i--) {
                if (binaryWithoutLeadingZeroes.charAt(i) == '1') {
                    currentSubsequence.append(str.charAt(length - i - 1));
                }
            }

            subsequences.add(currentSubsequence.toString());
            currentSubsequence.setLength(0);
        }

        Collections.sort(subsequences);
        return subsequences;
    }
}

//Optimal Implementation 

class Solution {
    public List<String> AllPossibleStrings(String str) {
        List<String> subsequences = new ArrayList<>();
        StringBuilder currentSubsequence = new StringBuilder();

        int totalSubsequences = 1 << str.length();

        for (int num = 1; num < totalSubsequences; num++) {
            for (int i = 0; i < str.length(); i++) {
                if ((num & (1 << i)) != 0) {
                    currentSubsequence.append(str.charAt(i));
                }
            }
            subsequences.add(currentSubsequence.toString());
            currentSubsequence.setLength(0);
        }

        Collections.sort(subsequences);
        return subsequences;
    }
}


// Recursive Approach

//Method 1

class Solution {
    private List<String> subsequences;

    public List<String> AllPossibleStrings(String str) {
        subsequences = new ArrayList<>();
        generateSubsequences(str, 0, new StringBuilder());
        Collections.sort(subsequences);
        return subsequences;
    }

    private void generateSubsequences(String str, int index, StringBuilder currentSubsequence) {
        if (index == str.length()) {
            if (currentSubsequence.length() != 0) {
                subsequences.add(currentSubsequence.toString());
            }
            return;
        }
        currentSubsequence.append(str.charAt(index));
        generateSubsequences(str, index + 1, currentSubsequence);
        currentSubsequence.setLength(currentSubsequence.length() - 1);
        generateSubsequences(str, index + 1, currentSubsequence);
    }
}


//Method 2

class Solution {
    private List<String> subsequences;

    public List<String> AllPossibleStrings(String str) {
        subsequences = new ArrayList<>();
        generateSubsequences(str, 0, new StringBuilder());
        Collections.sort(subsequences);
        return subsequences;
    }

    private void generateSubsequences(String str, int index, StringBuilder currentSubsequence) {
        if (currentSubsequence.length() != 0) {
            subsequences.add(currentSubsequence.toString());
        }

        for (int i = index; i < str.length(); i++) {
            currentSubsequence.append(str.charAt(i));
            generateSubsequences(str, i + 1, currentSubsequence);
            currentSubsequence.setLength(currentSubsequence.length() - 1);
        }
    }
}
