//Bruteforce Approach

class Solution {
    public int longestSubstring(String str, int k) {
        int maxLength = 0;

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                if (isValidSubstring(str.substring(start, end + 1), k)) {
                    maxLength = Math.max(maxLength, end - start + 1);
                }
            }
        }

        return maxLength;
    }

    private boolean isValidSubstring(String str, int k) {
        int[] freqArray = new int[26];

        for (int i = 0; i < str.length(); i++) {
            freqArray[str.charAt(i) - 'a']++;
        }

        for (int i = 0; i < str.length(); i++) {
            if (freqArray[str.charAt(i) - 'a'] < k) {
                return false;
            }
        }

        return true;
    }
}


//Improved Approach

class Solution {
    public int longestSubstring(String str, int k) {
        int maxLength = 0;
        int[] freqArray = new int[26];

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                freqArray[str.charAt(end) - 'a']++;
                if (isValidSubstring(str.substring(start, end + 1), k, freqArray)) {
                    maxLength = Math.max(maxLength, end - start + 1);
                }
            }
            Arrays.fill(freqArray, 0);
        }

        return maxLength;
    }

    private boolean isValidSubstring(String str, int k, int[] freqArray) {
        for (int i = 0; i < str.length(); i++) {
            if (freqArray[str.charAt(i) - 'a'] < k) {
                return false;
            }
        }

        return true;
    }
}


//Good Approach

class Solution {
    public int longestSubstring(String str, int k) {
        int maxLength = 0;
        int[] freqArray = new int[26];
        StringBuilder substring = new StringBuilder();

        for (int start = 0; start < str.length(); start++) {
            for (int end = start; end < str.length(); end++) {
                freqArray[str.charAt(end) - 'a']++;
                substring.append(str.charAt(end));
                
                if (isValidSubstring(substring, k, freqArray)) {
                    maxLength = Math.max(maxLength, end - start + 1);
                }
            }
            substring.setLength(0);
            Arrays.fill(freqArray, 0);
        }

        return maxLength;
    }

    private boolean isValidSubstring(StringBuilder str, int k, int[] freqArray) {
        for (int i = 0; i < str.length(); i++) {
            if (freqArray[str.charAt(i) - 'a'] < k) {
                return false;
            }
        }

        return true;
    }
}


//Better Approach


