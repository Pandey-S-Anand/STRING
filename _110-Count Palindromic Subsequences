//Bruteforce Approach

class Solution {
    static final long MOD = 1000000007;

    long countPS(String str) {
        long count = 0;
        List<String> subsequences = new ArrayList<>();

        subsequences.add(""); // Start with the empty subsequence

        for (int i = 0; i < str.length(); i++) {
            int size = subsequences.size();
            for (int j = 0; j < size; j++) {
                String subsequence = subsequences.get(j) + str.charAt(i);
                if (isPalindrome(subsequence)) {
                    count = (count + 1) % MOD;
                }
                subsequences.add(subsequence);
            }
        }

        return count;
    }

    private boolean isPalindrome(String str) {
        if (str.isEmpty()) {
            return false; 
        }

        int start = 0, end = str.length() - 1;

        while (start < end) {
            if (str.charAt(start) != str.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }

        return true;
    }
}


//Improved Approach

class Solution {
    static final long MOD = 1000000007;

    long countPS(String str) {
        return computeLps(str, 0, str.length() - 1);
    }

    private long computeLps(String str, int start, int end) {
        if (start == end) {
            return 1; // Single character is a palindrome
        }

        // Case: Two characters
        if (end - start == 1) {
            //If characters at 'start' and 'end' are the same, return 3 (two single characters + one pair); otherwise return 1, representing the single character as a palindrome.
            return str.charAt(start) == str.charAt(end) ? 3 : 2;
        }

        if (str.charAt(start) == str.charAt(end)) {
            return (1 + computeLps(str, start, end - 1) + computeLps(str, start + 1, end)) % MOD;
        }

        return (computeLps(str, start, end - 1) + computeLps(str, start + 1, end) - computeLps(str, start + 1, end - 1) + MOD) % MOD;
    }
}


//Better Approach

class Solution {
    static final long MOD = 1000000007;
    private long[][] cache;

    long countPS(String str) {
        cache = new long[str.length()][str.length()];
        initializeCache();
        return computeLps(str, 0, str.length() - 1);
    }

    private long computeLps(String str, int start, int end) {
        if (end - start <= 1) {
            return start == end ? 1 : str.charAt(start) == str.charAt(end) ? 3 : 2;
        }

        if (cache[start][end] != -1) {
            return cache[start][end];
        }

        if (str.charAt(start) == str.charAt(end)) {
            return cache[start][end] = (1 + computeLps(str, start, end - 1) + computeLps(str, start + 1, end)) % MOD;
        }

        return cache[start][end] = (computeLps(str, start, end - 1) + computeLps(str, start + 1, end) - computeLps(str, start + 1, end - 1) + MOD) % MOD;
    }

    private void initializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

class Solution {
    private static final long MOD = 1000000007;

    long countPS(String str) {
        long[][] dp = new long[str.length()][str.length()];

        for (int start = str.length() - 1; start >= 0; start--) {
            for (int end = start; end < str.length(); end++) {
                if (end - start <= 1) {
                    dp[start][end] = start == end ? 1 : str.charAt(start) == str.charAt(end) ? 3 : 2;
                } else {
                    if (str.charAt(start) == str.charAt(end)) {
                        dp[start][end] = (1 + dp[start][end - 1] + dp[start + 1][end]) % MOD;
                    } else {
                        dp[start][end] = (dp[start][end - 1] + dp[start + 1][end] - dp[start + 1][end - 1] + MOD) % MOD;
                    }
                }
            }
        }
        return dp[0][str.length() - 1];
    }
}


//Aliter (Space optimised)

class Solution {
    private static final long MOD = 1000000007;

    long countPS(String str) {
        long[] nextRow = new long[str.length()];
        long[] currentRow = new long[str.length()];

        for (int start = str.length() - 1; start >= 0; start--) {
            for (int end = start; end < str.length(); end++) {
                if (end - start <= 1) {
                    currentRow[end] = start == end ? 1 : str.charAt(start) == str.charAt(end) ? 3 : 2;
                } else {
                    if (str.charAt(start) == str.charAt(end)) {
                        currentRow[end] = (1 + currentRow[end - 1] + nextRow[end]) % MOD;
                    } else {
                        currentRow[end] = (currentRow[end - 1] + nextRow[end] - nextRow[end - 1] + MOD) % MOD;
                    }
                }
            }

            long[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }
        return nextRow[str.length() - 1];
    }
}
