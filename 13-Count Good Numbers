//Iterative Approach

/*
Independence of Choices: The choices made for even indices are independent of the choices made for odd indices.
This means that selecting a digit for an even index does not affect the options available for an odd index, and vice versa.

When you have multiple independent events (like choosing digits for even and odd indices), the total number of possible outcomes 
is the product of the number of choices for each event. This is the core idea behind the multiplication principle in combinatorics, 
which we apply here to count the number of valid "good" digit strings.


Every even index can be filled with one of 5 digits: 0, 2, 4, 6, or 8.
Every odd index can be filled with one of 4 digits: 2, 3, 5, or 7.

Case 1: When n is Even :
There are n/2 even indices and n/2 odd indices.
For n/2 even indices , the total number of valid combinations is 5 ^(n/2)
For n/2 odd indices, the total number of valid combinations is 4 ^ (n/2)

The total number of good digit strings is the product of the combinations possible for even and odd indices.
i.e Total Good Strings= 5^n/2 * 4^n/2 

Case 2: When n is Odd :
There are (n/2 + 1) even indices and n/2 odd indices.
For (n/2)+1 even indices , the total number of valid combinations is 5 ^((n/2)+1)
For n/2 odd indices, the total number of valid combinations is 4 ^ (n/2)

The total number of good digit strings is the product of the combinations possible for even and odd indices. 
i.e Total Good Strings= 5 ^((n/2)+1) * 4^n/2 


Binary Exponentiation :

In order to improve efficiency we will opt for Binary Exponentiation using which we can calculate base^power 
using O log2(power) multiplications.

Binary Exponentiation leverages the binary representation of the exponent to reduce the number of multiplications. 
The idea is to break down the exponentiation process by handling each bit of the exponent individually:

Ex-
base= 7, exponent = 11 and result= 1
Here, we have to calculate 7^11

Binary of power i.e (11) is (1011)
 1    0    1    1
2^3  2^2  2^1  2^0   <-- Corresponding place values of each bit

OR we can also write this as
1 0 1 1
8 4 2 1 <-- Corresponding place values of each bit

Now, 7^8 × 7^2 × 7^1 == 5764801 × 49 × 7 == 1977326743 <-- Desired Output

NOTE: We have not considered 7^4 in this case as the 3rd place bit is OFF

Now, applying logic keeping this concept in mind
*/

//Naive Implementation

class Solution {
    private static final long MOD = 1000000007L;

    public int countGoodNumbers(long n) {
        long evenIndicesCount = 0L, oddIndicesCount = 0L;

        if (n % 2L == 0) {
            evenIndicesCount = n / 2L;
            oddIndicesCount = n / 2L;
        } else {
            evenIndicesCount = (n / 2L) + 1;
            oddIndicesCount = (n / 2L);
        }

        long goodStringCount = myPow(5, evenIndicesCount) * myPow(4, oddIndicesCount) % MOD;

        return (int) goodStringCount;
    }

    private long myPow(int base, long exponent) {
        long result = 1L;

        for (int i = 0; i < 64; i++) {
            if ((exponent & (1L << i)) != 0) {
                result = (result * (long) Math.pow(base, Math.pow(2L, i))) % MOD;
            }
        }

        return result;
    }
}


//Better Implementation

class Solution {
    private static final long MOD = 1000000007L;

    public int countGoodNumbers(long n) {
        long evenIndicesCount = 0L, oddIndicesCount = 0L;

        if (n % 2L == 0) {
            evenIndicesCount = n / 2L;
            oddIndicesCount = n / 2L;
        } else {
            evenIndicesCount = (n / 2L) + 1;
            oddIndicesCount = (n / 2L);
        }

        long goodStringCount = myPow(5L, evenIndicesCount) * myPow(4L, oddIndicesCount) % MOD;

        return (int) goodStringCount;
    }

    private long myPow(long base, long exponent) {
        long result = 1L;

        for (int i = 0; i < 64; i++) {
            if ((exponent & (1L << i)) != 0) {
                result = (result * base) % MOD;
            }
            base = (base * base) % MOD;
        }

        return result;
    }
}


//Optimal Implementation

class Solution {
    private static final long MOD = 1000000007L;

    public int countGoodNumbers(long n) {
        long evenIndicesCount = (n + 1) / 2L;
        long oddIndicesCount = n / 2L;

        long goodStringCount = myPow(5L, evenIndicesCount) * myPow(4L, oddIndicesCount) % MOD;

        return (int) goodStringCount;
    }

    private long myPow(long base, long exponent) {
        long result = 1L;

        while (exponent != 0) {
            if ((exponent & 1L) != 0) {
                result = (result * base) % MOD;
            }
            base = (base * base) % MOD;
            exponent = exponent >> 1;
        }

        return result;
    }
}


/*
A digit string is a string consisting of digits 0 through 9 that may contain leading zeros.
A digit string is good if the digits (0-indexed) at even indices are even (0, 2, 4, 6 or 8) and 
the digits at odd indices are prime (2, 3, 5 or 7)

We  are asked to generate a 'good digit string' of length 'n', so index range from '0' to 'n-1' ,
now for every even index we are having 5 choices (0, 2, 4, 6 or 8) and similar for every odd index 
we are having 4 choices (2, 3, 5 or 7)?

Therefore, at each index, we need to select a digit from the set of valid options based on whether the index is even or odd.
*/


//Recursive Approach

//Naive Implementation

class Solution {
    private static final long MOD = 1000000007L;
    private static final int[] EVEN_DIGITS = { 0, 2, 4, 6, 8 };
    private static final int[] PRIME_DIGITS = { 2, 3, 5, 7 };

    public int countGoodNumbers(long n) {
        return (int) countGoodDigitStrings(new StringBuilder(), 0, n);
    }

    private long countGoodDigitStrings(StringBuilder currentCombination, int index, long n) {
        if (index == n) {
            return 1L;
        }

        long count = 0;
        int[] validDigits = (index % 2 == 0) ? EVEN_DIGITS : PRIME_DIGITS;

        for (int digit : validDigits) {
            currentCombination.append(digit);
            count = (count + countGoodDigitStrings(currentCombination, index + 1, n)) % MOD;
            currentCombination.setLength(currentCombination.length() - 1);
        }

        return count;
    }
}


//Optimal Implementation

class Solution {
    private static final long MOD = 1000000007L;
    private static final int[] EVEN_DIGITS = { 0, 2, 4, 6, 8 };
    private static final int[] PRIME_DIGITS = { 2, 3, 5, 7 };

    public int countGoodNumbers(long n) {
        return (int) countGoodDigitStrings(0, n);
    }

    private long countGoodDigitStrings(int index, long n) {
        if (index == n) {
            return 1L;
        }

        long count = 0;

        int[] validDigits = (index % 2 == 0) ? EVEN_DIGITS : PRIME_DIGITS;

        for (int digit : validDigits) {
            count = (count + countGoodDigitStrings(index + 1, n)) % MOD;
        }

        return count;
    }
}
