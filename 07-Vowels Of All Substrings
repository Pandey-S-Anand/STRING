//Bruteforce Approach

class Solution {
    public long countVowels(String word) {
        int length = word.length();
        long totalVowels = 0L;

        for (int start = 0; start < length; start++) {
            for (int end = start; end < length; end++) {
                totalVowels += countVowelsInSubstring(word, start, end);
            }
        }

        return totalVowels;
    }

    private long countVowelsInSubstring(String str, int start, int end) {
        long vowelCount = 0;

        while (start <= end) {
            if (start == end) {
                if (isVowel(str.charAt(start))) {
                    vowelCount++;
                }
            } else {
                if (isVowel(str.charAt(start))) {
                    vowelCount++;
                }

                if (isVowel(str.charAt(end))) {
                    vowelCount++;
                }
            }

            start++;
            end--;
        }

        return vowelCount;
    }

    private boolean isVowel(char character) {
        return character == 'a' || character == 'e' || character == 'i' || character == 'o' || character == 'u';
    }
}


//Optimal Approach

class Solution {
    public long countVowels(String word) {
        int length = word.length();
        long totalVowels = 0L;

        for (int i = 0; i < length; i++) {
            if (isVowel(word.charAt(i))) {
                totalVowels += (long)(i + 1) * (length - i);
            }
        }

        return totalVowels;
    }

    public boolean isVowel(char ch) {
        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';
    }
}

/*
LOGIC: 

str="abcd"

All substrings :

"a" , "ab", "abc", "abcd"

"b",  "bc", "bcd"

"c", "cd"

"d"


'a' Appears 4 times : (n-0) + (n-0)*0

'b' Appears 6 times : (n-1) + (n-1)*1

'c' Appears 6 times : (n-2) + (n-2)*2

'd' Appears 4 times : (n-3) + (n-3)*3

Generalised formula:

count of arr[i]= (n-i)+(n-i)*i
count of arr[i]= (n-i)*(1+(1*i))
count of arr[i]= (n-i)*(i+1)                  
*/
