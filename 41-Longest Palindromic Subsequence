//Bruteforce Approach

class Solution {
    public int longestPalindromeSubseq(String str) {
        List<String> subsequences = generateSubsequences(str);
        int maxLength = 0;

        for (String subsequence : subsequences) {
            if (isPalindrome(subsequence)) {
                maxLength = Math.max(maxLength, subsequence.length());
            }
        }

        return maxLength;
    }

    private List<String> generateSubsequences(String str) {
        List<String> subsequences = new ArrayList<>();
        subsequences.add(""); // Start with the empty subsequence

        for (int i = 0; i < str.length(); i++) {
            int size = subsequences.size();
            for (int j = 0; j < size; j++) {
                subsequences.add(subsequences.get(j) + str.charAt(i));
            }
        }

        return subsequences;
    }

    private boolean isPalindrome(String str) {
        int start = 0, end = str.length() - 1;

        while (start < end) {
            if (str.charAt(start) != str.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }

        return true;
    }
}


//Improved Approach

class Solution {
    public int longestPalindromeSubseq(String str) {
        int maxLength = 0;
        List<String> subsequences = new ArrayList<>();
        subsequences.add(""); // Start with the empty subsequence

        for (int i = 0; i < str.length(); i++) {
            int size = subsequences.size();
            for (int j = 0; j < size; j++) {
                String subsequence = subsequences.get(j) + str.charAt(i);
                if (isPalindrome(subsequence)) {
                    maxLength = Math.max(maxLength, subsequence.length());
                }
                subsequences.add(subsequence);
            }
        }

        return maxLength;
    }

    private boolean isPalindrome(String str) {
        int start = 0, end = str.length() - 1;

        while (start < end) {
            if (str.charAt(start) != str.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }

        return true;
    }
}


//Good Approach

class Solution {
    public int longestPalindromeSubseq(String str) {
        return computeLps(str, 0, str.length() - 1);
    }

    private int computeLps(String str, int start, int end) {
        if (start > end) {
            return 0;
        }

        if (start == end) { 
            return 1;// only one char is always palindrome
        }

        if (str.charAt(start) == str.charAt(end)) {
            return 2 + computeLps(str, start + 1, end - 1);//the length of the palindromic subsequence increases by 2 (one for each matching character)
        }

        return Math.max(computeLps(str, start + 1, end), computeLps(str, start, end - 1));
    }
}


//Better Approach

class Solution {
    public int longestPalindromeSubseq(String str) {
        int[][] memo = new int[str.length()][str.length()];
        intializeMemo(memo);
        return computeLps(str, 0, str.length() - 1, memo);
    }

    private void intializeMemo(int[][] memo) {
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
    }

    private int computeLps(String str, int start, int end, int[][] memo) {
        if (start > end) {
            return 0;
        }

        if (memo[start][end] != -1) {
            return memo[start][end];
        }

        if (start == end) {
            return 1;// only one char is always palindrome
        }

        if (str.charAt(start) == str.charAt(end)) {
            return memo[start][end] = 2 + computeLps(str, start + 1, end - 1, memo);// the length of the palindromic subsequence increases by 2 (one for each matching character)
        }

        return memo[start][end] = Math.max(computeLps(str, start + 1, end, memo), computeLps(str, start, end - 1, memo));
    }
}


//Optimal Approach

class Solution {
    public int longestPalindromeSubseq(String str) {
        int[][] dp = new int[str.length()][str.length()];

        for (int gap = 0; gap < str.length(); gap++) {
            for (int i = 0, j = gap; j < str.length(); i++, j++) {
                if (gap == 0) {
                    dp[i][j] = 1;
                } else if (str.charAt(i) == str.charAt(j)) {
                    dp[i][j] = 2 + dp[i + 1][j - 1];
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[0][str.length() - 1]; // The longest palindromic subsequence length
    }
}

//Aliter (Using LCS)
/*
When you reverse a string, the sequence of characters is inverted. For instance, the original string "abc" becomes "cba" when reversed. 
This process effectively mirrors each character's position relative to the original string. 
Therefore, if a subsequence exists in both the original string and its reversed version, it indicates that the subsequence maintains a symmetrical arrangement. 
This symmetry means the characters can be read the same way from either end, which is the defining characteristic of a palindrome. 
Thus, any common subsequence found in both the original string and its reverse must be a palindrome.
*/

class Solution {
    public int longestPalindromeSubseq(String str) {
        return longestCommonSubsequence(str, reverse(str));
    }

    private int longestCommonSubsequence(String str1, String str2) {
        int[] previousRow = new int[str2.length() + 1];
        int[] currentRow = new int[str2.length() + 1];

        for (int i = 1; i <= str1.length(); i++) {
            for (int j = 1; j <= str2.length(); j++) {
                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    currentRow[j] = 1 + previousRow[j - 1];
                } else {
                    currentRow[j] = Math.max(previousRow[j], currentRow[j - 1]);
                }
            }
            int[] temp = previousRow;
            previousRow = currentRow;
            currentRow = temp;
        }

        return previousRow[str2.length()];
    }

    private String reverse(String str) {
        char[] arr = str.toCharArray();

        for (int i = 0; i < (arr.length / 2); i++) {
            char temp = arr[i];
            arr[i] = arr[arr.length - 1 - i];
            arr[arr.length - 1 - i] = temp;
        }

        return new String(arr);
    }
}
