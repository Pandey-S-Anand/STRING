//Bruteforce Approach

class Solution {
    public boolean isScramble(String str1, String str2) {
        return isScrambleHelper(str1, str2);
    }

    private boolean isScrambleHelper(String str1, String str2) {
        // Base case: If the two strings are equal, they are scramble strings
        if (str1.equals(str2)) {
            return true;
        }

        int n = str1.length();

        // Iterate over all possible partitions of the strings
        for (int partition = 1; partition < n; partition++) {
            /*
             * Case 1: No swap case
             * Check if the left part of str1 matches the left part of str2
             * AND the right part of str1 matches the right part of str2
             */
            boolean notSwap = isScramble(str1.substring(0, partition), str2.substring(0, partition))
                    && isScramble(str1.substring(partition), str2.substring(partition));
            
            // If a valid partition is found without a swap, return true
            if (notSwap) {
                return true;
            }

            /*
             * Case 2: Swap case
             * Check if the left part of str1 matches the right part of str2
             * AND the right part of str1 matches the left part of str2
             */
            boolean swap = isScramble(str1.substring(0, partition), str2.substring(n - partition))
                    && isScramble(str1.substring(partition), str2.substring(0, n - partition));
           
            // If a valid partition is found with a swap, return true
            if (swap) {
                return true;
            }
        }
        
        // If no valid scramble is found, return false
        return false;
    }
}


//Improved Approach

class Solution {
    public boolean isScramble(String str1, String str2) {
        return isScramble(str1, str2, 0, str1.length() - 1, 0, str2.length() - 1);
    }

    private boolean isScramble(String str1, String str2, int start1, int end1, int start2, int end2) {
        if (str1.substring(start1, end1 + 1).equals(str2.substring(start2, end2 + 1))) {
            return true;
        }

        int n = end1 - start1 + 1;

        for (int partition = 1; partition < n; partition++) {
            boolean notSwap = isScramble(str1, str2, start1, start1 + partition - 1, start2, start2 + partition - 1)
                    && isScramble(str1, str2, start1 + partition, end1, start2 + partition, end2);

            if (notSwap) {
                return true;
            }

            boolean swap = isScramble(str1, str2, start1, start1 + partition - 1, end2 - partition + 1, end2)
                    && isScramble(str1, str2, start1 + partition, end1, start2, end2 - partition);

            if (swap) {
                return true;
            }
        }

        return false;
    }
}

//Good Approach

class Solution {
    private int[][][][] cache;

    public boolean isScramble(String str1, String str2) {
        cache = new int[str1.length()][str1.length()][str1.length()][str1.length()];
        return isScramble(str1, str2, 0, str1.length() - 1, 0, str2.length() - 1);
    }

    private boolean isScramble(String str1, String str2, int start1, int end1, int start2, int end2) {
        if (areEqual(str1, str2, start1, end1, start2, end2)) {
            return true;
        }

        if (cache[start1][end1][start2][end2] != 0) {
            return cache[start1][end1][start2][end2] == 1;
        }

        int n = end1 - start1 + 1;

        for (int partition = 1; partition < n; partition++) {
            boolean notSwap = isScramble(str1, str2, start1, start1 + partition - 1, start2,start2 + partition - 1)
                    && isScramble(str1, str2, start1 + partition, end1, start2 + partition, end2);

            if (notSwap) {
                cache[start1][end1][start2][end2] = 1;
                return true;
            }

            boolean swap = isScramble(str1, str2, start1, start1 + partition - 1, end2 - partition + 1, end2)
                    && isScramble(str1, str2, start1 + partition, end1, start2, end2 - partition);

            if (swap) {
                cache[start1][end1][start2][end2] = 1;
                return true;
            }
        }

        cache[start1][end1][start2][end2] = -1;
        return false;
    }

    private boolean areEqual(String str1, String str2, int start1, int end1, int start2, int end2) {
        for (int i = 0; i <= end1 - start1; i++) {
            if (str1.charAt(start1 + i) != str2.charAt(start2 + i)) {
                return false;
            }
        }

        return true;
    }
}


//Better Approach

class Solution {
    private int[] frequencyMap;
    private int[][][][] cache;

    public boolean isScramble(String str1, String str2) {
        cache = new int[str1.length()][str1.length()][str1.length()][str1.length()];
        frequencyMap = new int[26];

        return isScramble(str1, str2, 0, str1.length() - 1, 0, str2.length() - 1);
    }

    private boolean isScramble(String str1, String str2, int start1, int end1, int start2, int end2) {
        if (areEqual(str1, str2, start1, end1, start2, end2)) {
            return true;
        }

        if (cache[start1][end1][start2][end2] != 0) {
            return cache[start1][end1][start2][end2] == 1;
        }

        int n = end1 - start1 + 1;

        // Reset the frequency map to count character occurrences
        Arrays.fill(frequencyMap, 0);
        /*
         * Count the frequency of each character in the substrings:
         * - `str1[start1..end1]` for the first substring
         * - `str2[start2..end2]` for the second substring
         * 
         * Compare the character frequencies.
         * If they don't match, the substrings cannot be scrambles of each other.
         */
        for (int i = 0; i < n; i++) {
            frequencyMap[str1.charAt(start1 + i) - 'a']++;
            frequencyMap[str2.charAt(start2 + i) - 'a']--;
        }

        for (int i = 0; i < 26; i++) {
            if (frequencyMap[i] != 0) {
                cache[start1][end1][start2][end2] = -1;
                return false;
            }
        }

        for (int partition = 1; partition < n; partition++) {
            boolean notSwap = isScramble(str1, str2, start1, start1 + partition - 1, start2, start2 + partition - 1)
                    && isScramble(str1, str2, start1 + partition, end1, start2 + partition, end2);

            if (notSwap) {
                cache[start1][end1][start2][end2] = 1;
                return true;
            }

            boolean swap = isScramble(str1, str2, start1, start1 + partition - 1, end2 - partition + 1, end2)
                    && isScramble(str1, str2, start1 + partition, end1, start2, end2 - partition);

            if (swap) {
                cache[start1][end1][start2][end2] = 1;
                return true;
            }
        }

        cache[start1][end1][start2][end2] = -1;
        return false;
    }

    private boolean areEqual(String str1, String str2, int start1, int end1, int start2, int end2) {
        for (int i = 0; i <= end1 - start1; i++) {
            if (str1.charAt(start1 + i) != str2.charAt(start2 + i)) {
                return false;
            }
        }

        return true;
    }
}
