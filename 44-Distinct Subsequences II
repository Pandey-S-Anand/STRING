//Bruteforce Approach






//Better Approach

//Intuitive implementation

class Solution {
    private final int mod = 1000000007;
    private int[] memo;
    private int[] charLastIndexMap;

    public int distinctSubseqII(String str) {
        memo = new int[str.length()];
        charLastIndexMap = new int[26];
        Arrays.fill(memo, -1); // Set initial value as -1 to indicate absense of result
        Arrays.fill(charLastIndexMap, -1); // Set initial value as -1 to indicate no occurrences

        int result = distinctSubseq(str, str.length() - 1) - 1; // Subtract 1 to exclude the empty subsequence
        if (result < 0) {
            result = result + mod;
        } else {
            result = result % mod;
        }

        return result;
    }

    private int distinctSubseq(String str, int index) {
        if (index == -1) {
            return 1; // Base case: return 1 for the empty subsequence
        }

        if (memo[index] != -1) {
            return memo[index];
        }

        int result = 2 * distinctSubseq(str, index - 1);
        if (result < 0) {
            result = result + mod;
        } else {
            result = result % mod;
        }

        if (charLastIndexMap[str.charAt(index) - 'a'] != -1) {
            result = result - distinctSubseq(str, charLastIndexMap[str.charAt(index) - 'a'] - 1);
            if (result < 0) {
                result = result + mod;
            } else {
                result = result % mod;
            }
        }

        charLastIndexMap[str.charAt(index) - 'a'] = index;

        return memo[index] = result;
    }
}


//Optimal Implementation

class Solution {
    private final int mod = 1000000007;
    private int[] memo;
    private int[] charLastIndexMap;

    public int distinctSubseqII(String str) {
        memo = new int[str.length()];
        charLastIndexMap = new int[26];
        Arrays.fill(memo, -1);
        Arrays.fill(charLastIndexMap, -1);

        return (distinctSubseq(str, str.length() - 1) - 1 + mod) % mod;
    }

    private int distinctSubseq(String str, int index) {
        if (index == -1) {
            return 1;
        }

        if (memo[index] != -1) {
            return memo[index];
        }

        int result = (2 * (distinctSubseq(str, index - 1) % mod)) % mod;

        if (charLastIndexMap[str.charAt(index) - 'a'] != -1) {
            result = (result - (distinctSubseq(str, charLastIndexMap[str.charAt(index) - 'a'] - 1)) % mod + mod) % mod;
        }

        charLastIndexMap[str.charAt(index) - 'a'] = index;

        return memo[index] = result;
    }
}



//Optimal Approach

class Solution {
    private final int mod = 1000000007;

    public int distinctSubseqII(String str) {
        int[] dp = new int[str.length() + 1]; // dp[i] represents the count of distinct subsequences of the substringstr[0...i-1]
        int[] charLastIndexMap = new int[26]; // Track last occurrence of each character

        dp[0] = 1; // Base case: There's one subsequence (the empty subsequence)

        for (int i = 1; i <= str.length(); i++) {
            dp[i] = 2 * dp[i - 1];

            char ch = str.charAt(i - 1);
            if (charLastIndexMap[ch - 'a'] != 0) {
                dp[i] = (dp[i] - dp[charLastIndexMap[ch - 'a'] - 1]);
            }

            charLastIndexMap[ch - 'a'] = i;

            if (dp[i] < 0) {
                dp[i] = dp[i] + mod;
            } else {
                dp[i] = dp[i] % mod;
            }
        }

        int result = dp[str.length()] - 1; // Subtract 1 to exclude the empty subsequence

        if (result < 0) {
            result += mod; // Handle negative result after subtraction
        }

        return result;
    }
}
