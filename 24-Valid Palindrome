/*
Alphanumeric characters are the alphabetical letters and numerical numbers used in a given language.
In English, alphanumeric characters are the 26 letters from A to Z and the 10 Arabic numerals are from 0 to 9.
*/

//Bruteforce Approach

//Iterative version

class Solution {
    public boolean isPalindrome(String str) {
       return checkPalindrome(removeNonAlphaNumericCharacters(str));
    }

    public String removeNonAlphaNumericCharacters(String str)
    {
      StringBuilder res=new StringBuilder();
      for(int i=0;i<str.length();i++)
      {
        char ch=str.charAt(i);
        if(Character.isLetter(ch))
          res.append(Character.toLowerCase(ch));
        else if(Character.isDigit(ch))
          res.append(ch);
      }

      return res.toString();
    }

    public boolean checkPalindrome(String str)
    {
       int i=0,j=str.length()-1;

       while(i<j)
       {
         if(str.charAt(i)!=str.charAt(j))
           return false;

         i++;
         j--;
       }
      
      return true;
    }
}


//Recursive Version

class Solution {
    public boolean isPalindrome(String str) {
       String s=removeNonAlphaNumericCharacters(str);
       return checkPalindrome(s,0,s.length()-1);
    }

    public String removeNonAlphaNumericCharacters(String str)
    {
      StringBuilder res=new StringBuilder();
      
      for(int i=0;i<str.length();i++)
      {
        char ch=str.charAt(i);
        if(Character.isLetter(ch))
          res.append(Character.toLowerCase(ch));
        else if(Character.isDigit(ch))
          res.append(ch);
      }

      return res.toString();
    }

    public boolean checkPalindrome(String str,int start,int end)
    {
       if(start>=end)
         return true;
       
       if(str.charAt(start)!=str.charAt(end))
          return false;

       return checkPalindrome(str,++start,--end);
    }
}


//Optimal Approach

class Solution {
   public boolean isPalindrome(String str) {
        int start = 0;
        int end = str.length() - 1;

        while (start < end)
        {

            while(start<end && Character.isLetterOrDigit(str.charAt(start))==false)
                start++;
            while(start<end && Character.isLetterOrDigit(str.charAt(end))==false)
                end--;
            
            if(start<end)
            {
              if(Character.toLowerCase(str.charAt(start)) != Character.toLowerCase(str.charAt(end)))
                 return false;
              
              start++;
              end--;
            }        
        }

        return true;
    }
}

/*
Note :

you can apply toLowerCase() to digits. It will not change the value of the digit itself, but it will still work without any errors.
This is because digits do not have uppercase or lowercase forms, so the toLowerCase() method doesn't affect them. 
*/
