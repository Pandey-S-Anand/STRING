// Bruteforce Approach

class Solution {
    public List<List<String>> groupAnagrams(String[] arr) {
        List<List<String>> anagramGroups = new ArrayList<>();

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == null) {
                continue;
            }

            List<String> anagramGroup = new ArrayList<>();

            anagramGroup.add(arr[i]);

            for (int j = i + 1; j < arr.length; j++) {
                if (arr[j] != null && areAnagram(arr[i], arr[j])) {
                    anagramGroup.add(arr[j]);
                    arr[j] = null;
                }
            }

            anagramGroups.add(anagramGroup);
        }

        return anagramGroups;
    }

    private boolean areAnagram(String str1, String str2) {
        if (str1.length() != str2.length()) {
            return false;
        }

        int[] frequencyArray = new int[26];

        for (int i = 0; i < str1.length(); i++) {
            frequencyArray[str1.charAt(i) - 'a']++;
        }

        for (int i = 0; i < str2.length(); i++) {
            frequencyArray[str2.charAt(i) - 'a']--;
        }

        for (int i = 0; i < 26; i++) {
            if (frequencyArray[i] != 0) {
                return false;
            }
        }

        return true;
    }
}


//Optimal Approach

class Solution {
    public List<List<String>> groupAnagrams(String[] arr) {
        Map<String, List<String>> anagramGroups = new HashMap<>();

        for (String str : arr) {
            char[] charArray = str.toCharArray();
            Arrays.sort(charArray);
            String sortedWord = new String(charArray);

            if (anagramGroups.containsKey(sortedWord)) {
                anagramGroups.get(sortedWord).add(str);
            } else {
                anagramGroups.put(sortedWord, new ArrayList<>(Arrays.asList(str)));
            }
        }

        return new ArrayList<>(anagramGroups.values());
    }
}
