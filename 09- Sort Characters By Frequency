//Better Approach

class Solution {
    public String frequencySort(String str) {
      int n=str.length();
      HashMap<Character,Integer> hm = new HashMap<>();

      for(int i=0;i<n;i++)
      {
        char ch=str.charAt(i);

        if(hm.containsKey(ch))
	        hm.put(ch,hm.get(ch)+1);
        else
	        hm.put(ch,1); 
      }
			    
      int[][] res = new int[hm.size()][2];
	
      int i=0;
      for(char key:hm.keySet())
      {
        res[i][0] = key;
        res[i][1] = hm.get(key); 
        i++;
      }

      Arrays.sort(res,new customSort());  
    
      StringBuilder ans=new StringBuilder();
    
      for(int k=0;k<res.length;k++)
      {
       char val=(char)res[k][0];
       int freq=res[k][1];
 
       while(freq!=0)
       {
         ans.append(val);
         freq--;
       }
      }

      return ans.toString(); 
    }
}


//Sort 2D array according to frequency in descending order 

class customSort implements Comparator<int[]>{
  public int compare(int[]arr1,int[]arr2){
    if(arr1[1]<arr2[1])
      return 1;
    else if (arr1[1]>arr2[1])
      return -1;
    else
      return 0;
  }
}



//Optimal Approach


class Solution {
    public String frequencySort(String str) {
      int n=str.length();
      int[]frequency=new int[123];

      for(int i=0;i<n;i++)
        frequency[str.charAt(i)]++;

      int cnt=0;
      for(int i=0;i<123;i++)
        if(frequency[i]!=0)
          cnt++;
			    
      int[][] res = new int[cnt][2];
	
      int idx=0;
      for(int i=0;i<123;i++)
      {
        if(frequency[i]!=0)
        {
          res[idx][0] = i;
          res[idx][1] = frequency[i]; 
          idx++;
        }
      }
    
      Arrays.sort(res,new customSort());  
    
      StringBuilder ans=new StringBuilder();
    
      for(int i=0;i<cnt;i++)
      {
       char val=(char)res[i][0];
       int freq=res[i][1];
 
       while(freq!=0)
       {
         ans.append(val);
         freq--;
       }
      }

      return ans.toString();
    }
}

//Sort 2D array according to frequency in descending order 

class customSort implements Comparator<int[]>{
  public int compare(int[]arr1,int[]arr2){

    if(arr1[1]<arr2[1])
      return 1;
    else if (arr1[1]>arr2[1])
      return -1;
    else
      return 0;
  }
}
