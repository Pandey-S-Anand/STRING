//Using Stack

//Implementation 1

class Solution {
    public String removeDuplicates(String str) {
        int n=str.length();

        StringBuilder stack = new StringBuilder();

        for (int i=0;i<n;i++)
        {
            char ch=str.charAt(i);
            int currLen=stack.length();
            
            if(currLen!=0 && stack.charAt(currLen-1)==ch)
               stack.deleteCharAt(currLen-1);
            else
               stack.append(ch); 
        } 
            
        return stack.toString();
    }
}


//Implementation 2

class Solution {
    public String removeDuplicates(String str) {
        int n=str.length();
        ArrayDeque<Character> stack = new ArrayDeque();

        for (int i=0;i<n;i++)
        {
            char ch=str.charAt(i);
            
            if(stack.size()!=0 && stack.peek()==ch)
               stack.pop();
            else
               stack.push(ch); 
        } 

        StringBuilder ans=new StringBuilder();

        while(stack.size()!=0)
        {
          char ch=stack.pop();
          ans.append(ch);
        }  

        return ans.reverse().toString();
    }
}


//Implementation 3

class Solution {
    public String removeDuplicates(String str) {
        int n=str.length();
        ArrayDeque<Character> stack = new ArrayDeque();

        for (int i=0;i<n;i++)
        {
            char ch=str.charAt(i);
            
            if(stack.size()!=0 && stack.peek()==ch)
               stack.pop();
            else
               stack.push(ch);
        } 

        StringBuilder ans=new StringBuilder();

        while(stack.size()!=0)
          ans.append(stack.removeLast());

        return ans.toString();
    }
}




//Method 2 (Using Two Pointers)

class Solution {
    public String removeDuplicates(String str) {
        int n=str.length(),k=-1;
        char[]res=new char[n];
	
        for (int i=0;i<n;i++) 
        {
          char ch=str.charAt(i);
	    
          if(k!=-1 && res[k]==ch) 
            k=k-1;
          else
            res[++k]=ch;
        }
	
        StringBuilder ans=new StringBuilder();
        for(int i=0;i<=k;i++) 
          ans.append(res[i]);
	  
        return ans.toString(); 
    }
}
