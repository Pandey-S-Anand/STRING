//Bruteforce Approach

class Solution {
    public int longestCommonSubstr(String str1, String str2) {
        int maxLength = 0;
        List<String> substrings1 = generateSubstrings(str1);
        List<String> substrings2 = generateSubstrings(str2);

        for (String substring1 : substrings1) {
            for (String substring2 : substrings2) {
                if (substring1.length() == substring2.length() && substring1.equals(substring2)) {
                    maxLength = Math.max(maxLength, substring1.length());
                }
            }
        }

        return maxLength;
    }

    private List<String> generateSubstrings(String str) {
        List<String> substrings = new ArrayList<>();

        for (int i = 0; i < str.length(); i++) {
            for (int j = i; j < str.length(); j++) {
                substrings.add(str.substring(i, j + 1));
            }
        }

        return substrings;
    }
}


//Improved Approach

class Solution {
    public int longestCommonSubstr(String str1, String str2) {
        int maxLengthCommonSuffix = 0;

        // Iterate over all combinations of prefixes of str1 and str2
        for (int i = 0; i < str1.length(); i++) {
            for (int j = 0; j < str2.length(); j++) {
                // Compute the length of common suffix for the current prefixes of str1(str1[0..i]) and str2 (str2[0..j])
                int commonSuffixLength = longestCommonSuffix(str1, str2, i, j);
                maxLengthCommonSuffix = Math.max(maxLengthCommonSuffix, commonSuffixLength);
            }
        }

        return maxLengthCommonSuffix;
    }

    private int longestCommonSuffix(String str1, String str2, int i, int j) {
        // Base case: if either of the string is empty, no common suffix possible
        if (i < 0 || j < 0) {
            return 0;
        }

        // If characters at the current positions match, the common suffix extends by 1
        if (str1.charAt(i) == str2.charAt(j)) {
            return longestCommonSuffix(str1, str2, i - 1, j - 1) + 1;
        }

        return 0; // If characters don't match, no common suffix
    }
}


//Better Approach

class Solution {
    int[][] memo; // memo[i][j]=Length of longest common suffix between str1[0...i] and str2[0...j]

    public int longestCommonSubstr(String str1, String str2) {
        memo = new int[str1.length()][str2.length()];

        intializeMemo();

        int maxLengthCommonSuffix = 0;

        // Iterate over all combinations of prefixes of str1 and str2
        for (int i = 0; i < str1.length(); i++) {
            for (int j = 0; j < str2.length(); j++) {
                // Compute the length of common suffix for the current prefixes of str1 (str1[0..i]) and str2 (str2[0..j])
                int commonSuffixLength = longestCommonSuffix(str1, str2, i, j);
                maxLengthCommonSuffix = Math.max(maxLengthCommonSuffix, commonSuffixLength);
            }
        }

        return maxLengthCommonSuffix;
    }

    private int longestCommonSuffix(String str1, String str2, int i, int j) {
        if (i < 0 || j < 0) {
            return 0;
        }

        if (memo[i][j] != -1) {
            return memo[i][j];
        }

        if (str1.charAt(i) == str2.charAt(j)) {
            return memo[i][j] = longestCommonSuffix(str1, str2, i - 1, j - 1) + 1;
        }

        return memo[i][j] = 0;
    }

    private void intializeMemo() {
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation 

class Solution {
    public int longestCommonSubstr(String str1, String str2) {
        int[][] dp = new int[str1.length() + 1][str2.length() + 1];
        int maxLength = 0;

        for (int i = 1; i <= str1.length(); i++) {
            for (int j = 1; j <= str2.length(); j++) {
                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                    maxLength = Math.max(maxLength, dp[i][j]);
                } else {
                    dp[i][j] = 0;
                }
            }
        }

        return maxLength;
    }
}

//Optimal Implementation

class Solution {
    public int longestCommonSubstr(String str1, String str2) {
        int[][] dp = new int[str1.length() + 1][str2.length() + 1];
        int maxLength = 0;

        for (int i = 1; i <= str1.length(); i++) {
            for (int j = 1; j <= str2.length(); j++) {
                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                    maxLength = Math.max(maxLength, dp[i][j]);
                }
            }
        }

        return maxLength;
    }
}


//Aliter (space optimised)

class Solution {
    public int longestCommonSubstr(String str1, String str2) {
        int[] currentRow = new int[str2.length() + 1];
        int[] previousRow = new int[str2.length() + 1];
        int maxLength = 0;

        for (int i = 1; i <= str1.length(); i++) {
            for (int j = 1; j <= str2.length(); j++) {
                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    currentRow[j] = 1 + previousRow[j - 1];
                    maxLength = Math.max(maxLength, currentRow[j]);
                } else {
                    currentRow[j] = 0;
                }
            }
            int[] temp = currentRow;
            currentRow = previousRow;
            previousRow = temp;
        }

        return maxLength;
    }
}
