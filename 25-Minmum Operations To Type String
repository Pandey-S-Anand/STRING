//Method 1

class Solution {
    int minOperation(String str) {
        int minOperation = str.length(); // Worst case: type all characters individually

        for (int i = 0; i < str.length() / 2; i++) {
            String prefix = str.substring(0, i + 1);
            /*
             * We then iterate through possible prefixes of the string. For each prefix, we check if it repeats immediately after itself.
             * If a prefix repeats, it means we can use the doubling operation to efficiently construct the string.
             */
            if (currentString.equals(str.substring(i + 1, i + 1 + prefix.length()))) {
                /*
                 * Logic behind calculating current minimun operation is following :
                 * Whenever we enocunter a longer prefix going forward in the string we consider
                 * that prefix formed so far has consumed 1 operation per character (because we
                 * are allowed to use doubling operation once) and we consider the current
                 * operation as a doubling operation also we consider the remaining characters
                 * in the string would require one operation per character.(because we are
                 * allowed to use doubling operation once)
                 * Ex: str="aaabcaaabcaaabcaaabc"
                 * Output : 11
                 */
                int currentMinOperation = prefix.length() + 1 + (str.length() - 2 * prefix.length());
                minOperation = Math.min(minOperation, currentMinOperation);
            }
        }

        return minOperation;
    }
}


//Method 2

class Solution {
    int minOperation(String str) {
        for (int i = (str.length() / 2) - 1; i >= 0; i--) {
            String prefix = str.substring(0, i + 1);
            if (prefix.equals(str.substring(i + 1, i + 1 + prefix.length()))) {
                return prefix.length() + 1 + (str.length() - 2 * prefix.length());
            }
        }

        return str.length();
    }
}
